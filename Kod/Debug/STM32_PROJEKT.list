
STM32_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e4  080066e4  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080066e4  080066e4  000076e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ec  080066ec  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080066f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          000002a0  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f845  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b7  00000000  00000000  000178d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00019a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a95  00000000  00000000  0001a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2a5  00000000  00000000  0001b2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110b1  00000000  00000000  0003954a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7aef  00000000  00000000  0004a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001020ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d9c  00000000  00000000  00102130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00105ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006630 	.word	0x08006630

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006630 	.word	0x08006630

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <aktualizujPredkosc>:

/*=============================================================================
  Ustawianie PWM wg procentuPredkosci
=============================================================================*/
void aktualizujPredkosc(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
   uint32_t period = htim3.Init.Period + 1;
 8000286:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <aktualizujPredkosc+0x44>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	3301      	adds	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
   uint32_t predkosc = (period * procentPredkosci) / 100;
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <aktualizujPredkosc+0x48>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	461a      	mov	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	fb02 f303 	mul.w	r3, r2, r3
 800029c:	4a0b      	ldr	r2, [pc, #44]	@ (80002cc <aktualizujPredkosc+0x4c>)
 800029e:	fba2 2303 	umull	r2, r3, r2, r3
 80002a2:	095b      	lsrs	r3, r3, #5
 80002a4:	603b      	str	r3, [r7, #0]
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, predkosc);
 80002a6:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <aktualizujPredkosc+0x44>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	635a      	str	r2, [r3, #52]	@ 0x34
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, predkosc);
 80002ae:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <aktualizujPredkosc+0x44>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	683a      	ldr	r2, [r7, #0]
 80002b4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	200000c8 	.word	0x200000c8
 80002c8:	20000000 	.word	0x20000000
 80002cc:	51eb851f 	.word	0x51eb851f

080002d0 <zatrzymajSilniki>:

/*=============================================================================
  Zatrzymanie silników
=============================================================================*/
void zatrzymajSilniki(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <zatrzymajSilniki+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2200      	movs	r2, #0
 80002da:	635a      	str	r2, [r3, #52]	@ 0x34
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <zatrzymajSilniki+0x20>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2200      	movs	r2, #0
 80002e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	200000c8 	.word	0x200000c8

080002f4 <jedzNaprzod>:

/*=============================================================================
  Jazda do przodu – oba silniki do przodu
=============================================================================*/
void jedzNaprzod(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2101      	movs	r1, #1
 80002fc:	480b      	ldr	r0, [pc, #44]	@ (800032c <jedzNaprzod+0x38>)
 80002fe:	f001 fa49 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2102      	movs	r1, #2
 8000306:	4809      	ldr	r0, [pc, #36]	@ (800032c <jedzNaprzod+0x38>)
 8000308:	f001 fa44 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000312:	4806      	ldr	r0, [pc, #24]	@ (800032c <jedzNaprzod+0x38>)
 8000314:	f001 fa3e 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800031e:	4803      	ldr	r0, [pc, #12]	@ (800032c <jedzNaprzod+0x38>)
 8000320:	f001 fa38 	bl	8001794 <HAL_GPIO_WritePin>
   aktualizujPredkosc();
 8000324:	f7ff ffac 	bl	8000280 <aktualizujPredkosc>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	48000400 	.word	0x48000400

08000330 <jedzDoTylu>:

/*=============================================================================
  Jazda do tyłu – oba silniki do tyłu
=============================================================================*/
void jedzDoTylu(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2101      	movs	r1, #1
 8000338:	480b      	ldr	r0, [pc, #44]	@ (8000368 <jedzDoTylu+0x38>)
 800033a:	f001 fa2b 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800033e:	2201      	movs	r2, #1
 8000340:	2102      	movs	r1, #2
 8000342:	4809      	ldr	r0, [pc, #36]	@ (8000368 <jedzDoTylu+0x38>)
 8000344:	f001 fa26 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800034e:	4806      	ldr	r0, [pc, #24]	@ (8000368 <jedzDoTylu+0x38>)
 8000350:	f001 fa20 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800035a:	4803      	ldr	r0, [pc, #12]	@ (8000368 <jedzDoTylu+0x38>)
 800035c:	f001 fa1a 	bl	8001794 <HAL_GPIO_WritePin>
   aktualizujPredkosc();
 8000360:	f7ff ff8e 	bl	8000280 <aktualizujPredkosc>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	48000400 	.word	0x48000400

0800036c <skrecWLewo>:

/*=============================================================================
  Skręt w lewo: lewy silnik do tyłu, prawy do przodu
=============================================================================*/
void skrecWLewo(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	480b      	ldr	r0, [pc, #44]	@ (80003a4 <skrecWLewo+0x38>)
 8000376:	f001 fa0d 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	4809      	ldr	r0, [pc, #36]	@ (80003a4 <skrecWLewo+0x38>)
 8000380:	f001 fa08 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800038a:	4806      	ldr	r0, [pc, #24]	@ (80003a4 <skrecWLewo+0x38>)
 800038c:	f001 fa02 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000396:	4803      	ldr	r0, [pc, #12]	@ (80003a4 <skrecWLewo+0x38>)
 8000398:	f001 f9fc 	bl	8001794 <HAL_GPIO_WritePin>
   aktualizujPredkosc();
 800039c:	f7ff ff70 	bl	8000280 <aktualizujPredkosc>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	48000400 	.word	0x48000400

080003a8 <skrecWPrawo>:

/*=============================================================================
  Skręt w prawo: lewy silnik do przodu, prawy do tyłu
=============================================================================*/
void skrecWPrawo(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2101      	movs	r1, #1
 80003b0:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <skrecWPrawo+0x38>)
 80003b2:	f001 f9ef 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2102      	movs	r1, #2
 80003ba:	4809      	ldr	r0, [pc, #36]	@ (80003e0 <skrecWPrawo+0x38>)
 80003bc:	f001 f9ea 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003c6:	4806      	ldr	r0, [pc, #24]	@ (80003e0 <skrecWPrawo+0x38>)
 80003c8:	f001 f9e4 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003d2:	4803      	ldr	r0, [pc, #12]	@ (80003e0 <skrecWPrawo+0x38>)
 80003d4:	f001 f9de 	bl	8001794 <HAL_GPIO_WritePin>
   aktualizujPredkosc();
 80003d8:	f7ff ff52 	bl	8000280 <aktualizujPredkosc>
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	48000400 	.word	0x48000400

080003e4 <zatrzymajRobota>:

/*=============================================================================
  Pełne zatrzymanie robota
=============================================================================*/
void zatrzymajRobota(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
   zatrzymajSilniki();
 80003e8:	f7ff ff72 	bl	80002d0 <zatrzymajSilniki>
   HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	480a      	ldr	r0, [pc, #40]	@ (800041c <zatrzymajRobota+0x38>)
 80003f2:	f001 f9cf 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2102      	movs	r1, #2
 80003fa:	4808      	ldr	r0, [pc, #32]	@ (800041c <zatrzymajRobota+0x38>)
 80003fc:	f001 f9ca 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <zatrzymajRobota+0x38>)
 8000408:	f001 f9c4 	bl	8001794 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000412:	4802      	ldr	r0, [pc, #8]	@ (800041c <zatrzymajRobota+0x38>)
 8000414:	f001 f9be 	bl	8001794 <HAL_GPIO_WritePin>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	48000400 	.word	0x48000400

08000420 <zmierzOdleglosc>:

/*=============================================================================
  Pomiar odległości za pomocą czujnikow ultradźwiękowych
=============================================================================*/
uint32_t zmierzOdleglosc(GPIO_TypeDef* trigPort, uint16_t trigPin, GPIO_TypeDef* echoPort, uint16_t echoPin)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	461a      	mov	r2, r3
 800042c:	460b      	mov	r3, r1
 800042e:	817b      	strh	r3, [r7, #10]
 8000430:	4613      	mov	r3, r2
 8000432:	813b      	strh	r3, [r7, #8]
	uint32_t start = 0, stop = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
	uint32_t timeout = HAL_GetTick();
 800043c:	f000 fe5a 	bl	80010f4 <HAL_GetTick>
 8000440:	6178      	str	r0, [r7, #20]

	HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8000442:	897b      	ldrh	r3, [r7, #10]
 8000444:	2200      	movs	r2, #0
 8000446:	4619      	mov	r1, r3
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f001 f9a3 	bl	8001794 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800044e:	2001      	movs	r0, #1
 8000450:	f000 fe5c 	bl	800110c <HAL_Delay>
	HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_SET);
 8000454:	897b      	ldrh	r3, [r7, #10]
 8000456:	2201      	movs	r2, #1
 8000458:	4619      	mov	r1, r3
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f001 f99a 	bl	8001794 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000460:	4b2c      	ldr	r3, [pc, #176]	@ (8000514 <zmierzOdleglosc+0xf4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	@ 0x24

	while (__HAL_TIM_GET_COUNTER(&htim2) < 10);
 8000468:	bf00      	nop
 800046a:	4b2a      	ldr	r3, [pc, #168]	@ (8000514 <zmierzOdleglosc+0xf4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000470:	2b09      	cmp	r3, #9
 8000472:	d9fa      	bls.n	800046a <zmierzOdleglosc+0x4a>
	HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8000474:	897b      	ldrh	r3, [r7, #10]
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f001 f98a 	bl	8001794 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_RESET)
 8000480:	e008      	b.n	8000494 <zmierzOdleglosc+0x74>
	{
		if (HAL_GetTick() - timeout > 10) return 0;
 8000482:	f000 fe37 	bl	80010f4 <HAL_GetTick>
 8000486:	4602      	mov	r2, r0
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	2b0a      	cmp	r3, #10
 800048e:	d901      	bls.n	8000494 <zmierzOdleglosc+0x74>
 8000490:	2300      	movs	r3, #0
 8000492:	e03b      	b.n	800050c <zmierzOdleglosc+0xec>
	while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_RESET)
 8000494:	893b      	ldrh	r3, [r7, #8]
 8000496:	4619      	mov	r1, r3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f001 f963 	bl	8001764 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0ee      	beq.n	8000482 <zmierzOdleglosc+0x62>
	}
	start = __HAL_TIM_GET_COUNTER(&htim2);
 80004a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000514 <zmierzOdleglosc+0xf4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004aa:	61fb      	str	r3, [r7, #28]

	timeout = HAL_GetTick();
 80004ac:	f000 fe22 	bl	80010f4 <HAL_GetTick>
 80004b0:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_SET)
 80004b2:	e008      	b.n	80004c6 <zmierzOdleglosc+0xa6>
	{
		if (HAL_GetTick() - timeout > 50) return 0;
 80004b4:	f000 fe1e 	bl	80010f4 <HAL_GetTick>
 80004b8:	4602      	mov	r2, r0
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	2b32      	cmp	r3, #50	@ 0x32
 80004c0:	d901      	bls.n	80004c6 <zmierzOdleglosc+0xa6>
 80004c2:	2300      	movs	r3, #0
 80004c4:	e022      	b.n	800050c <zmierzOdleglosc+0xec>
	while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_SET)
 80004c6:	893b      	ldrh	r3, [r7, #8]
 80004c8:	4619      	mov	r1, r3
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f001 f94a 	bl	8001764 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d0ee      	beq.n	80004b4 <zmierzOdleglosc+0x94>
	}
	stop = __HAL_TIM_GET_COUNTER(&htim2);
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <zmierzOdleglosc+0xf4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004dc:	61bb      	str	r3, [r7, #24]

	uint32_t czas = (stop > start) ? (stop - start) : 0;
 80004de:	69ba      	ldr	r2, [r7, #24]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d903      	bls.n	80004ee <zmierzOdleglosc+0xce>
 80004e6:	69ba      	ldr	r2, [r7, #24]
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	e000      	b.n	80004f0 <zmierzOdleglosc+0xd0>
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]

	return (uint32_t)(czas * 0.017f);
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	ee07 3a90 	vmov	s15, r3
 80004f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004fc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000518 <zmierzOdleglosc+0xf8>
 8000500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000508:	ee17 3a90 	vmov	r3, s15
}
 800050c:	4618      	mov	r0, r3
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000007c 	.word	0x2000007c
 8000518:	3c8b4396 	.word	0x3c8b4396

0800051c <jedzPoLinii>:

/*=============================================================================
  Jazda po linii z reakcją na czujniki IR oraz czujniki odległości
=============================================================================*/
void jedzPoLinii(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	lewaOdleglosc  = zmierzOdleglosc(GPIOB, TRIG1_Pin, GPIOA, GPIO_PIN_1);
 8000522:	2302      	movs	r3, #2
 8000524:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000528:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800052c:	4842      	ldr	r0, [pc, #264]	@ (8000638 <jedzPoLinii+0x11c>)
 800052e:	f7ff ff77 	bl	8000420 <zmierzOdleglosc>
 8000532:	4603      	mov	r3, r0
 8000534:	4a41      	ldr	r2, [pc, #260]	@ (800063c <jedzPoLinii+0x120>)
 8000536:	6013      	str	r3, [r2, #0]
	prawaOdleglosc = zmierzOdleglosc(GPIOB, TRIG2_Pin, GPIOA, GPIO_PIN_2);
 8000538:	2304      	movs	r3, #4
 800053a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800053e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000542:	483d      	ldr	r0, [pc, #244]	@ (8000638 <jedzPoLinii+0x11c>)
 8000544:	f7ff ff6c 	bl	8000420 <zmierzOdleglosc>
 8000548:	4603      	mov	r3, r0
 800054a:	4a3d      	ldr	r2, [pc, #244]	@ (8000640 <jedzPoLinii+0x124>)
 800054c:	6013      	str	r3, [r2, #0]

	if (lewaOdleglosc < 15 || prawaOdleglosc < 15)
 800054e:	4b3b      	ldr	r3, [pc, #236]	@ (800063c <jedzPoLinii+0x120>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b0e      	cmp	r3, #14
 8000554:	d903      	bls.n	800055e <jedzPoLinii+0x42>
 8000556:	4b3a      	ldr	r3, [pc, #232]	@ (8000640 <jedzPoLinii+0x124>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b0e      	cmp	r3, #14
 800055c:	d802      	bhi.n	8000564 <jedzPoLinii+0x48>
	{
		zatrzymajRobota();
 800055e:	f7ff ff41 	bl	80003e4 <zatrzymajRobota>
		return;
 8000562:	e066      	b.n	8000632 <jedzPoLinii+0x116>
	}

    aktualizujPredkosc();
 8000564:	f7ff fe8c 	bl	8000280 <aktualizujPredkosc>

    uint8_t skrajnieLewySensor  = HAL_GPIO_ReadPin(IR_LEFTMOST_D0_GPIO_Port, IR_LEFTMOST_D0_Pin);
 8000568:	2108      	movs	r1, #8
 800056a:	4836      	ldr	r0, [pc, #216]	@ (8000644 <jedzPoLinii+0x128>)
 800056c:	f001 f8fa 	bl	8001764 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	71fb      	strb	r3, [r7, #7]
    uint8_t lewySensor          = HAL_GPIO_ReadPin(IR_LEFT_D0_GPIO_Port,     IR_LEFT_D0_Pin);
 8000574:	2108      	movs	r1, #8
 8000576:	4830      	ldr	r0, [pc, #192]	@ (8000638 <jedzPoLinii+0x11c>)
 8000578:	f001 f8f4 	bl	8001764 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	71bb      	strb	r3, [r7, #6]
    uint8_t centralnySensor     = HAL_GPIO_ReadPin(IR_CENTER_D0_GPIO_Port,   IR_CENTER_D0_Pin);
 8000580:	2120      	movs	r1, #32
 8000582:	482d      	ldr	r0, [pc, #180]	@ (8000638 <jedzPoLinii+0x11c>)
 8000584:	f001 f8ee 	bl	8001764 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	717b      	strb	r3, [r7, #5]
    uint8_t prawySensor         = HAL_GPIO_ReadPin(IR_RIGHT_D0_GPIO_Port,    IR_RIGHT_D0_Pin);
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	482a      	ldr	r0, [pc, #168]	@ (8000638 <jedzPoLinii+0x11c>)
 8000590:	f001 f8e8 	bl	8001764 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	713b      	strb	r3, [r7, #4]
    uint8_t skrajniePrawySensor = HAL_GPIO_ReadPin(IR_RIGHTMOST_D0_GPIO_Port, IR_RIGHTMOST_D0_Pin);
 8000598:	2104      	movs	r1, #4
 800059a:	482a      	ldr	r0, [pc, #168]	@ (8000644 <jedzPoLinii+0x128>)
 800059c:	f001 f8e2 	bl	8001764 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	70fb      	strb	r3, [r7, #3]

    if (centralnySensor == 1)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d105      	bne.n	80005b6 <jedzPoLinii+0x9a>
    {
        jedzNaprzod();
 80005aa:	f7ff fea3 	bl	80002f4 <jedzNaprzod>
        ostatniKierunek = 0;
 80005ae:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <jedzPoLinii+0x12c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	e03d      	b.n	8000632 <jedzPoLinii+0x116>
    }
    else if (lewySensor == 1)
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d105      	bne.n	80005c8 <jedzPoLinii+0xac>
    {
        skrecWLewo();
 80005bc:	f7ff fed6 	bl	800036c <skrecWLewo>
        ostatniKierunek = 1;
 80005c0:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <jedzPoLinii+0x12c>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e034      	b.n	8000632 <jedzPoLinii+0x116>
    }
    else if (prawySensor == 1)
 80005c8:	793b      	ldrb	r3, [r7, #4]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d105      	bne.n	80005da <jedzPoLinii+0xbe>
    {
        skrecWPrawo();
 80005ce:	f7ff feeb 	bl	80003a8 <skrecWPrawo>
        ostatniKierunek = 2;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <jedzPoLinii+0x12c>)
 80005d4:	2202      	movs	r2, #2
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e02b      	b.n	8000632 <jedzPoLinii+0x116>
    }
    else if (skrajnieLewySensor == 1)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d105      	bne.n	80005ec <jedzPoLinii+0xd0>
    {
        skrecWLewo();
 80005e0:	f7ff fec4 	bl	800036c <skrecWLewo>
        ostatniKierunek = 1;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <jedzPoLinii+0x12c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e022      	b.n	8000632 <jedzPoLinii+0x116>
    }
    else if (skrajniePrawySensor == 1)
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d105      	bne.n	80005fe <jedzPoLinii+0xe2>
    {
        skrecWPrawo();
 80005f2:	f7ff fed9 	bl	80003a8 <skrecWPrawo>
        ostatniKierunek = 2;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <jedzPoLinii+0x12c>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e019      	b.n	8000632 <jedzPoLinii+0x116>
    }
    else
    {
        jedzDoTylu();
 80005fe:	f7ff fe97 	bl	8000330 <jedzDoTylu>
        HAL_Delay(30);
 8000602:	201e      	movs	r0, #30
 8000604:	f000 fd82 	bl	800110c <HAL_Delay>

        if (ostatniKierunek == 1)
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <jedzPoLinii+0x12c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <jedzPoLinii+0xfa>
        {
            skrecWLewo();
 8000610:	f7ff feac 	bl	800036c <skrecWLewo>
 8000614:	e008      	b.n	8000628 <jedzPoLinii+0x10c>
        }
        else if (ostatniKierunek == 2)
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <jedzPoLinii+0x12c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d102      	bne.n	8000624 <jedzPoLinii+0x108>
        {
            skrecWPrawo();
 800061e:	f7ff fec3 	bl	80003a8 <skrecWPrawo>
 8000622:	e001      	b.n	8000628 <jedzPoLinii+0x10c>
        }
        else
        {
            jedzNaprzod();
 8000624:	f7ff fe66 	bl	80002f4 <jedzNaprzod>
        }

        HAL_Delay(150);
 8000628:	2096      	movs	r0, #150	@ 0x96
 800062a:	f000 fd6f 	bl	800110c <HAL_Delay>
        zatrzymajSilniki();
 800062e:	f7ff fe4f 	bl	80002d0 <zatrzymajSilniki>
    }
}
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	48000400 	.word	0x48000400
 800063c:	200001a4 	.word	0x200001a4
 8000640:	200001a8 	.word	0x200001a8
 8000644:	48000800 	.word	0x48000800
 8000648:	200001a0 	.word	0x200001a0

0800064c <wyswietlOdleglosc>:

/*=============================================================================
  Wyświetlanie odległości zmierzonych przez oba czujniki
=============================================================================*/
void wyswietlOdleglosc(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b090      	sub	sp, #64	@ 0x40
 8000650:	af00      	add	r7, sp, #0
	lewaOdleglosc = zmierzOdleglosc(GPIOB, TRIG1_Pin, GPIOA, GPIO_PIN_1);
 8000652:	2302      	movs	r3, #2
 8000654:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000658:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065c:	4814      	ldr	r0, [pc, #80]	@ (80006b0 <wyswietlOdleglosc+0x64>)
 800065e:	f7ff fedf 	bl	8000420 <zmierzOdleglosc>
 8000662:	4603      	mov	r3, r0
 8000664:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <wyswietlOdleglosc+0x68>)
 8000666:	6013      	str	r3, [r2, #0]
	prawaOdleglosc = zmierzOdleglosc(GPIOB, TRIG2_Pin, GPIOA, GPIO_PIN_2);
 8000668:	2304      	movs	r3, #4
 800066a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800066e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000672:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <wyswietlOdleglosc+0x64>)
 8000674:	f7ff fed4 	bl	8000420 <zmierzOdleglosc>
 8000678:	4603      	mov	r3, r0
 800067a:	4a0f      	ldr	r2, [pc, #60]	@ (80006b8 <wyswietlOdleglosc+0x6c>)
 800067c:	6013      	str	r3, [r2, #0]
	char tekst[64];
	sprintf(tekst, "Lewy: %lu cm | Prawy: %lu cm\r\n", lewaOdleglosc, prawaOdleglosc);
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <wyswietlOdleglosc+0x68>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <wyswietlOdleglosc+0x6c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4638      	mov	r0, r7
 8000688:	490c      	ldr	r1, [pc, #48]	@ (80006bc <wyswietlOdleglosc+0x70>)
 800068a:	f005 fb31 	bl	8005cf0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)tekst, strlen(tekst), HAL_MAX_DELAY);
 800068e:	463b      	mov	r3, r7
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd9d 	bl	80001d0 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	4639      	mov	r1, r7
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <wyswietlOdleglosc+0x74>)
 80006a2:	f004 f8bb 	bl	800481c <HAL_UART_Transmit>
}
 80006a6:	bf00      	nop
 80006a8:	3740      	adds	r7, #64	@ 0x40
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	48000400 	.word	0x48000400
 80006b4:	200001a4 	.word	0x200001a4
 80006b8:	200001a8 	.word	0x200001a8
 80006bc:	08006648 	.word	0x08006648
 80006c0:	20000114 	.word	0x20000114

080006c4 <obslugaMenu>:

/*=============================================================================
  MENU (UART)
=============================================================================*/
void obslugaMenu(char znak)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
   switch (znak)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	3b41      	subs	r3, #65	@ 0x41
 80006d2:	2b20      	cmp	r3, #32
 80006d4:	f200 8089 	bhi.w	80007ea <obslugaMenu+0x126>
 80006d8:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <obslugaMenu+0x1c>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	080007cf 	.word	0x080007cf
 80006e4:	080007eb 	.word	0x080007eb
 80006e8:	080007eb 	.word	0x080007eb
 80006ec:	080007eb 	.word	0x080007eb
 80006f0:	080007eb 	.word	0x080007eb
 80006f4:	080007eb 	.word	0x080007eb
 80006f8:	080007b1 	.word	0x080007b1
 80006fc:	080007eb 	.word	0x080007eb
 8000700:	080007eb 	.word	0x080007eb
 8000704:	080007eb 	.word	0x080007eb
 8000708:	080007eb 	.word	0x080007eb
 800070c:	080007bd 	.word	0x080007bd
 8000710:	08000765 	.word	0x08000765
 8000714:	0800078b 	.word	0x0800078b
 8000718:	080007e3 	.word	0x080007e3
 800071c:	080007c3 	.word	0x080007c3
 8000720:	080007eb 	.word	0x080007eb
 8000724:	080007eb 	.word	0x080007eb
 8000728:	080007c9 	.word	0x080007c9
 800072c:	080007b7 	.word	0x080007b7
 8000730:	080007eb 	.word	0x080007eb
 8000734:	080007eb 	.word	0x080007eb
 8000738:	080007eb 	.word	0x080007eb
 800073c:	080007eb 	.word	0x080007eb
 8000740:	080007eb 	.word	0x080007eb
 8000744:	080007eb 	.word	0x080007eb
 8000748:	080007eb 	.word	0x080007eb
 800074c:	080007eb 	.word	0x080007eb
 8000750:	080007eb 	.word	0x080007eb
 8000754:	080007eb 	.word	0x080007eb
 8000758:	080007eb 	.word	0x080007eb
 800075c:	080007eb 	.word	0x080007eb
 8000760:	080007d7 	.word	0x080007d7
   {
   case 'M':
      if (procentPredkosci + KROK_PREDKOSCI <= PREDKOSC_MAX) {
 8000764:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <obslugaMenu+0x130>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b5a      	cmp	r3, #90	@ 0x5a
 800076c:	d807      	bhi.n	800077e <obslugaMenu+0xba>
         procentPredkosci += KROK_PREDKOSCI;
 800076e:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <obslugaMenu+0x130>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	330a      	adds	r3, #10
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <obslugaMenu+0x130>)
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e002      	b.n	8000784 <obslugaMenu+0xc0>
      } else {
         procentPredkosci = PREDKOSC_MAX;
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <obslugaMenu+0x130>)
 8000780:	2264      	movs	r2, #100	@ 0x64
 8000782:	701a      	strb	r2, [r3, #0]
      }
      aktualizujPredkosc();
 8000784:	f7ff fd7c 	bl	8000280 <aktualizujPredkosc>
      break;
 8000788:	e030      	b.n	80007ec <obslugaMenu+0x128>

   case 'N':
      if (procentPredkosci >= KROK_PREDKOSCI) {
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <obslugaMenu+0x130>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b09      	cmp	r3, #9
 8000792:	d907      	bls.n	80007a4 <obslugaMenu+0xe0>
         procentPredkosci -= KROK_PREDKOSCI;
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <obslugaMenu+0x130>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	3b0a      	subs	r3, #10
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <obslugaMenu+0x130>)
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	e002      	b.n	80007aa <obslugaMenu+0xe6>
      } else {
         procentPredkosci = PREDKOSC_MIN;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <obslugaMenu+0x130>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
      }
      aktualizujPredkosc();
 80007aa:	f7ff fd69 	bl	8000280 <aktualizujPredkosc>
      break;
 80007ae:	e01d      	b.n	80007ec <obslugaMenu+0x128>

   case 'G':
      jedzNaprzod();
 80007b0:	f7ff fda0 	bl	80002f4 <jedzNaprzod>
      break;
 80007b4:	e01a      	b.n	80007ec <obslugaMenu+0x128>

   case 'T':
      jedzDoTylu();
 80007b6:	f7ff fdbb 	bl	8000330 <jedzDoTylu>
      break;
 80007ba:	e017      	b.n	80007ec <obslugaMenu+0x128>

   case 'L':
      skrecWLewo();
 80007bc:	f7ff fdd6 	bl	800036c <skrecWLewo>
      break;
 80007c0:	e014      	b.n	80007ec <obslugaMenu+0x128>

   case 'P':
      skrecWPrawo();
 80007c2:	f7ff fdf1 	bl	80003a8 <skrecWPrawo>
      break;
 80007c6:	e011      	b.n	80007ec <obslugaMenu+0x128>
   case 'S':
      zatrzymajRobota();
 80007c8:	f7ff fe0c 	bl	80003e4 <zatrzymajRobota>
      break;
 80007cc:	e00e      	b.n	80007ec <obslugaMenu+0x128>
   case 'A':
      Auto = 1;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <obslugaMenu+0x134>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
      break;
 80007d4:	e00a      	b.n	80007ec <obslugaMenu+0x128>
   case 'a':
      Auto = 0;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <obslugaMenu+0x134>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
      zatrzymajRobota();
 80007dc:	f7ff fe02 	bl	80003e4 <zatrzymajRobota>
      break;
 80007e0:	e004      	b.n	80007ec <obslugaMenu+0x128>
   case 'O':
	  pokazOdleglosc = 1;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <obslugaMenu+0x138>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
      break;
 80007e8:	e000      	b.n	80007ec <obslugaMenu+0x128>
   default:
      break;
 80007ea:	bf00      	nop
   }
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	2000019c 	.word	0x2000019c
 80007fc:	200001ac 	.word	0x200001ac

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000806:	f000 fc1b 	bl	8001040 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 800080a:	f000 f847 	bl	800089c <SystemClock_Config>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 800080e:	f000 f9a5 	bl	8000b5c <MX_GPIO_Init>
   MX_TIM3_Init();
 8000812:	f000 f8f1 	bl	80009f8 <MX_TIM3_Init>
   MX_TIM2_Init();
 8000816:	f000 f891 	bl	800093c <MX_TIM2_Init>
   MX_USART1_UART_Init();
 800081a:	f000 f96f 	bl	8000afc <MX_USART1_UART_Init>

   /* USER CODE BEGIN 2 */
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <main+0x80>)
 8000822:	f002 fcb9 	bl	8003198 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	4815      	ldr	r0, [pc, #84]	@ (8000880 <main+0x80>)
 800082a:	f002 fcb5 	bl	8003198 <HAL_TIM_PWM_Start>

   aktualizujPredkosc();
 800082e:	f7ff fd27 	bl	8000280 <aktualizujPredkosc>

   HAL_TIM_Base_Start(&htim2);
 8000832:	4814      	ldr	r0, [pc, #80]	@ (8000884 <main+0x84>)
 8000834:	f002 fbec 	bl	8003010 <HAL_TIM_Base_Start>
   HAL_UART_Receive_IT(&huart1, (uint8_t*)&znak, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	4913      	ldr	r1, [pc, #76]	@ (8000888 <main+0x88>)
 800083c:	4813      	ldr	r0, [pc, #76]	@ (800088c <main+0x8c>)
 800083e:	f004 f876 	bl	800492e <HAL_UART_Receive_IT>

   char *w = "Robot Działa\r\n";
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <main+0x90>)
 8000844:	607b      	str	r3, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t*)w, strlen(w), HAL_MAX_DELAY);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fcc2 	bl	80001d0 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	480d      	ldr	r0, [pc, #52]	@ (800088c <main+0x8c>)
 8000858:	f003 ffe0 	bl	800481c <HAL_UART_Transmit>

   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while (1)
   {
      if (Auto==1)
 800085c:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <main+0x94>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b01      	cmp	r3, #1
 8000864:	d101      	bne.n	800086a <main+0x6a>
      {
    	  jedzPoLinii();
 8000866:	f7ff fe59 	bl	800051c <jedzPoLinii>
      }
      if (pokazOdleglosc==1)
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <main+0x98>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b01      	cmp	r3, #1
 8000872:	d1f3      	bne.n	800085c <main+0x5c>
      {
          wyswietlOdleglosc();
 8000874:	f7ff feea 	bl	800064c <wyswietlOdleglosc>
          pokazOdleglosc=0;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <main+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
      if (Auto==1)
 800087e:	e7ed      	b.n	800085c <main+0x5c>
 8000880:	200000c8 	.word	0x200000c8
 8000884:	2000007c 	.word	0x2000007c
 8000888:	2000019d 	.word	0x2000019d
 800088c:	20000114 	.word	0x20000114
 8000890:	08006668 	.word	0x08006668
 8000894:	2000019c 	.word	0x2000019c
 8000898:	200001ac 	.word	0x200001ac

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09e      	sub	sp, #120	@ 0x78
 80008a0:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80008a6:	2228      	movs	r2, #40	@ 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fa42 	bl	8005d34 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	223c      	movs	r2, #60	@ 0x3c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 fa34 	bl	8005d34 <memset>

   /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	653b      	str	r3, [r7, #80]	@ 0x50
   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	663b      	str	r3, [r7, #96]	@ 0x60
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	667b      	str	r3, [r7, #100]	@ 0x64
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 ff6f 	bl	80017c4 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x54>
   {
      Error_Handler();
 80008ec:	f000 f9de 	bl	8000cac <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
   */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	643b      	str	r3, [r7, #64]	@ 0x40
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	647b      	str	r3, [r7, #68]	@ 0x44
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	64fb      	str	r3, [r7, #76]	@ 0x4c

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000904:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 ff68 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x7e>
   {
      Error_Handler();
 8000916:	f000 f9c9 	bl	8000cac <Error_Handler>
   }
   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800091a:	2301      	movs	r3, #1
 800091c:	603b      	str	r3, [r7, #0]
   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4618      	mov	r0, r3
 8000926:	f002 f96d 	bl	8002c04 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x98>
   {
      Error_Handler();
 8000930:	f000 f9bc 	bl	8000cac <Error_Handler>
   }
}
 8000934:	bf00      	nop
 8000936:	3778      	adds	r7, #120	@ 0x78
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN TIM2_Init 0 */
   /* USER CODE END TIM2_Init 0 */

   TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
   TIM_IC_InitTypeDef sConfigIC = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]

   /* USER CODE BEGIN TIM2_Init 1 */
   /* USER CODE END TIM2_Init 1 */
   htim2.Instance = TIM2;
 800095a:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 800095c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000960:	601a      	str	r2, [r3, #0]
   htim2.Init.Prescaler = 7;
 8000962:	4b24      	ldr	r3, [pc, #144]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 8000964:	2207      	movs	r2, #7
 8000966:	605a      	str	r2, [r3, #4]
   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
   htim2.Init.Period = 65535;
 800096e:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 8000970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000974:	60da      	str	r2, [r3, #12]
   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000982:	481c      	ldr	r0, [pc, #112]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 8000984:	f002 fd08 	bl	8003398 <HAL_TIM_IC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x56>
   {
      Error_Handler();
 800098e:	f000 f98d 	bl	8000cac <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4814      	ldr	r0, [pc, #80]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 80009a2:	f003 fe4f 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x74>
   {
      Error_Handler();
 80009ac:	f000 f97e 	bl	8000cac <Error_Handler>
   }
   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009b4:	2301      	movs	r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
   sConfigIC.ICFilter = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2204      	movs	r2, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 80009c8:	f002 fe3f 	bl	800364a <HAL_TIM_IC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x9a>
   {
      Error_Handler();
 80009d2:	f000 f96b 	bl	8000cac <Error_Handler>
   }
   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2208      	movs	r2, #8
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_TIM2_Init+0xb8>)
 80009de:	f002 fe34 	bl	800364a <HAL_TIM_IC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0xb0>
   {
      Error_Handler();
 80009e8:	f000 f960 	bl	8000cac <Error_Handler>
   }
   /* USER CODE BEGIN TIM2_Init 2 */
   /* USER CODE END TIM2_Init 2 */
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000007c 	.word	0x2000007c

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN TIM3_Init 0 */
   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = {0};
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]

   /* USER CODE BEGIN TIM3_Init 1 */
   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000a2a:	4b32      	ldr	r3, [pc, #200]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a2c:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <MX_TIM3_Init+0x100>)
 8000a2e:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 7;
 8000a30:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 99;
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a3e:	2263      	movs	r2, #99	@ 0x63
 8000a40:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b2c      	ldr	r3, [pc, #176]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a48:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4e:	4829      	ldr	r0, [pc, #164]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a50:	f002 fa86 	bl	8002f60 <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0x66>
   {
      Error_Handler();
 8000a5a:	f000 f927 	bl	8000cac <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4822      	ldr	r0, [pc, #136]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a6c:	f002 ff9e 	bl	80039ac <HAL_TIM_ConfigClockSource>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM3_Init+0x82>
   {
      Error_Handler();
 8000a76:	f000 f919 	bl	8000cac <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a7a:	481e      	ldr	r0, [pc, #120]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a7c:	f002 fb2a 	bl	80030d4 <HAL_TIM_PWM_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0x92>
   {
      Error_Handler();
 8000a86:	f000 f911 	bl	8000cac <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4816      	ldr	r0, [pc, #88]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000a9a:	f003 fdd3 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM3_Init+0xb0>
   {
      Error_Handler();
 8000aa4:	f000 f902 	bl	8000cac <Error_Handler>
   }
   sConfigOC.OCMode      = TIM_OCMODE_PWM1;
 8000aa8:	2360      	movs	r3, #96	@ 0x60
 8000aaa:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse       = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity  = TIM_OCPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode  = TIM_OCFAST_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000ac0:	f002 fe60 	bl	8003784 <HAL_TIM_PWM_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0xd6>
   {
      Error_Handler();
 8000aca:	f000 f8ef 	bl	8000cac <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000ad6:	f002 fe55 	bl	8003784 <HAL_TIM_PWM_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0xec>
   {
      Error_Handler();
 8000ae0:	f000 f8e4 	bl	8000cac <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */
   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <MX_TIM3_Init+0xfc>)
 8000ae6:	f000 f973 	bl	8000dd0 <HAL_TIM_MspPostInit>
}
 8000aea:	bf00      	nop
 8000aec:	3738      	adds	r7, #56	@ 0x38
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000c8 	.word	0x200000c8
 8000af8:	40000400 	.word	0x40000400

08000afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN USART1_Init 0 */
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b02:	4a15      	ldr	r2, [pc, #84]	@ (8000b58 <MX_USART1_UART_Init+0x5c>)
 8000b04:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 9600;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b0c:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_USART1_UART_Init+0x58>)
 8000b40:	f003 fe1e 	bl	8004780 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x52>
   {
      Error_Handler();
 8000b4a:	f000 f8af 	bl	8000cac <Error_Handler>
   }
   /* USER CODE BEGIN USART1_Init 2 */
   /* USER CODE END USART1_Init 2 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000114 	.word	0x20000114
 8000b58:	40013800 	.word	0x40013800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a3a      	ldr	r2, [pc, #232]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b38      	ldr	r3, [pc, #224]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b35      	ldr	r3, [pc, #212]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	4a34      	ldr	r2, [pc, #208]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	4b32      	ldr	r3, [pc, #200]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000bc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <MX_GPIO_Init+0x104>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f643 4103 	movw	r1, #15363	@ 0x3c03
 8000bd8:	4822      	ldr	r0, [pc, #136]	@ (8000c64 <MX_GPIO_Init+0x108>)
 8000bda:	f000 fddb 	bl	8001794 <HAL_GPIO_WritePin>
                           |TRIG1_Pin|TRIG2_Pin, GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOE, LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000be4:	4820      	ldr	r0, [pc, #128]	@ (8000c68 <MX_GPIO_Init+0x10c>)
 8000be6:	f000 fdd5 	bl	8001794 <HAL_GPIO_WritePin>
                           |LD6_Pin, GPIO_PIN_RESET);

   /*Configure GPIO pins : IR_RIGHTMOST_D0_Pin IR_LEFTMOST_D0_Pin */
   GPIO_InitStruct.Pin = IR_RIGHTMOST_D0_Pin|IR_LEFTMOST_D0_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481b      	ldr	r0, [pc, #108]	@ (8000c6c <MX_GPIO_Init+0x110>)
 8000bfe:	f000 fc37 	bl	8001470 <HAL_GPIO_Init>

   /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                            TRIG1_Pin TRIG2_Pin */
   GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8000c02:	f643 4303 	movw	r3, #15363	@ 0x3c03
 8000c06:	617b      	str	r3, [r7, #20]
                           |TRIG1_Pin|TRIG2_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <MX_GPIO_Init+0x108>)
 8000c1c:	f000 fc28 	bl	8001470 <HAL_GPIO_Init>

   /*Configure GPIO pins : LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                            LD6_Pin */
   GPIO_InitStruct.Pin = LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
 8000c20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c24:	617b      	str	r3, [r7, #20]
                           |LD6_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <MX_GPIO_Init+0x10c>)
 8000c3a:	f000 fc19 	bl	8001470 <HAL_GPIO_Init>

   /*Configure GPIO pins : IR_LEFT_D0_Pin IR_CENTER_D0_Pin IR_RIGHT_D0_Pin */
   GPIO_InitStruct.Pin = IR_LEFT_D0_Pin|IR_CENTER_D0_Pin|IR_RIGHT_D0_Pin;
 8000c3e:	23a8      	movs	r3, #168	@ 0xa8
 8000c40:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_GPIO_Init+0x108>)
 8000c52:	f000 fc0d 	bl	8001470 <HAL_GPIO_Init>
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000
 8000c64:	48000400 	.word	0x48000400
 8000c68:	48001000 	.word	0x48001000
 8000c6c:	48000800 	.word	0x48000800

08000c70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <HAL_UART_RxCpltCallback+0x30>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d109      	bne.n	8000c96 <HAL_UART_RxCpltCallback+0x26>
   {
      obslugaMenu(znak);
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_UART_RxCpltCallback+0x34>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fd1c 	bl	80006c4 <obslugaMenu>
      HAL_UART_Receive_IT(&huart1, (uint8_t*)&znak, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4905      	ldr	r1, [pc, #20]	@ (8000ca4 <HAL_UART_RxCpltCallback+0x34>)
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <HAL_UART_RxCpltCallback+0x38>)
 8000c92:	f003 fe4c 	bl	800492e <HAL_UART_Receive_IT>
   }
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	2000019d 	.word	0x2000019d
 8000ca8:	20000114 	.word	0x20000114

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d20:	d130      	bne.n	8000d84 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_TIM_IC_MspInit+0x8c>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a19      	ldr	r2, [pc, #100]	@ (8000d8c <HAL_TIM_IC_MspInit+0x8c>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_TIM_IC_MspInit+0x8c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_TIM_IC_MspInit+0x8c>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <HAL_TIM_IC_MspInit+0x8c>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <HAL_TIM_IC_MspInit+0x8c>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ECHO1_Pin|ECHO2_Pin;
 8000d52:	2306      	movs	r3, #6
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d62:	2301      	movs	r3, #1
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f000 fb7e 	bl	8001470 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	201c      	movs	r0, #28
 8000d7a:	f000 fac6 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d7e:	201c      	movs	r0, #28
 8000d80:	f000 fadf 	bl	8001342 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x38>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10b      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_TIM_Base_MspInit+0x3c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <HAL_TIM_Base_MspInit+0x3c>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <HAL_TIM_Base_MspInit+0x3c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40000400 	.word	0x40000400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a11      	ldr	r2, [pc, #68]	@ (8000e34 <HAL_TIM_MspPostInit+0x64>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d11c      	bne.n	8000e2c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8000e0a:	23c0      	movs	r3, #192	@ 0xc0
 8000e0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e28:	f000 fb22 	bl	8001470 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40000400 	.word	0x40000400
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <HAL_UART_MspInit+0x8c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12f      	bne.n	8000ebe <HAL_UART_MspInit+0x82>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_UART_MspInit+0x90>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a1a      	ldr	r2, [pc, #104]	@ (8000ecc <HAL_UART_MspInit+0x90>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_UART_MspInit+0x90>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_UART_MspInit+0x90>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <HAL_UART_MspInit+0x90>)
 8000e7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_UART_MspInit+0x90>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e8e:	2330      	movs	r3, #48	@ 0x30
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <HAL_UART_MspInit+0x94>)
 8000eaa:	f000 fae1 	bl	8001470 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2025      	movs	r0, #37	@ 0x25
 8000eb4:	f000 fa29 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eb8:	2025      	movs	r0, #37	@ 0x25
 8000eba:	f000 fa42 	bl	8001342 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000800 	.word	0x48000800

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f8cf 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <TIM2_IRQHandler+0x10>)
 8000f3a:	f002 fa84 	bl	8003446 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000007c 	.word	0x2000007c

08000f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <USART1_IRQHandler+0x10>)
 8000f4e:	f003 fd33 	bl	80049b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000114 	.word	0x20000114

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f004 feda 	bl	8005d44 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000a000 	.word	0x2000a000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	200001b0 	.word	0x200001b0
 8000fc4:	20000300 	.word	0x20000300

08000fc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001024 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f004 fe99 	bl	8005d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101e:	f7ff fbef 	bl	8000800 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001024:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001030:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 8001034:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001038:	20000300 	.word	0x20000300

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>
	...

08001040 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <HAL_Init+0x28>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <HAL_Init+0x28>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f94f 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	200f      	movs	r0, #15
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe2c 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40022000 	.word	0x40022000

0800106c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f967 	bl	800135e <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f92f 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000004 	.word	0x20000004
 80010c4:	2000000c 	.word	0x2000000c
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	200001b4 	.word	0x200001b4

080010f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	200001b4 	.word	0x200001b4

0800110c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000000c 	.word	0x2000000c

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff3e 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff31 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e02e      	b.n	80013e6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800138e:	2b02      	cmp	r3, #2
 8001390:	d008      	beq.n	80013a4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2204      	movs	r2, #4
 8001396:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e020      	b.n	80013e6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020e 	bic.w	r2, r2, #14
 80013b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001404:	2b02      	cmp	r3, #2
 8001406:	d005      	beq.n	8001414 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e027      	b.n	8001464 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 020e 	bic.w	r2, r2, #14
 8001422:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	4798      	blx	r3
    }
  }
  return status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e154      	b.n	800172a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8146 	beq.w	8001724 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d005      	beq.n	80014b0 <HAL_GPIO_Init+0x40>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d130      	bne.n	8001512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 0201 	and.w	r2, r3, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b03      	cmp	r3, #3
 800151c:	d017      	beq.n	800154e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a0 	beq.w	8001724 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a57      	ldr	r2, [pc, #348]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015fc:	4a53      	ldr	r2, [pc, #332]	@ (800174c <HAL_GPIO_Init+0x2dc>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001626:	d019      	beq.n	800165c <HAL_GPIO_Init+0x1ec>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <HAL_GPIO_Init+0x2e0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <HAL_GPIO_Init+0x1e8>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a48      	ldr	r2, [pc, #288]	@ (8001754 <HAL_GPIO_Init+0x2e4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00d      	beq.n	8001654 <HAL_GPIO_Init+0x1e4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a47      	ldr	r2, [pc, #284]	@ (8001758 <HAL_GPIO_Init+0x2e8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x1e0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a46      	ldr	r2, [pc, #280]	@ (800175c <HAL_GPIO_Init+0x2ec>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_GPIO_Init+0x1dc>
 8001648:	2304      	movs	r3, #4
 800164a:	e008      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 800164c:	2305      	movs	r3, #5
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001650:	2303      	movs	r3, #3
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 800165c:	2300      	movs	r3, #0
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800166e:	4937      	ldr	r1, [pc, #220]	@ (800174c <HAL_GPIO_Init+0x2dc>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167c:	4b38      	ldr	r3, [pc, #224]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016ca:	4a25      	ldr	r2, [pc, #148]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800171e:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f aea3 	bne.w	8001480 <HAL_GPIO_Init+0x10>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	40010000 	.word	0x40010000
 8001750:	48000400 	.word	0x48000400
 8001754:	48000800 	.word	0x48000800
 8001758:	48000c00 	.word	0x48000c00
 800175c:	48001000 	.word	0x48001000
 8001760:	40010400 	.word	0x40010400

08001764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e001      	b.n	8001786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f000 bff4 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 816d 	beq.w	8001ada <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001800:	4bb4      	ldr	r3, [pc, #720]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b04      	cmp	r3, #4
 800180a:	d00c      	beq.n	8001826 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800180c:	4bb1      	ldr	r3, [pc, #708]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d157      	bne.n	80018c8 <HAL_RCC_OscConfig+0x104>
 8001818:	4bae      	ldr	r3, [pc, #696]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001824:	d150      	bne.n	80018c8 <HAL_RCC_OscConfig+0x104>
 8001826:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800182a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800183a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b3f      	cmp	r3, #63	@ 0x3f
 8001846:	d802      	bhi.n	800184e <HAL_RCC_OscConfig+0x8a>
 8001848:	4ba2      	ldr	r3, [pc, #648]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	e015      	b.n	800187a <HAL_RCC_OscConfig+0xb6>
 800184e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001852:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001862:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001866:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800186a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001876:	4b97      	ldr	r3, [pc, #604]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800187e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001882:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001886:	fa92 f2a2 	rbit	r2, r2
 800188a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800188e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f042 0220 	orr.w	r2, r2, #32
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f002 021f 	and.w	r2, r2, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8114 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x314>
 80018b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 810b 	bne.w	8001ad8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f000 bf85 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d8:	d106      	bne.n	80018e8 <HAL_RCC_OscConfig+0x124>
 80018da:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e036      	b.n	8001956 <HAL_RCC_OscConfig+0x192>
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x14e>
 80018f8:	4b76      	ldr	r3, [pc, #472]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a75      	ldr	r2, [pc, #468]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b73      	ldr	r3, [pc, #460]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a72      	ldr	r2, [pc, #456]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e021      	b.n	8001956 <HAL_RCC_OscConfig+0x192>
 8001912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001916:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x17a>
 8001924:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 800192a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b68      	ldr	r3, [pc, #416]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a67      	ldr	r2, [pc, #412]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e00b      	b.n	8001956 <HAL_RCC_OscConfig+0x192>
 800193e:	4b65      	ldr	r3, [pc, #404]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a64      	ldr	r2, [pc, #400]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b62      	ldr	r3, [pc, #392]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a61      	ldr	r2, [pc, #388]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001954:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001956:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195a:	f023 020f 	bic.w	r2, r3, #15
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	495a      	ldr	r1, [pc, #360]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 800196c:	4313      	orrs	r3, r2
 800196e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001974:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d054      	beq.n	8001a2a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fbb8 	bl	80010f4 <HAL_GetTick>
 8001984:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198a:	f7ff fbb3 	bl	80010f4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d902      	bls.n	80019a0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	f000 bf19 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
 80019a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80019b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b3f      	cmp	r3, #63	@ 0x3f
 80019c0:	d802      	bhi.n	80019c8 <HAL_RCC_OscConfig+0x204>
 80019c2:	4b44      	ldr	r3, [pc, #272]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	e015      	b.n	80019f4 <HAL_RCC_OscConfig+0x230>
 80019c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019cc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80019dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80019e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80019f0:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019f8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80019fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a00:	fa92 f2a2 	rbit	r2, r2
 8001a04:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001a08:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001a0c:	fab2 f282 	clz	r2, r2
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f042 0220 	orr.w	r2, r2, #32
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f002 021f 	and.w	r2, r2, #31
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0b0      	beq.n	800198a <HAL_RCC_OscConfig+0x1c6>
 8001a28:	e057      	b.n	8001ada <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fb63 	bl	80010f4 <HAL_GetTick>
 8001a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb5e 	bl	80010f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	@ 0x64
 8001a42:	d902      	bls.n	8001a4a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f000 bec4 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
 8001a4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a4e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001a5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a6a:	d802      	bhi.n	8001a72 <HAL_RCC_OscConfig+0x2ae>
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x2da>
 8001a72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a76:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a8a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a8e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_RCC_OscConfig+0x310>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aa2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001aa6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001aaa:	fa92 f2a2 	rbit	r2, r2
 8001aae:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ab2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ab6:	fab2 f282 	clz	r2, r2
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f042 0220 	orr.w	r2, r2, #32
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f002 021f 	and.w	r2, r2, #31
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1b0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x270>
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_OscConfig+0x316>
 8001ad4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 816c 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001af0:	4bcc      	ldr	r3, [pc, #816]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001afc:	4bc9      	ldr	r3, [pc, #804]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d16d      	bne.n	8001be4 <HAL_RCC_OscConfig+0x420>
 8001b08:	4bc6      	ldr	r3, [pc, #792]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d167      	bne.n	8001be4 <HAL_RCC_OscConfig+0x420>
 8001b14:	2302      	movs	r3, #2
 8001b16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001b26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b32:	d802      	bhi.n	8001b3a <HAL_RCC_OscConfig+0x376>
 8001b34:	4bbb      	ldr	r3, [pc, #748]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e013      	b.n	8001b62 <HAL_RCC_OscConfig+0x39e>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b52:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b5e:	4bb1      	ldr	r3, [pc, #708]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	2202      	movs	r2, #2
 8001b64:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001b68:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001b6c:	fa92 f2a2 	rbit	r2, r2
 8001b70:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001b74:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b78:	fab2 f282 	clz	r2, r2
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f042 0220 	orr.w	r2, r2, #32
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f002 021f 	and.w	r2, r2, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <HAL_RCC_OscConfig+0x3e6>
 8001b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d002      	beq.n	8001baa <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f000 be14 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	4b9e      	ldr	r3, [pc, #632]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	21f8      	movs	r1, #248	@ 0xf8
 8001bc0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001bc8:	fa91 f1a1 	rbit	r1, r1
 8001bcc:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001bd0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001bd4:	fab1 f181 	clz	r1, r1
 8001bd8:	b2c9      	uxtb	r1, r1
 8001bda:	408b      	lsls	r3, r1
 8001bdc:	4991      	ldr	r1, [pc, #580]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e0f1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8083 	beq.w	8001cfc <HAL_RCC_OscConfig+0x538>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001c08:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c16:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2301      	movs	r3, #1
 8001c20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fa67 	bl	80010f4 <HAL_GetTick>
 8001c26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fa62 	bl	80010f4 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d902      	bls.n	8001c42 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f000 bdc8 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001c54:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c60:	d802      	bhi.n	8001c68 <HAL_RCC_OscConfig+0x4a4>
 8001c62:	4b70      	ldr	r3, [pc, #448]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e013      	b.n	8001c90 <HAL_RCC_OscConfig+0x4cc>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c80:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c8c:	4b65      	ldr	r3, [pc, #404]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	2202      	movs	r2, #2
 8001c92:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c96:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c9a:	fa92 f2a2 	rbit	r2, r2
 8001c9e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ca2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ca6:	fab2 f282 	clz	r2, r2
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f042 0220 	orr.w	r2, r2, #32
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f002 021f 	and.w	r2, r2, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0b4      	beq.n	8001c2c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b58      	ldr	r3, [pc, #352]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	21f8      	movs	r1, #248	@ 0xf8
 8001cd8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ce0:	fa91 f1a1 	rbit	r1, r1
 8001ce4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ce8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001cec:	fab1 f181 	clz	r1, r1
 8001cf0:	b2c9      	uxtb	r1, r1
 8001cf2:	408b      	lsls	r3, r1
 8001cf4:	494b      	ldr	r1, [pc, #300]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
 8001cfa:	e065      	b.n	8001dc8 <HAL_RCC_OscConfig+0x604>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	461a      	mov	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff f9e4 	bl	80010f4 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff f9df 	bl	80010f4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d902      	bls.n	8001d48 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	f000 bd45 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d66:	d802      	bhi.n	8001d6e <HAL_RCC_OscConfig+0x5aa>
 8001d68:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	e013      	b.n	8001d96 <HAL_RCC_OscConfig+0x5d2>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d80:	2302      	movs	r3, #2
 8001d82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d92:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <HAL_RCC_OscConfig+0x660>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	2202      	movs	r2, #2
 8001d98:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d9c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001da0:	fa92 f2a2 	rbit	r2, r2
 8001da4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001da8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f002 021f 	and.w	r2, r2, #31
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1b4      	bne.n	8001d32 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 8115 	beq.w	8002008 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d07e      	beq.n	8001eec <HAL_RCC_OscConfig+0x728>
 8001dee:	2301      	movs	r3, #1
 8001df0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_RCC_OscConfig+0x664>)
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	461a      	mov	r2, r3
 8001e14:	2301      	movs	r3, #1
 8001e16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff f96c 	bl	80010f4 <HAL_GetTick>
 8001e1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e20:	e00f      	b.n	8001e42 <HAL_RCC_OscConfig+0x67e>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f962 	bl	80010f4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d902      	bls.n	8001e42 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	f000 bcc8 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e80:	2202      	movs	r2, #2
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9c:	4bb0      	ldr	r3, [pc, #704]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	6019      	str	r1, [r3, #0]
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f1a3 	rbit	r1, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ec2:	6019      	str	r1, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2101      	movs	r1, #1
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0a0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x668>
 8001eea:	e08d      	b.n	8002008 <HAL_RCC_OscConfig+0x844>
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f0e:	601a      	str	r2, [r3, #0]
  return result;
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b90      	ldr	r3, [pc, #576]	@ (8002164 <HAL_RCC_OscConfig+0x9a0>)
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f8e1 	bl	80010f4 <HAL_GetTick>
 8001f32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff f8dc 	bl	80010f4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d902      	bls.n	8001f4e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	f000 bc42 	b.w	80027d2 <HAL_RCC_OscConfig+0x100e>
 8001f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f56:	2202      	movs	r2, #2
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f76:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fba:	4b69      	ldr	r3, [pc, #420]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8001fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	6019      	str	r1, [r3, #0]
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fa93 f1a3 	rbit	r1, r3
 8001fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fe0:	6019      	str	r1, [r3, #0]
  return result;
 8001fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d197      	bne.n	8001f38 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 819e 	beq.w	800235a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002024:	4b4e      	ldr	r3, [pc, #312]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d116      	bne.n	800205e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b4b      	ldr	r3, [pc, #300]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	4a4a      	ldr	r2, [pc, #296]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203a:	61d3      	str	r3, [r2, #28]
 800203c:	4b48      	ldr	r3, [pc, #288]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002048:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002052:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002056:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <HAL_RCC_OscConfig+0x9a4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11a      	bne.n	80020a0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b3f      	ldr	r3, [pc, #252]	@ (8002168 <HAL_RCC_OscConfig+0x9a4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3e      	ldr	r2, [pc, #248]	@ (8002168 <HAL_RCC_OscConfig+0x9a4>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7ff f83d 	bl	80010f4 <HAL_GetTick>
 800207a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	e009      	b.n	8002094 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7ff f838 	bl	80010f4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	@ 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e39e      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b34      	ldr	r3, [pc, #208]	@ (8002168 <HAL_RCC_OscConfig+0x9a4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ef      	beq.n	8002080 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x8fa>
 80020b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e035      	b.n	800212a <HAL_RCC_OscConfig+0x966>
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x924>
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a23      	ldr	r2, [pc, #140]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a20      	ldr	r2, [pc, #128]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	e020      	b.n	800212a <HAL_RCC_OscConfig+0x966>
 80020e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x94e>
 80020f8:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a18      	ldr	r2, [pc, #96]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a15      	ldr	r2, [pc, #84]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0x966>
 8002112:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a0f      	ldr	r2, [pc, #60]	@ (8002160 <HAL_RCC_OscConfig+0x99c>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe ffda 	bl	80010f4 <HAL_GetTick>
 8002140:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e012      	b.n	800216c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe ffd5 	bl	80010f4 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e339      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	10908120 	.word	0x10908120
 8002168:	40007000 	.word	0x40007000
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002198:	2202      	movs	r2, #2
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021b2:	601a      	str	r2, [r3, #0]
  return result;
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_OscConfig+0xa10>
 80021ce:	4b98      	ldr	r3, [pc, #608]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	e013      	b.n	80021fc <HAL_RCC_OscConfig+0xa38>
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021dc:	2202      	movs	r2, #2
 80021de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002200:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002204:	2102      	movs	r1, #2
 8002206:	6011      	str	r1, [r2, #0]
 8002208:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800220c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	fa92 f1a2 	rbit	r1, r2
 8002216:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800221a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800221e:	6011      	str	r1, [r2, #0]
  return result;
 8002220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002224:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	f43f af7f 	beq.w	8002146 <HAL_RCC_OscConfig+0x982>
 8002248:	e07d      	b.n	8002346 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7fe ff53 	bl	80010f4 <HAL_GetTick>
 800224e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe ff4e 	bl	80010f4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e2b2      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002274:	2202      	movs	r2, #2
 8002276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002298:	2202      	movs	r2, #2
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0xb10>
 80022ce:	4b58      	ldr	r3, [pc, #352]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0xb38>
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022dc:	2202      	movs	r2, #2
 80022de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002300:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002304:	2102      	movs	r1, #2
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800230c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	fa92 f1a2 	rbit	r1, r2
 8002316:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800231a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800231e:	6011      	str	r1, [r2, #0]
  return result;
 8002320:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002324:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f002 021f 	and.w	r2, r2, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d186      	bne.n	8002254 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002346:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b38      	ldr	r3, [pc, #224]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8232 	beq.w	80027d0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b30      	ldr	r3, [pc, #192]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	f000 8201 	beq.w	800277c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	2b02      	cmp	r3, #2
 8002388:	f040 8157 	bne.w	800263a <HAL_RCC_OscConfig+0xe76>
 800238c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002390:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002394:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023b0:	601a      	str	r2, [r3, #0]
  return result;
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023ba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2300      	movs	r3, #0
 80023d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe fe8f 	bl	80010f4 <HAL_GetTick>
 80023d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	e009      	b.n	80023f0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe fe8a 	bl	80010f4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1f0      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002414:	601a      	str	r2, [r3, #0]
  return result;
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800241e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b3f      	cmp	r3, #63	@ 0x3f
 8002428:	d804      	bhi.n	8002434 <HAL_RCC_OscConfig+0xc70>
 800242a:	4b01      	ldr	r3, [pc, #4]	@ (8002430 <HAL_RCC_OscConfig+0xc6c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	e029      	b.n	8002484 <HAL_RCC_OscConfig+0xcc0>
 8002430:	40021000 	.word	0x40021000
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800243c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002446:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002462:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	4bc3      	ldr	r3, [pc, #780]	@ (8002790 <HAL_RCC_OscConfig+0xfcc>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002488:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800248c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002496:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	fa92 f1a2 	rbit	r1, r2
 80024a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024a8:	6011      	str	r1, [r2, #0]
  return result;
 80024aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fab2 f282 	clz	r2, r2
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f042 0220 	orr.w	r2, r2, #32
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f002 021f 	and.w	r2, r2, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d185      	bne.n	80023dc <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4baf      	ldr	r3, [pc, #700]	@ (8002790 <HAL_RCC_OscConfig+0xfcc>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80024e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	49a7      	ldr	r1, [pc, #668]	@ (8002790 <HAL_RCC_OscConfig+0xfcc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002500:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800251c:	601a      	str	r2, [r3, #0]
  return result;
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002526:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002532:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	461a      	mov	r2, r3
 800253a:	2301      	movs	r3, #1
 800253c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe fdd9 	bl	80010f4 <HAL_GetTick>
 8002542:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002546:	e009      	b.n	800255c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fdd4 	bl	80010f4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e13a      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002564:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002580:	601a      	str	r2, [r3, #0]
  return result;
 8002582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002586:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800258a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b3f      	cmp	r3, #63	@ 0x3f
 8002594:	d802      	bhi.n	800259c <HAL_RCC_OscConfig+0xdd8>
 8002596:	4b7e      	ldr	r3, [pc, #504]	@ (8002790 <HAL_RCC_OscConfig+0xfcc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e027      	b.n	80025ec <HAL_RCC_OscConfig+0xe28>
 800259c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80025ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	4b69      	ldr	r3, [pc, #420]	@ (8002790 <HAL_RCC_OscConfig+0xfcc>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025f0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025f8:	6011      	str	r1, [r2, #0]
 80025fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025fe:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	fa92 f1a2 	rbit	r1, r2
 8002608:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800260c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002610:	6011      	str	r1, [r2, #0]
  return result;
 8002612:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002616:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0220 	orr.w	r2, r2, #32
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d087      	beq.n	8002548 <HAL_RCC_OscConfig+0xd84>
 8002638:	e0ca      	b.n	80027d0 <HAL_RCC_OscConfig+0x100c>
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002642:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800265e:	601a      	str	r2, [r3, #0]
  return result;
 8002660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002664:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002668:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002674:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	461a      	mov	r2, r3
 800267c:	2300      	movs	r3, #0
 800267e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fd38 	bl	80010f4 <HAL_GetTick>
 8002684:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e009      	b.n	800269e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fd33 	bl	80010f4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e099      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80026c2:	601a      	str	r2, [r3, #0]
  return result;
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80026cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026d6:	d802      	bhi.n	80026de <HAL_RCC_OscConfig+0xf1a>
 80026d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002790 <HAL_RCC_OscConfig+0xfcc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	e027      	b.n	800272e <HAL_RCC_OscConfig+0xf6a>
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fa93 f2a3 	rbit	r2, r3
 80026fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fe:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002708:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800270c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002724:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_RCC_OscConfig+0xfcc>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002732:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002736:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800273a:	6011      	str	r1, [r2, #0]
 800273c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002740:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fa92 f1a2 	rbit	r1, r2
 800274a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800274e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002752:	6011      	str	r1, [r2, #0]
  return result;
 8002754:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002758:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0220 	orr.w	r2, r2, #32
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d187      	bne.n	800268a <HAL_RCC_OscConfig+0xec6>
 800277a:	e029      	b.n	80027d0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002780:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d103      	bne.n	8002794 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e020      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
 8002790:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_RCC_OscConfig+0x1018>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800279c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80027a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80027b8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b09e      	sub	sp, #120	@ 0x78
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e154      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b89      	ldr	r3, [pc, #548]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b86      	ldr	r3, [pc, #536]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4984      	ldr	r1, [pc, #528]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b82      	ldr	r3, [pc, #520]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e13c      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b7b      	ldr	r3, [pc, #492]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4978      	ldr	r1, [pc, #480]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80cd 	beq.w	80029ee <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d137      	bne.n	80028cc <HAL_RCC_ClockConfig+0xec>
 800285c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002860:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800286a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b3f      	cmp	r3, #63	@ 0x3f
 8002874:	d802      	bhi.n	800287c <HAL_RCC_ClockConfig+0x9c>
 8002876:	4b6b      	ldr	r3, [pc, #428]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	e00f      	b.n	800289c <HAL_RCC_ClockConfig+0xbc>
 800287c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002880:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	667b      	str	r3, [r7, #100]	@ 0x64
 800288a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800288e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002898:	4b62      	ldr	r3, [pc, #392]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80028a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028a4:	fa92 f2a2 	rbit	r2, r2
 80028a8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80028aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80028ac:	fab2 f282 	clz	r2, r2
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f042 0220 	orr.w	r2, r2, #32
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	f002 021f 	and.w	r2, r2, #31
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f202 	lsl.w	r2, r1, r2
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d171      	bne.n	80029ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0ea      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d137      	bne.n	8002944 <HAL_RCC_ClockConfig+0x164>
 80028d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ec:	d802      	bhi.n	80028f4 <HAL_RCC_ClockConfig+0x114>
 80028ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e00f      	b.n	8002914 <HAL_RCC_ClockConfig+0x134>
 80028f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	647b      	str	r3, [r7, #68]	@ 0x44
 8002902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002906:	643b      	str	r3, [r7, #64]	@ 0x40
 8002908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002910:	4b44      	ldr	r3, [pc, #272]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002918:	63ba      	str	r2, [r7, #56]	@ 0x38
 800291a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800291c:	fa92 f2a2 	rbit	r2, r2
 8002920:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f002 021f 	and.w	r2, r2, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f202 	lsl.w	r2, r1, r2
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d135      	bne.n	80029ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0ae      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2c2>
 8002944:	2302      	movs	r3, #2
 8002946:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b3f      	cmp	r3, #63	@ 0x3f
 800295a:	d802      	bhi.n	8002962 <HAL_RCC_ClockConfig+0x182>
 800295c:	4b31      	ldr	r3, [pc, #196]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	e00d      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
 8002962:	2302      	movs	r3, #2
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
 800296e:	2302      	movs	r3, #2
 8002970:	623b      	str	r3, [r7, #32]
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	2202      	movs	r2, #2
 8002980:	61ba      	str	r2, [r7, #24]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	fa92 f2a2 	rbit	r2, r2
 8002988:	617a      	str	r2, [r7, #20]
  return result;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e07a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 0203 	bic.w	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	491a      	ldr	r1, [pc, #104]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029be:	f7fe fb99 	bl	80010f4 <HAL_GetTick>
 80029c2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c6:	f7fe fb95 	bl	80010f4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e062      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029dc:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <HAL_RCC_ClockConfig+0x244>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 020c 	and.w	r2, r3, #12
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d1eb      	bne.n	80029c6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d215      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fc:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 0207 	bic.w	r2, r3, #7
 8002a04:	4906      	ldr	r1, [pc, #24]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <HAL_RCC_ClockConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d006      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e041      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2c2>
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_RCC_ClockConfig+0x2cc>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	491a      	ldr	r1, [pc, #104]	@ (8002aac <HAL_RCC_ClockConfig+0x2cc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b16      	ldr	r3, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x2cc>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4912      	ldr	r1, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x2cc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a66:	f000 f829 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <HAL_RCC_ClockConfig+0x2cc>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a74:	22f0      	movs	r2, #240	@ 0xf0
 8002a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	40d3      	lsrs	r3, r2
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x2d0>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a92:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <HAL_RCC_ClockConfig+0x2d4>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <HAL_RCC_ClockConfig+0x2d8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fae6 	bl	800106c <HAL_InitTick>
  
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3778      	adds	r7, #120	@ 0x78
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08006678 	.word	0x08006678
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	20000008 	.word	0x20000008

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x30>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aea:	e026      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aee:	613b      	str	r3, [r7, #16]
      break;
 8002af0:	e026      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0c9b      	lsrs	r3, r3, #18
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	4a14      	ldr	r2, [pc, #80]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b18:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e004      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
      break;
 8002b38:	e002      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3c:	613b      	str	r3, [r7, #16]
      break;
 8002b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b40:	693b      	ldr	r3, [r7, #16]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	08006690 	.word	0x08006690
 8002b5c:	080066a0 	.word	0x080066a0
 8002b60:	003d0900 	.word	0x003d0900

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b03      	ldr	r3, [pc, #12]	@ (8002b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b82:	f7ff ffef 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b86:	4601      	mov	r1, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b90:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	603a      	str	r2, [r7, #0]
  return result;
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	40d3      	lsrs	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08006688 	.word	0x08006688

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bc6:	f7ff ffcd 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002bca:	4601      	mov	r1, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002bd4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002bd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	fa92 f2a2 	rbit	r2, r2
 8002be0:	603a      	str	r2, [r7, #0]
  return result;
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	40d3      	lsrs	r3, r2
 8002bec:	4a04      	ldr	r2, [pc, #16]	@ (8002c00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08006688 	.word	0x08006688

08002c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b092      	sub	sp, #72	@ 0x48
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80d2 	beq.w	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c28:	4b4d      	ldr	r3, [pc, #308]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10e      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	4b4a      	ldr	r3, [pc, #296]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	4a49      	ldr	r2, [pc, #292]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	61d3      	str	r3, [r2, #28]
 8002c40:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b44      	ldr	r3, [pc, #272]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a40      	ldr	r2, [pc, #256]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fa43 	bl	80010f4 <HAL_GetTick>
 8002c6e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe fa3f 	bl	80010f4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	@ 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e167      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c90:	4b33      	ldr	r3, [pc, #204]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8082 	beq.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002caa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d07a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2301      	movs	r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d02:	4a17      	ldr	r2, [pc, #92]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d049      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe f9ef 	bl	80010f4 <HAL_GetTick>
 8002d16:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe f9eb 	bl	80010f4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e111      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d30:	2302      	movs	r3, #2
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	61fb      	str	r3, [r7, #28]
  return result;
 8002d48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d5a:	4b01      	ldr	r3, [pc, #4]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	e00d      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
 8002d68:	10908100 	.word	0x10908100
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	4b78      	ldr	r3, [pc, #480]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	613a      	str	r2, [r7, #16]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	fa92 f2a2 	rbit	r2, r2
 8002d86:	60fa      	str	r2, [r7, #12]
  return result;
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	fab2 f282 	clz	r2, r2
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f002 021f 	and.w	r2, r2, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0b9      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002da6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	496a      	ldr	r1, [pc, #424]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd8:	4b60      	ldr	r3, [pc, #384]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	f023 0203 	bic.w	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	495d      	ldr	r1, [pc, #372]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df6:	4b59      	ldr	r3, [pc, #356]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4956      	ldr	r1, [pc, #344]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e14:	4b51      	ldr	r3, [pc, #324]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	494e      	ldr	r1, [pc, #312]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e32:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f023 0210 	bic.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4947      	ldr	r1, [pc, #284]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e50:	4b42      	ldr	r3, [pc, #264]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	493f      	ldr	r1, [pc, #252]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f023 0220 	bic.w	r2, r3, #32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4938      	ldr	r1, [pc, #224]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8c:	4b33      	ldr	r3, [pc, #204]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	4930      	ldr	r1, [pc, #192]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4929      	ldr	r1, [pc, #164]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ec8:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	4921      	ldr	r1, [pc, #132]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	491a      	ldr	r1, [pc, #104]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f04:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	4912      	ldr	r1, [pc, #72]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f22:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	490b      	ldr	r1, [pc, #44]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4c:	4903      	ldr	r1, [pc, #12]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3748      	adds	r7, #72	@ 0x48
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e049      	b.n	8003006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd ff02 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 fe00 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e042      	b.n	80030ae <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a21      	ldr	r2, [pc, #132]	@ (80030bc <HAL_TIM_Base_Start+0xac>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d018      	beq.n	800306c <HAL_TIM_Base_Start+0x5c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003042:	d013      	beq.n	800306c <HAL_TIM_Base_Start+0x5c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1d      	ldr	r2, [pc, #116]	@ (80030c0 <HAL_TIM_Base_Start+0xb0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00e      	beq.n	800306c <HAL_TIM_Base_Start+0x5c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_TIM_Base_Start+0xb4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_TIM_Base_Start+0x5c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1a      	ldr	r2, [pc, #104]	@ (80030c8 <HAL_TIM_Base_Start+0xb8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_TIM_Base_Start+0x5c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <HAL_TIM_Base_Start+0xbc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d115      	bne.n	8003098 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <HAL_TIM_Base_Start+0xc0>)
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b06      	cmp	r3, #6
 800307c:	d015      	beq.n	80030aa <HAL_TIM_Base_Start+0x9a>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003084:	d011      	beq.n	80030aa <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003096:	e008      	b.n	80030aa <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e000      	b.n	80030ac <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40013400 	.word	0x40013400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	00010007 	.word	0x00010007

080030d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e049      	b.n	800317a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f841 	bl	8003182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 fd46 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_TIM_PWM_Start+0x24>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e03c      	b.n	8003236 <HAL_TIM_PWM_Start+0x9e>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d109      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x3e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	e02f      	b.n	8003236 <HAL_TIM_PWM_Start+0x9e>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d109      	bne.n	80031f0 <HAL_TIM_PWM_Start+0x58>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e022      	b.n	8003236 <HAL_TIM_PWM_Start+0x9e>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d109      	bne.n	800320a <HAL_TIM_PWM_Start+0x72>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	e015      	b.n	8003236 <HAL_TIM_PWM_Start+0x9e>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b10      	cmp	r3, #16
 800320e:	d109      	bne.n	8003224 <HAL_TIM_PWM_Start+0x8c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e008      	b.n	8003236 <HAL_TIM_PWM_Start+0x9e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e097      	b.n	800336e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <HAL_TIM_PWM_Start+0xb6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800324c:	e023      	b.n	8003296 <HAL_TIM_PWM_Start+0xfe>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d104      	bne.n	800325e <HAL_TIM_PWM_Start+0xc6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800325c:	e01b      	b.n	8003296 <HAL_TIM_PWM_Start+0xfe>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d104      	bne.n	800326e <HAL_TIM_PWM_Start+0xd6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326c:	e013      	b.n	8003296 <HAL_TIM_PWM_Start+0xfe>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0xe6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800327c:	e00b      	b.n	8003296 <HAL_TIM_PWM_Start+0xfe>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b10      	cmp	r3, #16
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0xf6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800328c:	e003      	b.n	8003296 <HAL_TIM_PWM_Start+0xfe>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 f9aa 	bl	80045f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a33      	ldr	r2, [pc, #204]	@ (8003378 <HAL_TIM_PWM_Start+0x1e0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_TIM_PWM_Start+0x13e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a32      	ldr	r2, [pc, #200]	@ (800337c <HAL_TIM_PWM_Start+0x1e4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_TIM_PWM_Start+0x13e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a30      	ldr	r2, [pc, #192]	@ (8003380 <HAL_TIM_PWM_Start+0x1e8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d009      	beq.n	80032d6 <HAL_TIM_PWM_Start+0x13e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003384 <HAL_TIM_PWM_Start+0x1ec>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_TIM_PWM_Start+0x13e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003388 <HAL_TIM_PWM_Start+0x1f0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_TIM_PWM_Start+0x142>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_TIM_PWM_Start+0x144>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a20      	ldr	r2, [pc, #128]	@ (8003378 <HAL_TIM_PWM_Start+0x1e0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_TIM_PWM_Start+0x194>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003302:	d013      	beq.n	800332c <HAL_TIM_PWM_Start+0x194>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a20      	ldr	r2, [pc, #128]	@ (800338c <HAL_TIM_PWM_Start+0x1f4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_TIM_PWM_Start+0x194>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_TIM_PWM_Start+0x1f8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_TIM_PWM_Start+0x194>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_TIM_PWM_Start+0x1e4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_TIM_PWM_Start+0x194>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a16      	ldr	r2, [pc, #88]	@ (8003380 <HAL_TIM_PWM_Start+0x1e8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d115      	bne.n	8003358 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	4b18      	ldr	r3, [pc, #96]	@ (8003394 <HAL_TIM_PWM_Start+0x1fc>)
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d015      	beq.n	800336a <HAL_TIM_PWM_Start+0x1d2>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003344:	d011      	beq.n	800336a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	e008      	b.n	800336a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e000      	b.n	800336c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40013400 	.word	0x40013400
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	00010007 	.word	0x00010007

08003398 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e049      	b.n	800343e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fc9e 	bl	8000d00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 fbe4 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01b      	beq.n	80034aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f06f 0202 	mvn.w	r2, #2
 800347a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb68 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 8003496:	e005      	b.n	80034a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fb5a 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fb6b 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01b      	beq.n	80034f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0204 	mvn.w	r2, #4
 80034c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb42 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 80034e2:	e005      	b.n	80034f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb34 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fb45 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01b      	beq.n	8003542 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f06f 0208 	mvn.w	r2, #8
 8003512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2204      	movs	r2, #4
 8003518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fb1c 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 800352e:	e005      	b.n	800353c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fb0e 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fb1f 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01b      	beq.n	800358e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0210 	mvn.w	r2, #16
 800355e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2208      	movs	r2, #8
 8003564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 faf6 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 800357a:	e005      	b.n	8003588 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fae8 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 faf9 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00c      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0201 	mvn.w	r2, #1
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fac6 	bl	8003b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f001 f8c1 	bl	8004758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00c      	beq.n	80035fa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f001 f8b9 	bl	800476c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fab8 	bl	8003b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00c      	beq.n	8003642 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0220 	mvn.w	r2, #32
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f001 f881 	bl	8004744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003664:	2302      	movs	r3, #2
 8003666:	e088      	b.n	800377a <HAL_TIM_IC_ConfigChannel+0x130>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11b      	bne.n	80036ae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003686:	f000 fdff 	bl	8004288 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 020c 	bic.w	r2, r2, #12
 8003698:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6999      	ldr	r1, [r3, #24]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	619a      	str	r2, [r3, #24]
 80036ac:	e060      	b.n	8003770 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d11c      	bne.n	80036ee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80036c4:	f000 fe77 	bl	80043b6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80036d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
 80036ec:	e040      	b.n	8003770 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003704:	f000 fec4 	bl	8004490 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 020c 	bic.w	r2, r2, #12
 8003716:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69d9      	ldr	r1, [r3, #28]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	e021      	b.n	8003770 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d11c      	bne.n	800376c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003742:	f000 fee1 	bl	8004508 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003754:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69d9      	ldr	r1, [r3, #28]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	61da      	str	r2, [r3, #28]
 800376a:	e001      	b.n	8003770 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800379e:	2302      	movs	r3, #2
 80037a0:	e0ff      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b14      	cmp	r3, #20
 80037ae:	f200 80f0 	bhi.w	8003992 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037b2:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	08003993 	.word	0x08003993
 80037c0:	08003993 	.word	0x08003993
 80037c4:	08003993 	.word	0x08003993
 80037c8:	0800384d 	.word	0x0800384d
 80037cc:	08003993 	.word	0x08003993
 80037d0:	08003993 	.word	0x08003993
 80037d4:	08003993 	.word	0x08003993
 80037d8:	0800388f 	.word	0x0800388f
 80037dc:	08003993 	.word	0x08003993
 80037e0:	08003993 	.word	0x08003993
 80037e4:	08003993 	.word	0x08003993
 80037e8:	080038cf 	.word	0x080038cf
 80037ec:	08003993 	.word	0x08003993
 80037f0:	08003993 	.word	0x08003993
 80037f4:	08003993 	.word	0x08003993
 80037f8:	08003911 	.word	0x08003911
 80037fc:	08003993 	.word	0x08003993
 8003800:	08003993 	.word	0x08003993
 8003804:	08003993 	.word	0x08003993
 8003808:	08003951 	.word	0x08003951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fa62 	bl	8003cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0208 	orr.w	r2, r2, #8
 8003826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0204 	bic.w	r2, r2, #4
 8003836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6999      	ldr	r1, [r3, #24]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	619a      	str	r2, [r3, #24]
      break;
 800384a:	e0a5      	b.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fad2 	bl	8003dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6999      	ldr	r1, [r3, #24]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	021a      	lsls	r2, r3, #8
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	619a      	str	r2, [r3, #24]
      break;
 800388c:	e084      	b.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fb3b 	bl	8003f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0208 	orr.w	r2, r2, #8
 80038a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0204 	bic.w	r2, r2, #4
 80038b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69d9      	ldr	r1, [r3, #28]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	61da      	str	r2, [r3, #28]
      break;
 80038cc:	e064      	b.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fba3 	bl	8004020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69d9      	ldr	r1, [r3, #28]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	021a      	lsls	r2, r3, #8
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	61da      	str	r2, [r3, #28]
      break;
 800390e:	e043      	b.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fbec 	bl	80040f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0208 	orr.w	r2, r2, #8
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800394e:	e023      	b.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fc30 	bl	80041bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003990:	e002      	b.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
      break;
 8003996:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop

080039ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_ConfigClockSource+0x1c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0b6      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x18a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a04:	d03e      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0xd8>
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0a:	f200 8087 	bhi.w	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_TIM_ConfigClockSource+0x176>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	d87f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a1c:	2b70      	cmp	r3, #112	@ 0x70
 8003a1e:	d01a      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0xaa>
 8003a20:	2b70      	cmp	r3, #112	@ 0x70
 8003a22:	d87b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a24:	2b60      	cmp	r3, #96	@ 0x60
 8003a26:	d050      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x11e>
 8003a28:	2b60      	cmp	r3, #96	@ 0x60
 8003a2a:	d877      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a2c:	2b50      	cmp	r3, #80	@ 0x50
 8003a2e:	d03c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xfe>
 8003a30:	2b50      	cmp	r3, #80	@ 0x50
 8003a32:	d873      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d058      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x13e>
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d86f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a3c:	2b30      	cmp	r3, #48	@ 0x30
 8003a3e:	d064      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15e>
 8003a40:	2b30      	cmp	r3, #48	@ 0x30
 8003a42:	d86b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d060      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15e>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d867      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05c      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15e>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d05a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15e>
 8003a54:	e062      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a66:	f000 fda7 	bl	80045b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]
      break;
 8003a82:	e04f      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a94:	f000 fd90 	bl	80045b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aa6:	609a      	str	r2, [r3, #8]
      break;
 8003aa8:	e03c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f000 fc4e 	bl	8004358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2150      	movs	r1, #80	@ 0x50
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fd5d 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e02c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 fcaa 	bl	8004430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2160      	movs	r1, #96	@ 0x60
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fd4d 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 fc2e 	bl	8004358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	@ 0x40
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fd3d 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e00c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f000 fd34 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a42      	ldr	r2, [pc, #264]	@ (8003cc0 <TIM_Base_SetConfig+0x11c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00f      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc2:	d00b      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc4 <TIM_Base_SetConfig+0x120>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc8 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8003ccc <TIM_Base_SetConfig+0x128>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a33      	ldr	r2, [pc, #204]	@ (8003cc0 <TIM_Base_SetConfig+0x11c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01b      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfc:	d017      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a30      	ldr	r2, [pc, #192]	@ (8003cc4 <TIM_Base_SetConfig+0x120>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc8 <TIM_Base_SetConfig+0x124>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2e      	ldr	r2, [pc, #184]	@ (8003ccc <TIM_Base_SetConfig+0x128>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd0 <TIM_Base_SetConfig+0x12c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd4 <TIM_Base_SetConfig+0x130>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd8 <TIM_Base_SetConfig+0x134>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a16      	ldr	r2, [pc, #88]	@ (8003cc0 <TIM_Base_SetConfig+0x11c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00f      	beq.n	8003c8c <TIM_Base_SetConfig+0xe8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <TIM_Base_SetConfig+0x128>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <TIM_Base_SetConfig+0xe8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <TIM_Base_SetConfig+0x12c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_Base_SetConfig+0xe8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a15      	ldr	r2, [pc, #84]	@ (8003cd4 <TIM_Base_SetConfig+0x130>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0xe8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a14      	ldr	r2, [pc, #80]	@ (8003cd8 <TIM_Base_SetConfig+0x134>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f023 0201 	bic.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	611a      	str	r2, [r3, #16]
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800

08003cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 0201 	bic.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f023 0302 	bic.w	r3, r3, #2
 8003d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <TIM_OC1_SetConfig+0x10c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00f      	beq.n	8003d5c <TIM_OC1_SetConfig+0x80>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dec <TIM_OC1_SetConfig+0x110>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_OC1_SetConfig+0x80>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a2a      	ldr	r2, [pc, #168]	@ (8003df0 <TIM_OC1_SetConfig+0x114>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_OC1_SetConfig+0x80>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a29      	ldr	r2, [pc, #164]	@ (8003df4 <TIM_OC1_SetConfig+0x118>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_OC1_SetConfig+0x80>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a28      	ldr	r2, [pc, #160]	@ (8003df8 <TIM_OC1_SetConfig+0x11c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10c      	bne.n	8003d76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0308 	bic.w	r3, r3, #8
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <TIM_OC1_SetConfig+0x10c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00f      	beq.n	8003d9e <TIM_OC1_SetConfig+0xc2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1a      	ldr	r2, [pc, #104]	@ (8003dec <TIM_OC1_SetConfig+0x110>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_OC1_SetConfig+0xc2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a19      	ldr	r2, [pc, #100]	@ (8003df0 <TIM_OC1_SetConfig+0x114>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <TIM_OC1_SetConfig+0xc2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <TIM_OC1_SetConfig+0x118>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_OC1_SetConfig+0xc2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a17      	ldr	r2, [pc, #92]	@ (8003df8 <TIM_OC1_SetConfig+0x11c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d111      	bne.n	8003dc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40013400 	.word	0x40013400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800

08003dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 0210 	bic.w	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0320 	bic.w	r3, r3, #32
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a28      	ldr	r2, [pc, #160]	@ (8003efc <TIM_OC2_SetConfig+0x100>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC2_SetConfig+0x6c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a27      	ldr	r2, [pc, #156]	@ (8003f00 <TIM_OC2_SetConfig+0x104>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10d      	bne.n	8003e84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a1d      	ldr	r2, [pc, #116]	@ (8003efc <TIM_OC2_SetConfig+0x100>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00f      	beq.n	8003eac <TIM_OC2_SetConfig+0xb0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f00 <TIM_OC2_SetConfig+0x104>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_OC2_SetConfig+0xb0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <TIM_OC2_SetConfig+0x108>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_OC2_SetConfig+0xb0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f08 <TIM_OC2_SetConfig+0x10c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0xb0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a19      	ldr	r2, [pc, #100]	@ (8003f0c <TIM_OC2_SetConfig+0x110>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d113      	bne.n	8003ed4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40013400 	.word	0x40013400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800

08003f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a27      	ldr	r2, [pc, #156]	@ (800400c <TIM_OC3_SetConfig+0xfc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_OC3_SetConfig+0x6a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a26      	ldr	r2, [pc, #152]	@ (8004010 <TIM_OC3_SetConfig+0x100>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10d      	bne.n	8003f96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <TIM_OC3_SetConfig+0xfc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00f      	beq.n	8003fbe <TIM_OC3_SetConfig+0xae>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004010 <TIM_OC3_SetConfig+0x100>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <TIM_OC3_SetConfig+0xae>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8004014 <TIM_OC3_SetConfig+0x104>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <TIM_OC3_SetConfig+0xae>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	@ (8004018 <TIM_OC3_SetConfig+0x108>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_OC3_SetConfig+0xae>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	@ (800401c <TIM_OC3_SetConfig+0x10c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d113      	bne.n	8003fe6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40013400 	.word	0x40013400
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800406e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a18      	ldr	r2, [pc, #96]	@ (80040e0 <TIM_OC4_SetConfig+0xc0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_OC4_SetConfig+0x84>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <TIM_OC4_SetConfig+0xc4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC4_SetConfig+0x84>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a16      	ldr	r2, [pc, #88]	@ (80040e8 <TIM_OC4_SetConfig+0xc8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC4_SetConfig+0x84>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a15      	ldr	r2, [pc, #84]	@ (80040ec <TIM_OC4_SetConfig+0xcc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC4_SetConfig+0x84>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <TIM_OC4_SetConfig+0xd0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d109      	bne.n	80040b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40013400 	.word	0x40013400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800

080040f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <TIM_OC5_SetConfig+0xb4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00f      	beq.n	800416e <TIM_OC5_SetConfig+0x7a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a16      	ldr	r2, [pc, #88]	@ (80041ac <TIM_OC5_SetConfig+0xb8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_OC5_SetConfig+0x7a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <TIM_OC5_SetConfig+0xbc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_OC5_SetConfig+0x7a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <TIM_OC5_SetConfig+0xc0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_OC5_SetConfig+0x7a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a13      	ldr	r2, [pc, #76]	@ (80041b8 <TIM_OC5_SetConfig+0xc4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d109      	bne.n	8004182 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004174:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800

080041bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	051b      	lsls	r3, r3, #20
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <TIM_OC6_SetConfig+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00f      	beq.n	8004238 <TIM_OC6_SetConfig+0x7c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <TIM_OC6_SetConfig+0xbc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00b      	beq.n	8004238 <TIM_OC6_SetConfig+0x7c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <TIM_OC6_SetConfig+0xc0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_OC6_SetConfig+0x7c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <TIM_OC6_SetConfig+0xc4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_OC6_SetConfig+0x7c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <TIM_OC6_SetConfig+0xc8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d109      	bne.n	800424c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800423e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	029b      	lsls	r3, r3, #10
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800

08004288 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f023 0201 	bic.w	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a24      	ldr	r2, [pc, #144]	@ (8004344 <TIM_TI1_SetConfig+0xbc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <TIM_TI1_SetConfig+0x56>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042bc:	d00f      	beq.n	80042de <TIM_TI1_SetConfig+0x56>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a21      	ldr	r2, [pc, #132]	@ (8004348 <TIM_TI1_SetConfig+0xc0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00b      	beq.n	80042de <TIM_TI1_SetConfig+0x56>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a20      	ldr	r2, [pc, #128]	@ (800434c <TIM_TI1_SetConfig+0xc4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <TIM_TI1_SetConfig+0x56>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004350 <TIM_TI1_SetConfig+0xc8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_TI1_SetConfig+0x56>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <TIM_TI1_SetConfig+0xcc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d101      	bne.n	80042e2 <TIM_TI1_SetConfig+0x5a>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <TIM_TI1_SetConfig+0x5c>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e003      	b.n	8004302 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	b2db      	uxtb	r3, r3
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f023 030a 	bic.w	r3, r3, #10
 800431c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f003 030a 	and.w	r3, r3, #10
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40013400 	.word	0x40013400
 8004354:	40014000 	.word	0x40014000

08004358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 030a 	bic.w	r3, r3, #10
 8004394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0210 	bic.w	r2, r3, #16
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	031b      	lsls	r3, r3, #12
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004408:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	621a      	str	r2, [r3, #32]
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0210 	bic.w	r2, r3, #16
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800445a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800446c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f023 0303 	bic.w	r3, r3, #3
 80044bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	621a      	str	r2, [r3, #32]
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004534:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004546:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	b29b      	uxth	r3, r3
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800455a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004582:	b480      	push	{r7}
 8004584:	b085      	sub	sp, #20
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	f043 0307 	orr.w	r3, r3, #7
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	431a      	orrs	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	609a      	str	r2, [r3, #8]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2201      	movs	r2, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	43db      	mvns	r3, r3
 800461a:	401a      	ands	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e063      	b.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2b      	ldr	r2, [pc, #172]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2a      	ldr	r2, [pc, #168]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004696:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ce:	d013      	beq.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a18      	ldr	r2, [pc, #96]	@ (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a17      	ldr	r2, [pc, #92]	@ (800473c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a12      	ldr	r2, [pc, #72]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10c      	bne.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	4313      	orrs	r3, r2
 8004708:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40013400 	.word	0x40013400
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40014000 	.word	0x40014000

08004744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e040      	b.n	8004814 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fc fb4a 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	@ 0x24
 80047ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fdd0 	bl	800536c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fbf9 	bl	8004fc4 <UART_SetConfig>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e01b      	b.n	8004814 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fe4f 	bl	80054b0 <UART_CheckIdleState>
 8004812:	4603      	mov	r3, r0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004830:	2b20      	cmp	r3, #32
 8004832:	d177      	bne.n	8004924 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_UART_Transmit+0x24>
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e070      	b.n	8004926 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2221      	movs	r2, #33	@ 0x21
 8004850:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004852:	f7fc fc4f 	bl	80010f4 <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	88fa      	ldrh	r2, [r7, #6]
 800485c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004870:	d108      	bne.n	8004884 <HAL_UART_Transmit+0x68>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d104      	bne.n	8004884 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	e003      	b.n	800488c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004888:	2300      	movs	r3, #0
 800488a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800488c:	e02f      	b.n	80048ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	2180      	movs	r1, #128	@ 0x80
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 feb1 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e03b      	b.n	8004926 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	b292      	uxth	r2, r2
 80048c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	3302      	adds	r3, #2
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	e007      	b.n	80048dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1c9      	bne.n	800488e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	2140      	movs	r1, #64	@ 0x40
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fe7b 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e005      	b.n	8004926 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b08a      	sub	sp, #40	@ 0x28
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	4613      	mov	r3, r2
 800493a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004942:	2b20      	cmp	r3, #32
 8004944:	d132      	bne.n	80049ac <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_UART_Receive_IT+0x24>
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e02b      	b.n	80049ae <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	613b      	str	r3, [r7, #16]
   return(result);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800497e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	69f9      	ldr	r1, [r7, #28]
 800498e:	6a3a      	ldr	r2, [r7, #32]
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	61bb      	str	r3, [r7, #24]
   return(result);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	461a      	mov	r2, r3
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fe9a 	bl	80056dc <UART_Start_Receive_IT>
 80049a8:	4603      	mov	r3, r0
 80049aa:	e000      	b.n	80049ae <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	@ 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b0ba      	sub	sp, #232	@ 0xe8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80049e6:	4013      	ands	r3, r2
 80049e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80049ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d115      	bne.n	8004a20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00f      	beq.n	8004a20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 82ab 	beq.w	8004f6c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
      }
      return;
 8004a1e:	e2a5      	b.n	8004f6c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8117 	beq.w	8004c58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004a3a:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <HAL_UART_IRQHandler+0x298>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 810a 	beq.w	8004c58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d011      	beq.n	8004a74 <HAL_UART_IRQHandler+0xbc>
 8004a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d011      	beq.n	8004aa4 <HAL_UART_IRQHandler+0xec>
 8004a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a9a:	f043 0204 	orr.w	r2, r3, #4
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d011      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x11c>
 8004ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aca:	f043 0202 	orr.w	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d017      	beq.n	8004b10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004af0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2208      	movs	r2, #8
 8004afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b06:	f043 0208 	orr.w	r2, r3, #8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d012      	beq.n	8004b42 <HAL_UART_IRQHandler+0x18a>
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8211 	beq.w	8004f70 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b40      	cmp	r3, #64	@ 0x40
 8004b8c:	d005      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d04f      	beq.n	8004c3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fe52 	bl	8005844 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b40      	cmp	r3, #64	@ 0x40
 8004bac:	d141      	bne.n	8004c32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1d9      	bne.n	8004bae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d013      	beq.n	8004c2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c06:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <HAL_UART_IRQHandler+0x29c>)
 8004c08:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fc fbef 	bl	80013f2 <HAL_DMA_Abort_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e00f      	b.n	8004c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9b4 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e00b      	b.n	8004c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9b0 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e007      	b.n	8004c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f9ac 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004c48:	e192      	b.n	8004f70 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	bf00      	nop
    return;
 8004c4c:	e190      	b.n	8004f70 <HAL_UART_IRQHandler+0x5b8>
 8004c4e:	bf00      	nop
 8004c50:	04000120 	.word	0x04000120
 8004c54:	0800590d 	.word	0x0800590d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	f040 814b 	bne.w	8004ef8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8144 	beq.w	8004ef8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 813d 	beq.w	8004ef8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2210      	movs	r2, #16
 8004c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b40      	cmp	r3, #64	@ 0x40
 8004c92:	f040 80b5 	bne.w	8004e00 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ca2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8164 	beq.w	8004f74 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	f080 815c 	bcs.w	8004f74 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f000 8086 	beq.w	8004dde <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d00:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d08:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1da      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d40:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e1      	bne.n	8004d1c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e3      	bne.n	8004d58 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dae:	f023 0310 	bic.w	r3, r3, #16
 8004db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dc2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e4      	bne.n	8004d9e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fc facc 	bl	8001376 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f8d7 	bl	8004fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dfe:	e0b9      	b.n	8004f74 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80ab 	beq.w	8004f78 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80a6 	beq.w	8004f78 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e4      	bne.n	8004e2c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	623b      	str	r3, [r7, #32]
   return(result);
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3308      	adds	r3, #8
 8004e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e86:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e3      	bne.n	8004e62 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0310 	bic.w	r3, r3, #16
 8004ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e4      	bne.n	8004eae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f85b 	bl	8004fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ef6:	e03f      	b.n	8004f78 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <HAL_UART_IRQHandler+0x56a>
 8004f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fede 	bl	8005cdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f20:	e02d      	b.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00e      	beq.n	8004f4c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01c      	beq.n	8004f7c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
    }
    return;
 8004f4a:	e017      	b.n	8004f7c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d012      	beq.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00c      	beq.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fce7 	bl	8005938 <UART_EndTransmit_IT>
    return;
 8004f6a:	e008      	b.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004f6c:	bf00      	nop
 8004f6e:	e006      	b.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004f70:	bf00      	nop
 8004f72:	e004      	b.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004f74:	bf00      	nop
 8004f76:	e002      	b.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004f78:	bf00      	nop
 8004f7a:	e000      	b.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004f7c:	bf00      	nop
  }

}
 8004f7e:	37e8      	adds	r7, #232	@ 0xe8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004ff2:	f023 030c 	bic.w	r3, r3, #12
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	6979      	ldr	r1, [r7, #20]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	430a      	orrs	r2, r1
 8005038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4aa7      	ldr	r2, [pc, #668]	@ (80052dc <UART_SetConfig+0x318>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d120      	bne.n	8005086 <UART_SetConfig+0xc2>
 8005044:	4ba6      	ldr	r3, [pc, #664]	@ (80052e0 <UART_SetConfig+0x31c>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b03      	cmp	r3, #3
 800504e:	d817      	bhi.n	8005080 <UART_SetConfig+0xbc>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <UART_SetConfig+0x94>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	08005069 	.word	0x08005069
 800505c:	08005075 	.word	0x08005075
 8005060:	0800507b 	.word	0x0800507b
 8005064:	0800506f 	.word	0x0800506f
 8005068:	2301      	movs	r3, #1
 800506a:	77fb      	strb	r3, [r7, #31]
 800506c:	e0b5      	b.n	80051da <UART_SetConfig+0x216>
 800506e:	2302      	movs	r3, #2
 8005070:	77fb      	strb	r3, [r7, #31]
 8005072:	e0b2      	b.n	80051da <UART_SetConfig+0x216>
 8005074:	2304      	movs	r3, #4
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e0af      	b.n	80051da <UART_SetConfig+0x216>
 800507a:	2308      	movs	r3, #8
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e0ac      	b.n	80051da <UART_SetConfig+0x216>
 8005080:	2310      	movs	r3, #16
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e0a9      	b.n	80051da <UART_SetConfig+0x216>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a96      	ldr	r2, [pc, #600]	@ (80052e4 <UART_SetConfig+0x320>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d124      	bne.n	80050da <UART_SetConfig+0x116>
 8005090:	4b93      	ldr	r3, [pc, #588]	@ (80052e0 <UART_SetConfig+0x31c>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800509c:	d011      	beq.n	80050c2 <UART_SetConfig+0xfe>
 800509e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050a2:	d817      	bhi.n	80050d4 <UART_SetConfig+0x110>
 80050a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050a8:	d011      	beq.n	80050ce <UART_SetConfig+0x10a>
 80050aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ae:	d811      	bhi.n	80050d4 <UART_SetConfig+0x110>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <UART_SetConfig+0xf8>
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b8:	d006      	beq.n	80050c8 <UART_SetConfig+0x104>
 80050ba:	e00b      	b.n	80050d4 <UART_SetConfig+0x110>
 80050bc:	2300      	movs	r3, #0
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e08b      	b.n	80051da <UART_SetConfig+0x216>
 80050c2:	2302      	movs	r3, #2
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e088      	b.n	80051da <UART_SetConfig+0x216>
 80050c8:	2304      	movs	r3, #4
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e085      	b.n	80051da <UART_SetConfig+0x216>
 80050ce:	2308      	movs	r3, #8
 80050d0:	77fb      	strb	r3, [r7, #31]
 80050d2:	e082      	b.n	80051da <UART_SetConfig+0x216>
 80050d4:	2310      	movs	r3, #16
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e07f      	b.n	80051da <UART_SetConfig+0x216>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a82      	ldr	r2, [pc, #520]	@ (80052e8 <UART_SetConfig+0x324>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d124      	bne.n	800512e <UART_SetConfig+0x16a>
 80050e4:	4b7e      	ldr	r3, [pc, #504]	@ (80052e0 <UART_SetConfig+0x31c>)
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80050ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050f0:	d011      	beq.n	8005116 <UART_SetConfig+0x152>
 80050f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050f6:	d817      	bhi.n	8005128 <UART_SetConfig+0x164>
 80050f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050fc:	d011      	beq.n	8005122 <UART_SetConfig+0x15e>
 80050fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005102:	d811      	bhi.n	8005128 <UART_SetConfig+0x164>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <UART_SetConfig+0x14c>
 8005108:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800510c:	d006      	beq.n	800511c <UART_SetConfig+0x158>
 800510e:	e00b      	b.n	8005128 <UART_SetConfig+0x164>
 8005110:	2300      	movs	r3, #0
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e061      	b.n	80051da <UART_SetConfig+0x216>
 8005116:	2302      	movs	r3, #2
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e05e      	b.n	80051da <UART_SetConfig+0x216>
 800511c:	2304      	movs	r3, #4
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e05b      	b.n	80051da <UART_SetConfig+0x216>
 8005122:	2308      	movs	r3, #8
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e058      	b.n	80051da <UART_SetConfig+0x216>
 8005128:	2310      	movs	r3, #16
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e055      	b.n	80051da <UART_SetConfig+0x216>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a6e      	ldr	r2, [pc, #440]	@ (80052ec <UART_SetConfig+0x328>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d124      	bne.n	8005182 <UART_SetConfig+0x1be>
 8005138:	4b69      	ldr	r3, [pc, #420]	@ (80052e0 <UART_SetConfig+0x31c>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005140:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005144:	d011      	beq.n	800516a <UART_SetConfig+0x1a6>
 8005146:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800514a:	d817      	bhi.n	800517c <UART_SetConfig+0x1b8>
 800514c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005150:	d011      	beq.n	8005176 <UART_SetConfig+0x1b2>
 8005152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005156:	d811      	bhi.n	800517c <UART_SetConfig+0x1b8>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <UART_SetConfig+0x1a0>
 800515c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005160:	d006      	beq.n	8005170 <UART_SetConfig+0x1ac>
 8005162:	e00b      	b.n	800517c <UART_SetConfig+0x1b8>
 8005164:	2300      	movs	r3, #0
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e037      	b.n	80051da <UART_SetConfig+0x216>
 800516a:	2302      	movs	r3, #2
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e034      	b.n	80051da <UART_SetConfig+0x216>
 8005170:	2304      	movs	r3, #4
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e031      	b.n	80051da <UART_SetConfig+0x216>
 8005176:	2308      	movs	r3, #8
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e02e      	b.n	80051da <UART_SetConfig+0x216>
 800517c:	2310      	movs	r3, #16
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e02b      	b.n	80051da <UART_SetConfig+0x216>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a5a      	ldr	r2, [pc, #360]	@ (80052f0 <UART_SetConfig+0x32c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d124      	bne.n	80051d6 <UART_SetConfig+0x212>
 800518c:	4b54      	ldr	r3, [pc, #336]	@ (80052e0 <UART_SetConfig+0x31c>)
 800518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005190:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005194:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005198:	d011      	beq.n	80051be <UART_SetConfig+0x1fa>
 800519a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800519e:	d817      	bhi.n	80051d0 <UART_SetConfig+0x20c>
 80051a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051a4:	d011      	beq.n	80051ca <UART_SetConfig+0x206>
 80051a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051aa:	d811      	bhi.n	80051d0 <UART_SetConfig+0x20c>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <UART_SetConfig+0x1f4>
 80051b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051b4:	d006      	beq.n	80051c4 <UART_SetConfig+0x200>
 80051b6:	e00b      	b.n	80051d0 <UART_SetConfig+0x20c>
 80051b8:	2300      	movs	r3, #0
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e00d      	b.n	80051da <UART_SetConfig+0x216>
 80051be:	2302      	movs	r3, #2
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e00a      	b.n	80051da <UART_SetConfig+0x216>
 80051c4:	2304      	movs	r3, #4
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e007      	b.n	80051da <UART_SetConfig+0x216>
 80051ca:	2308      	movs	r3, #8
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e004      	b.n	80051da <UART_SetConfig+0x216>
 80051d0:	2310      	movs	r3, #16
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e001      	b.n	80051da <UART_SetConfig+0x216>
 80051d6:	2310      	movs	r3, #16
 80051d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e2:	d15b      	bne.n	800529c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80051e4:	7ffb      	ldrb	r3, [r7, #31]
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d827      	bhi.n	800523a <UART_SetConfig+0x276>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <UART_SetConfig+0x22c>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800523b 	.word	0x0800523b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fd fcb2 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8005218:	61b8      	str	r0, [r7, #24]
        break;
 800521a:	e013      	b.n	8005244 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fd fcd0 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8005220:	61b8      	str	r0, [r7, #24]
        break;
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b33      	ldr	r3, [pc, #204]	@ (80052f4 <UART_SetConfig+0x330>)
 8005226:	61bb      	str	r3, [r7, #24]
        break;
 8005228:	e00c      	b.n	8005244 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fd fc47 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 800522e:	61b8      	str	r0, [r7, #24]
        break;
 8005230:	e008      	b.n	8005244 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005236:	61bb      	str	r3, [r7, #24]
        break;
 8005238:	e004      	b.n	8005244 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	77bb      	strb	r3, [r7, #30]
        break;
 8005242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8082 	beq.w	8005350 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	005a      	lsls	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	441a      	add	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b0f      	cmp	r3, #15
 8005266:	d916      	bls.n	8005296 <UART_SetConfig+0x2d2>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526e:	d212      	bcs.n	8005296 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f023 030f 	bic.w	r3, r3, #15
 8005278:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	b29a      	uxth	r2, r3
 8005286:	89fb      	ldrh	r3, [r7, #14]
 8005288:	4313      	orrs	r3, r2
 800528a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	89fa      	ldrh	r2, [r7, #14]
 8005292:	60da      	str	r2, [r3, #12]
 8005294:	e05c      	b.n	8005350 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	77bb      	strb	r3, [r7, #30]
 800529a:	e059      	b.n	8005350 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529c:	7ffb      	ldrb	r3, [r7, #31]
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d835      	bhi.n	800530e <UART_SetConfig+0x34a>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <UART_SetConfig+0x2e4>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	0800530f 	.word	0x0800530f
 80052b8:	080052ff 	.word	0x080052ff
 80052bc:	0800530f 	.word	0x0800530f
 80052c0:	0800530f 	.word	0x0800530f
 80052c4:	0800530f 	.word	0x0800530f
 80052c8:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fd fc56 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80052d0:	61b8      	str	r0, [r7, #24]
        break;
 80052d2:	e021      	b.n	8005318 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7fd fc74 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 80052d8:	61b8      	str	r0, [r7, #24]
        break;
 80052da:	e01d      	b.n	8005318 <UART_SetConfig+0x354>
 80052dc:	40013800 	.word	0x40013800
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40004400 	.word	0x40004400
 80052e8:	40004800 	.word	0x40004800
 80052ec:	40004c00 	.word	0x40004c00
 80052f0:	40005000 	.word	0x40005000
 80052f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <UART_SetConfig+0x3a4>)
 80052fa:	61bb      	str	r3, [r7, #24]
        break;
 80052fc:	e00c      	b.n	8005318 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fd fbdd 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8005302:	61b8      	str	r0, [r7, #24]
        break;
 8005304:	e008      	b.n	8005318 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800530a:	61bb      	str	r3, [r7, #24]
        break;
 800530c:	e004      	b.n	8005318 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	77bb      	strb	r3, [r7, #30]
        break;
 8005316:	bf00      	nop
    }

    if (pclk != 0U)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085a      	lsrs	r2, r3, #1
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	441a      	add	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d909      	bls.n	800534c <UART_SetConfig+0x388>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533e:	d205      	bcs.n	800534c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	e001      	b.n	8005350 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800535c:	7fbb      	ldrb	r3, [r7, #30]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	007a1200 	.word	0x007a1200

0800536c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01a      	beq.n	8005482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800546a:	d10a      	bne.n	8005482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b098      	sub	sp, #96	@ 0x60
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054c0:	f7fb fe18 	bl	80010f4 <HAL_GetTick>
 80054c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d12e      	bne.n	8005532 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054dc:	2200      	movs	r2, #0
 80054de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f88c 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d021      	beq.n	8005532 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005502:	653b      	str	r3, [r7, #80]	@ 0x50
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800550c:	647b      	str	r3, [r7, #68]	@ 0x44
 800550e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800551a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e6      	bne.n	80054ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e062      	b.n	80055f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b04      	cmp	r3, #4
 800553e:	d149      	bne.n	80055d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005540:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005548:	2200      	movs	r2, #0
 800554a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f856 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d03c      	beq.n	80055d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	623b      	str	r3, [r7, #32]
   return(result);
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005578:	633b      	str	r3, [r7, #48]	@ 0x30
 800557a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800557e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e6      	bne.n	800555a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	60fb      	str	r3, [r7, #12]
   return(result);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ac:	61fa      	str	r2, [r7, #28]
 80055ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	69b9      	ldr	r1, [r7, #24]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e5      	bne.n	800558c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e011      	b.n	80055f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3758      	adds	r7, #88	@ 0x58
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005610:	e04f      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d04b      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fb fd6b 	bl	80010f4 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <UART_WaitOnFlagUntilTimeout+0x30>
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e04e      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d037      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b80      	cmp	r3, #128	@ 0x80
 8005646:	d034      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	d031      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d110      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2208      	movs	r2, #8
 8005662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f8ed 	bl	8005844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2208      	movs	r2, #8
 800566e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e029      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568c:	d111      	bne.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f8d3 	bl	8005844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e00f      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4013      	ands	r3, r2
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	bf0c      	ite	eq
 80056c2:	2301      	moveq	r3, #1
 80056c4:	2300      	movne	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d0a0      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056dc:	b480      	push	{r7}
 80056de:	b097      	sub	sp, #92	@ 0x5c
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570e:	d10e      	bne.n	800572e <UART_Start_Receive_IT+0x52>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <UART_Start_Receive_IT+0x48>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800571e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005722:	e01a      	b.n	800575a <UART_Start_Receive_IT+0x7e>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	22ff      	movs	r2, #255	@ 0xff
 8005728:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800572c:	e015      	b.n	800575a <UART_Start_Receive_IT+0x7e>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10d      	bne.n	8005752 <UART_Start_Receive_IT+0x76>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d104      	bne.n	8005748 <UART_Start_Receive_IT+0x6c>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	22ff      	movs	r2, #255	@ 0xff
 8005742:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005746:	e008      	b.n	800575a <UART_Start_Receive_IT+0x7e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	227f      	movs	r2, #127	@ 0x7f
 800574c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005750:	e003      	b.n	800575a <UART_Start_Receive_IT+0x7e>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2222      	movs	r2, #34	@ 0x22
 8005766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	657b      	str	r3, [r7, #84]	@ 0x54
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800578a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800578c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a6:	d107      	bne.n	80057b8 <UART_Start_Receive_IT+0xdc>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d103      	bne.n	80057b8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a22      	ldr	r2, [pc, #136]	@ (800583c <UART_Start_Receive_IT+0x160>)
 80057b4:	669a      	str	r2, [r3, #104]	@ 0x68
 80057b6:	e002      	b.n	80057be <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a21      	ldr	r2, [pc, #132]	@ (8005840 <UART_Start_Receive_IT+0x164>)
 80057bc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d019      	beq.n	80057fa <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80057da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_Start_Receive_IT+0xea>
 80057f8:	e018      	b.n	800582c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	613b      	str	r3, [r7, #16]
   return(result);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f043 0320 	orr.w	r3, r3, #32
 800580e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	69f9      	ldr	r1, [r7, #28]
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	61bb      	str	r3, [r7, #24]
   return(result);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	375c      	adds	r7, #92	@ 0x5c
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	08005b35 	.word	0x08005b35
 8005840:	0800598d 	.word	0x0800598d

08005844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b095      	sub	sp, #84	@ 0x54
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005860:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800586a:	643b      	str	r3, [r7, #64]	@ 0x40
 800586c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e6      	bne.n	800584c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	61fb      	str	r3, [r7, #28]
   return(result);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800589e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d118      	bne.n	80058ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 0310 	bic.w	r3, r3, #16
 80058ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	613b      	str	r3, [r7, #16]
   return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005900:	bf00      	nop
 8005902:	3754      	adds	r7, #84	@ 0x54
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fb34 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	60bb      	str	r3, [r7, #8]
   return(result);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6979      	ldr	r1, [r7, #20]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	613b      	str	r3, [r7, #16]
   return(result);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e6      	bne.n	8005940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fb00 	bl	8004f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005984:	bf00      	nop
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b09c      	sub	sp, #112	@ 0x70
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800599a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a4:	2b22      	cmp	r3, #34	@ 0x22
 80059a6:	f040 80b9 	bne.w	8005b1c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80059b8:	b2d9      	uxtb	r1, r3
 80059ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c4:	400a      	ands	r2, r1
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 809c 	bne.w	8005b2c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a46:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d018      	beq.n	8005aae <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	623b      	str	r3, [r7, #32]
   return(result);
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e6      	bne.n	8005a7c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d12e      	bne.n	8005b14 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f023 0310 	bic.w	r3, r3, #16
 8005ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	69b9      	ldr	r1, [r7, #24]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e6      	bne.n	8005abc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d103      	bne.n	8005b04 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2210      	movs	r2, #16
 8005b02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fa4d 	bl	8004fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b12:	e00b      	b.n	8005b2c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fb f8ab 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 8005b1a:	e007      	b.n	8005b2c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0208 	orr.w	r2, r2, #8
 8005b2a:	619a      	str	r2, [r3, #24]
}
 8005b2c:	bf00      	nop
 8005b2e:	3770      	adds	r7, #112	@ 0x70
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b09c      	sub	sp, #112	@ 0x70
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b4c:	2b22      	cmp	r3, #34	@ 0x22
 8005b4e:	f040 80b9 	bne.w	8005cc4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b60:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005b66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 809c 	bne.w	8005cd4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bbc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005bc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005bee:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e5      	bne.n	8005bce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d018      	beq.n	8005c56 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c44:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e6      	bne.n	8005c24 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d12e      	bne.n	8005cbc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f023 0310 	bic.w	r3, r3, #16
 8005c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e6      	bne.n	8005c64 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d103      	bne.n	8005cac <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f979 	bl	8004fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cba:	e00b      	b.n	8005cd4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fa ffd7 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 8005cc2:	e007      	b.n	8005cd4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0208 	orr.w	r2, r2, #8
 8005cd2:	619a      	str	r2, [r3, #24]
}
 8005cd4:	bf00      	nop
 8005cd6:	3770      	adds	r7, #112	@ 0x70
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <siprintf>:
 8005cf0:	b40e      	push	{r1, r2, r3}
 8005cf2:	b510      	push	{r4, lr}
 8005cf4:	b09d      	sub	sp, #116	@ 0x74
 8005cf6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005cf8:	9002      	str	r0, [sp, #8]
 8005cfa:	9006      	str	r0, [sp, #24]
 8005cfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d00:	480a      	ldr	r0, [pc, #40]	@ (8005d2c <siprintf+0x3c>)
 8005d02:	9107      	str	r1, [sp, #28]
 8005d04:	9104      	str	r1, [sp, #16]
 8005d06:	490a      	ldr	r1, [pc, #40]	@ (8005d30 <siprintf+0x40>)
 8005d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0c:	9105      	str	r1, [sp, #20]
 8005d0e:	2400      	movs	r4, #0
 8005d10:	a902      	add	r1, sp, #8
 8005d12:	6800      	ldr	r0, [r0, #0]
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d18:	f000 f994 	bl	8006044 <_svfiprintf_r>
 8005d1c:	9b02      	ldr	r3, [sp, #8]
 8005d1e:	701c      	strb	r4, [r3, #0]
 8005d20:	b01d      	add	sp, #116	@ 0x74
 8005d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d26:	b003      	add	sp, #12
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000010 	.word	0x20000010
 8005d30:	ffff0208 	.word	0xffff0208

08005d34 <memset>:
 8005d34:	4402      	add	r2, r0
 8005d36:	4603      	mov	r3, r0
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d100      	bne.n	8005d3e <memset+0xa>
 8005d3c:	4770      	bx	lr
 8005d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d42:	e7f9      	b.n	8005d38 <memset+0x4>

08005d44 <__errno>:
 8005d44:	4b01      	ldr	r3, [pc, #4]	@ (8005d4c <__errno+0x8>)
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000010 	.word	0x20000010

08005d50 <__libc_init_array>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4d0d      	ldr	r5, [pc, #52]	@ (8005d88 <__libc_init_array+0x38>)
 8005d54:	4c0d      	ldr	r4, [pc, #52]	@ (8005d8c <__libc_init_array+0x3c>)
 8005d56:	1b64      	subs	r4, r4, r5
 8005d58:	10a4      	asrs	r4, r4, #2
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	42a6      	cmp	r6, r4
 8005d5e:	d109      	bne.n	8005d74 <__libc_init_array+0x24>
 8005d60:	4d0b      	ldr	r5, [pc, #44]	@ (8005d90 <__libc_init_array+0x40>)
 8005d62:	4c0c      	ldr	r4, [pc, #48]	@ (8005d94 <__libc_init_array+0x44>)
 8005d64:	f000 fc64 	bl	8006630 <_init>
 8005d68:	1b64      	subs	r4, r4, r5
 8005d6a:	10a4      	asrs	r4, r4, #2
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	42a6      	cmp	r6, r4
 8005d70:	d105      	bne.n	8005d7e <__libc_init_array+0x2e>
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d78:	4798      	blx	r3
 8005d7a:	3601      	adds	r6, #1
 8005d7c:	e7ee      	b.n	8005d5c <__libc_init_array+0xc>
 8005d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d82:	4798      	blx	r3
 8005d84:	3601      	adds	r6, #1
 8005d86:	e7f2      	b.n	8005d6e <__libc_init_array+0x1e>
 8005d88:	080066ec 	.word	0x080066ec
 8005d8c:	080066ec 	.word	0x080066ec
 8005d90:	080066ec 	.word	0x080066ec
 8005d94:	080066f0 	.word	0x080066f0

08005d98 <__retarget_lock_acquire_recursive>:
 8005d98:	4770      	bx	lr

08005d9a <__retarget_lock_release_recursive>:
 8005d9a:	4770      	bx	lr

08005d9c <_free_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4605      	mov	r5, r0
 8005da0:	2900      	cmp	r1, #0
 8005da2:	d041      	beq.n	8005e28 <_free_r+0x8c>
 8005da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da8:	1f0c      	subs	r4, r1, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfb8      	it	lt
 8005dae:	18e4      	addlt	r4, r4, r3
 8005db0:	f000 f8e0 	bl	8005f74 <__malloc_lock>
 8005db4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e2c <_free_r+0x90>)
 8005db6:	6813      	ldr	r3, [r2, #0]
 8005db8:	b933      	cbnz	r3, 8005dc8 <_free_r+0x2c>
 8005dba:	6063      	str	r3, [r4, #4]
 8005dbc:	6014      	str	r4, [r2, #0]
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dc4:	f000 b8dc 	b.w	8005f80 <__malloc_unlock>
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	d908      	bls.n	8005dde <_free_r+0x42>
 8005dcc:	6820      	ldr	r0, [r4, #0]
 8005dce:	1821      	adds	r1, r4, r0
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	bf01      	itttt	eq
 8005dd4:	6819      	ldreq	r1, [r3, #0]
 8005dd6:	685b      	ldreq	r3, [r3, #4]
 8005dd8:	1809      	addeq	r1, r1, r0
 8005dda:	6021      	streq	r1, [r4, #0]
 8005ddc:	e7ed      	b.n	8005dba <_free_r+0x1e>
 8005dde:	461a      	mov	r2, r3
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	b10b      	cbz	r3, 8005de8 <_free_r+0x4c>
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	d9fa      	bls.n	8005dde <_free_r+0x42>
 8005de8:	6811      	ldr	r1, [r2, #0]
 8005dea:	1850      	adds	r0, r2, r1
 8005dec:	42a0      	cmp	r0, r4
 8005dee:	d10b      	bne.n	8005e08 <_free_r+0x6c>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	4401      	add	r1, r0
 8005df4:	1850      	adds	r0, r2, r1
 8005df6:	4283      	cmp	r3, r0
 8005df8:	6011      	str	r1, [r2, #0]
 8005dfa:	d1e0      	bne.n	8005dbe <_free_r+0x22>
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	6053      	str	r3, [r2, #4]
 8005e02:	4408      	add	r0, r1
 8005e04:	6010      	str	r0, [r2, #0]
 8005e06:	e7da      	b.n	8005dbe <_free_r+0x22>
 8005e08:	d902      	bls.n	8005e10 <_free_r+0x74>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	e7d6      	b.n	8005dbe <_free_r+0x22>
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	1821      	adds	r1, r4, r0
 8005e14:	428b      	cmp	r3, r1
 8005e16:	bf04      	itt	eq
 8005e18:	6819      	ldreq	r1, [r3, #0]
 8005e1a:	685b      	ldreq	r3, [r3, #4]
 8005e1c:	6063      	str	r3, [r4, #4]
 8005e1e:	bf04      	itt	eq
 8005e20:	1809      	addeq	r1, r1, r0
 8005e22:	6021      	streq	r1, [r4, #0]
 8005e24:	6054      	str	r4, [r2, #4]
 8005e26:	e7ca      	b.n	8005dbe <_free_r+0x22>
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200002fc 	.word	0x200002fc

08005e30 <sbrk_aligned>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4e0f      	ldr	r6, [pc, #60]	@ (8005e70 <sbrk_aligned+0x40>)
 8005e34:	460c      	mov	r4, r1
 8005e36:	6831      	ldr	r1, [r6, #0]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	b911      	cbnz	r1, 8005e42 <sbrk_aligned+0x12>
 8005e3c:	f000 fba4 	bl	8006588 <_sbrk_r>
 8005e40:	6030      	str	r0, [r6, #0]
 8005e42:	4621      	mov	r1, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 fb9f 	bl	8006588 <_sbrk_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d103      	bne.n	8005e56 <sbrk_aligned+0x26>
 8005e4e:	f04f 34ff 	mov.w	r4, #4294967295
 8005e52:	4620      	mov	r0, r4
 8005e54:	bd70      	pop	{r4, r5, r6, pc}
 8005e56:	1cc4      	adds	r4, r0, #3
 8005e58:	f024 0403 	bic.w	r4, r4, #3
 8005e5c:	42a0      	cmp	r0, r4
 8005e5e:	d0f8      	beq.n	8005e52 <sbrk_aligned+0x22>
 8005e60:	1a21      	subs	r1, r4, r0
 8005e62:	4628      	mov	r0, r5
 8005e64:	f000 fb90 	bl	8006588 <_sbrk_r>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d1f2      	bne.n	8005e52 <sbrk_aligned+0x22>
 8005e6c:	e7ef      	b.n	8005e4e <sbrk_aligned+0x1e>
 8005e6e:	bf00      	nop
 8005e70:	200002f8 	.word	0x200002f8

08005e74 <_malloc_r>:
 8005e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e78:	1ccd      	adds	r5, r1, #3
 8005e7a:	f025 0503 	bic.w	r5, r5, #3
 8005e7e:	3508      	adds	r5, #8
 8005e80:	2d0c      	cmp	r5, #12
 8005e82:	bf38      	it	cc
 8005e84:	250c      	movcc	r5, #12
 8005e86:	2d00      	cmp	r5, #0
 8005e88:	4606      	mov	r6, r0
 8005e8a:	db01      	blt.n	8005e90 <_malloc_r+0x1c>
 8005e8c:	42a9      	cmp	r1, r5
 8005e8e:	d904      	bls.n	8005e9a <_malloc_r+0x26>
 8005e90:	230c      	movs	r3, #12
 8005e92:	6033      	str	r3, [r6, #0]
 8005e94:	2000      	movs	r0, #0
 8005e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f70 <_malloc_r+0xfc>
 8005e9e:	f000 f869 	bl	8005f74 <__malloc_lock>
 8005ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea6:	461c      	mov	r4, r3
 8005ea8:	bb44      	cbnz	r4, 8005efc <_malloc_r+0x88>
 8005eaa:	4629      	mov	r1, r5
 8005eac:	4630      	mov	r0, r6
 8005eae:	f7ff ffbf 	bl	8005e30 <sbrk_aligned>
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	d158      	bne.n	8005f6a <_malloc_r+0xf6>
 8005eb8:	f8d8 4000 	ldr.w	r4, [r8]
 8005ebc:	4627      	mov	r7, r4
 8005ebe:	2f00      	cmp	r7, #0
 8005ec0:	d143      	bne.n	8005f4a <_malloc_r+0xd6>
 8005ec2:	2c00      	cmp	r4, #0
 8005ec4:	d04b      	beq.n	8005f5e <_malloc_r+0xea>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	4639      	mov	r1, r7
 8005eca:	4630      	mov	r0, r6
 8005ecc:	eb04 0903 	add.w	r9, r4, r3
 8005ed0:	f000 fb5a 	bl	8006588 <_sbrk_r>
 8005ed4:	4581      	cmp	r9, r0
 8005ed6:	d142      	bne.n	8005f5e <_malloc_r+0xea>
 8005ed8:	6821      	ldr	r1, [r4, #0]
 8005eda:	1a6d      	subs	r5, r5, r1
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7ff ffa6 	bl	8005e30 <sbrk_aligned>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d03a      	beq.n	8005f5e <_malloc_r+0xea>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	442b      	add	r3, r5
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	bb62      	cbnz	r2, 8005f50 <_malloc_r+0xdc>
 8005ef6:	f8c8 7000 	str.w	r7, [r8]
 8005efa:	e00f      	b.n	8005f1c <_malloc_r+0xa8>
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	1b52      	subs	r2, r2, r5
 8005f00:	d420      	bmi.n	8005f44 <_malloc_r+0xd0>
 8005f02:	2a0b      	cmp	r2, #11
 8005f04:	d917      	bls.n	8005f36 <_malloc_r+0xc2>
 8005f06:	1961      	adds	r1, r4, r5
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	6025      	str	r5, [r4, #0]
 8005f0c:	bf18      	it	ne
 8005f0e:	6059      	strne	r1, [r3, #4]
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	bf08      	it	eq
 8005f14:	f8c8 1000 	streq.w	r1, [r8]
 8005f18:	5162      	str	r2, [r4, r5]
 8005f1a:	604b      	str	r3, [r1, #4]
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f000 f82f 	bl	8005f80 <__malloc_unlock>
 8005f22:	f104 000b 	add.w	r0, r4, #11
 8005f26:	1d23      	adds	r3, r4, #4
 8005f28:	f020 0007 	bic.w	r0, r0, #7
 8005f2c:	1ac2      	subs	r2, r0, r3
 8005f2e:	bf1c      	itt	ne
 8005f30:	1a1b      	subne	r3, r3, r0
 8005f32:	50a3      	strne	r3, [r4, r2]
 8005f34:	e7af      	b.n	8005e96 <_malloc_r+0x22>
 8005f36:	6862      	ldr	r2, [r4, #4]
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	bf0c      	ite	eq
 8005f3c:	f8c8 2000 	streq.w	r2, [r8]
 8005f40:	605a      	strne	r2, [r3, #4]
 8005f42:	e7eb      	b.n	8005f1c <_malloc_r+0xa8>
 8005f44:	4623      	mov	r3, r4
 8005f46:	6864      	ldr	r4, [r4, #4]
 8005f48:	e7ae      	b.n	8005ea8 <_malloc_r+0x34>
 8005f4a:	463c      	mov	r4, r7
 8005f4c:	687f      	ldr	r7, [r7, #4]
 8005f4e:	e7b6      	b.n	8005ebe <_malloc_r+0x4a>
 8005f50:	461a      	mov	r2, r3
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d1fb      	bne.n	8005f50 <_malloc_r+0xdc>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6053      	str	r3, [r2, #4]
 8005f5c:	e7de      	b.n	8005f1c <_malloc_r+0xa8>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	4630      	mov	r0, r6
 8005f64:	f000 f80c 	bl	8005f80 <__malloc_unlock>
 8005f68:	e794      	b.n	8005e94 <_malloc_r+0x20>
 8005f6a:	6005      	str	r5, [r0, #0]
 8005f6c:	e7d6      	b.n	8005f1c <_malloc_r+0xa8>
 8005f6e:	bf00      	nop
 8005f70:	200002fc 	.word	0x200002fc

08005f74 <__malloc_lock>:
 8005f74:	4801      	ldr	r0, [pc, #4]	@ (8005f7c <__malloc_lock+0x8>)
 8005f76:	f7ff bf0f 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	200002f4 	.word	0x200002f4

08005f80 <__malloc_unlock>:
 8005f80:	4801      	ldr	r0, [pc, #4]	@ (8005f88 <__malloc_unlock+0x8>)
 8005f82:	f7ff bf0a 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005f86:	bf00      	nop
 8005f88:	200002f4 	.word	0x200002f4

08005f8c <__ssputs_r>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	688e      	ldr	r6, [r1, #8]
 8005f92:	461f      	mov	r7, r3
 8005f94:	42be      	cmp	r6, r7
 8005f96:	680b      	ldr	r3, [r1, #0]
 8005f98:	4682      	mov	sl, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4690      	mov	r8, r2
 8005f9e:	d82d      	bhi.n	8005ffc <__ssputs_r+0x70>
 8005fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fa8:	d026      	beq.n	8005ff8 <__ssputs_r+0x6c>
 8005faa:	6965      	ldr	r5, [r4, #20]
 8005fac:	6909      	ldr	r1, [r1, #16]
 8005fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb2:	eba3 0901 	sub.w	r9, r3, r1
 8005fb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fba:	1c7b      	adds	r3, r7, #1
 8005fbc:	444b      	add	r3, r9
 8005fbe:	106d      	asrs	r5, r5, #1
 8005fc0:	429d      	cmp	r5, r3
 8005fc2:	bf38      	it	cc
 8005fc4:	461d      	movcc	r5, r3
 8005fc6:	0553      	lsls	r3, r2, #21
 8005fc8:	d527      	bpl.n	800601a <__ssputs_r+0x8e>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f7ff ff52 	bl	8005e74 <_malloc_r>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	b360      	cbz	r0, 800602e <__ssputs_r+0xa2>
 8005fd4:	6921      	ldr	r1, [r4, #16]
 8005fd6:	464a      	mov	r2, r9
 8005fd8:	f000 fae6 	bl	80065a8 <memcpy>
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	6126      	str	r6, [r4, #16]
 8005fea:	6165      	str	r5, [r4, #20]
 8005fec:	444e      	add	r6, r9
 8005fee:	eba5 0509 	sub.w	r5, r5, r9
 8005ff2:	6026      	str	r6, [r4, #0]
 8005ff4:	60a5      	str	r5, [r4, #8]
 8005ff6:	463e      	mov	r6, r7
 8005ff8:	42be      	cmp	r6, r7
 8005ffa:	d900      	bls.n	8005ffe <__ssputs_r+0x72>
 8005ffc:	463e      	mov	r6, r7
 8005ffe:	6820      	ldr	r0, [r4, #0]
 8006000:	4632      	mov	r2, r6
 8006002:	4641      	mov	r1, r8
 8006004:	f000 faa6 	bl	8006554 <memmove>
 8006008:	68a3      	ldr	r3, [r4, #8]
 800600a:	1b9b      	subs	r3, r3, r6
 800600c:	60a3      	str	r3, [r4, #8]
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	4433      	add	r3, r6
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	2000      	movs	r0, #0
 8006016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601a:	462a      	mov	r2, r5
 800601c:	f000 fad2 	bl	80065c4 <_realloc_r>
 8006020:	4606      	mov	r6, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	d1e0      	bne.n	8005fe8 <__ssputs_r+0x5c>
 8006026:	6921      	ldr	r1, [r4, #16]
 8006028:	4650      	mov	r0, sl
 800602a:	f7ff feb7 	bl	8005d9c <_free_r>
 800602e:	230c      	movs	r3, #12
 8006030:	f8ca 3000 	str.w	r3, [sl]
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800603a:	81a3      	strh	r3, [r4, #12]
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e7e9      	b.n	8006016 <__ssputs_r+0x8a>
	...

08006044 <_svfiprintf_r>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	4698      	mov	r8, r3
 800604a:	898b      	ldrh	r3, [r1, #12]
 800604c:	061b      	lsls	r3, r3, #24
 800604e:	b09d      	sub	sp, #116	@ 0x74
 8006050:	4607      	mov	r7, r0
 8006052:	460d      	mov	r5, r1
 8006054:	4614      	mov	r4, r2
 8006056:	d510      	bpl.n	800607a <_svfiprintf_r+0x36>
 8006058:	690b      	ldr	r3, [r1, #16]
 800605a:	b973      	cbnz	r3, 800607a <_svfiprintf_r+0x36>
 800605c:	2140      	movs	r1, #64	@ 0x40
 800605e:	f7ff ff09 	bl	8005e74 <_malloc_r>
 8006062:	6028      	str	r0, [r5, #0]
 8006064:	6128      	str	r0, [r5, #16]
 8006066:	b930      	cbnz	r0, 8006076 <_svfiprintf_r+0x32>
 8006068:	230c      	movs	r3, #12
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	b01d      	add	sp, #116	@ 0x74
 8006072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006076:	2340      	movs	r3, #64	@ 0x40
 8006078:	616b      	str	r3, [r5, #20]
 800607a:	2300      	movs	r3, #0
 800607c:	9309      	str	r3, [sp, #36]	@ 0x24
 800607e:	2320      	movs	r3, #32
 8006080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006084:	f8cd 800c 	str.w	r8, [sp, #12]
 8006088:	2330      	movs	r3, #48	@ 0x30
 800608a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006228 <_svfiprintf_r+0x1e4>
 800608e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006092:	f04f 0901 	mov.w	r9, #1
 8006096:	4623      	mov	r3, r4
 8006098:	469a      	mov	sl, r3
 800609a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800609e:	b10a      	cbz	r2, 80060a4 <_svfiprintf_r+0x60>
 80060a0:	2a25      	cmp	r2, #37	@ 0x25
 80060a2:	d1f9      	bne.n	8006098 <_svfiprintf_r+0x54>
 80060a4:	ebba 0b04 	subs.w	fp, sl, r4
 80060a8:	d00b      	beq.n	80060c2 <_svfiprintf_r+0x7e>
 80060aa:	465b      	mov	r3, fp
 80060ac:	4622      	mov	r2, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff ff6b 	bl	8005f8c <__ssputs_r>
 80060b6:	3001      	adds	r0, #1
 80060b8:	f000 80a7 	beq.w	800620a <_svfiprintf_r+0x1c6>
 80060bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060be:	445a      	add	r2, fp
 80060c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80060c2:	f89a 3000 	ldrb.w	r3, [sl]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 809f 	beq.w	800620a <_svfiprintf_r+0x1c6>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f04f 32ff 	mov.w	r2, #4294967295
 80060d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060d6:	f10a 0a01 	add.w	sl, sl, #1
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	9307      	str	r3, [sp, #28]
 80060de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80060e4:	4654      	mov	r4, sl
 80060e6:	2205      	movs	r2, #5
 80060e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ec:	484e      	ldr	r0, [pc, #312]	@ (8006228 <_svfiprintf_r+0x1e4>)
 80060ee:	f7fa f877 	bl	80001e0 <memchr>
 80060f2:	9a04      	ldr	r2, [sp, #16]
 80060f4:	b9d8      	cbnz	r0, 800612e <_svfiprintf_r+0xea>
 80060f6:	06d0      	lsls	r0, r2, #27
 80060f8:	bf44      	itt	mi
 80060fa:	2320      	movmi	r3, #32
 80060fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006100:	0711      	lsls	r1, r2, #28
 8006102:	bf44      	itt	mi
 8006104:	232b      	movmi	r3, #43	@ 0x2b
 8006106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800610a:	f89a 3000 	ldrb.w	r3, [sl]
 800610e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006110:	d015      	beq.n	800613e <_svfiprintf_r+0xfa>
 8006112:	9a07      	ldr	r2, [sp, #28]
 8006114:	4654      	mov	r4, sl
 8006116:	2000      	movs	r0, #0
 8006118:	f04f 0c0a 	mov.w	ip, #10
 800611c:	4621      	mov	r1, r4
 800611e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006122:	3b30      	subs	r3, #48	@ 0x30
 8006124:	2b09      	cmp	r3, #9
 8006126:	d94b      	bls.n	80061c0 <_svfiprintf_r+0x17c>
 8006128:	b1b0      	cbz	r0, 8006158 <_svfiprintf_r+0x114>
 800612a:	9207      	str	r2, [sp, #28]
 800612c:	e014      	b.n	8006158 <_svfiprintf_r+0x114>
 800612e:	eba0 0308 	sub.w	r3, r0, r8
 8006132:	fa09 f303 	lsl.w	r3, r9, r3
 8006136:	4313      	orrs	r3, r2
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	46a2      	mov	sl, r4
 800613c:	e7d2      	b.n	80060e4 <_svfiprintf_r+0xa0>
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	9103      	str	r1, [sp, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	bfbb      	ittet	lt
 800614a:	425b      	neglt	r3, r3
 800614c:	f042 0202 	orrlt.w	r2, r2, #2
 8006150:	9307      	strge	r3, [sp, #28]
 8006152:	9307      	strlt	r3, [sp, #28]
 8006154:	bfb8      	it	lt
 8006156:	9204      	strlt	r2, [sp, #16]
 8006158:	7823      	ldrb	r3, [r4, #0]
 800615a:	2b2e      	cmp	r3, #46	@ 0x2e
 800615c:	d10a      	bne.n	8006174 <_svfiprintf_r+0x130>
 800615e:	7863      	ldrb	r3, [r4, #1]
 8006160:	2b2a      	cmp	r3, #42	@ 0x2a
 8006162:	d132      	bne.n	80061ca <_svfiprintf_r+0x186>
 8006164:	9b03      	ldr	r3, [sp, #12]
 8006166:	1d1a      	adds	r2, r3, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	9203      	str	r2, [sp, #12]
 800616c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006170:	3402      	adds	r4, #2
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006238 <_svfiprintf_r+0x1f4>
 8006178:	7821      	ldrb	r1, [r4, #0]
 800617a:	2203      	movs	r2, #3
 800617c:	4650      	mov	r0, sl
 800617e:	f7fa f82f 	bl	80001e0 <memchr>
 8006182:	b138      	cbz	r0, 8006194 <_svfiprintf_r+0x150>
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	eba0 000a 	sub.w	r0, r0, sl
 800618a:	2240      	movs	r2, #64	@ 0x40
 800618c:	4082      	lsls	r2, r0
 800618e:	4313      	orrs	r3, r2
 8006190:	3401      	adds	r4, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006198:	4824      	ldr	r0, [pc, #144]	@ (800622c <_svfiprintf_r+0x1e8>)
 800619a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800619e:	2206      	movs	r2, #6
 80061a0:	f7fa f81e 	bl	80001e0 <memchr>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d036      	beq.n	8006216 <_svfiprintf_r+0x1d2>
 80061a8:	4b21      	ldr	r3, [pc, #132]	@ (8006230 <_svfiprintf_r+0x1ec>)
 80061aa:	bb1b      	cbnz	r3, 80061f4 <_svfiprintf_r+0x1b0>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	3307      	adds	r3, #7
 80061b0:	f023 0307 	bic.w	r3, r3, #7
 80061b4:	3308      	adds	r3, #8
 80061b6:	9303      	str	r3, [sp, #12]
 80061b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ba:	4433      	add	r3, r6
 80061bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80061be:	e76a      	b.n	8006096 <_svfiprintf_r+0x52>
 80061c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061c4:	460c      	mov	r4, r1
 80061c6:	2001      	movs	r0, #1
 80061c8:	e7a8      	b.n	800611c <_svfiprintf_r+0xd8>
 80061ca:	2300      	movs	r3, #0
 80061cc:	3401      	adds	r4, #1
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	4619      	mov	r1, r3
 80061d2:	f04f 0c0a 	mov.w	ip, #10
 80061d6:	4620      	mov	r0, r4
 80061d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061dc:	3a30      	subs	r2, #48	@ 0x30
 80061de:	2a09      	cmp	r2, #9
 80061e0:	d903      	bls.n	80061ea <_svfiprintf_r+0x1a6>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0c6      	beq.n	8006174 <_svfiprintf_r+0x130>
 80061e6:	9105      	str	r1, [sp, #20]
 80061e8:	e7c4      	b.n	8006174 <_svfiprintf_r+0x130>
 80061ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ee:	4604      	mov	r4, r0
 80061f0:	2301      	movs	r3, #1
 80061f2:	e7f0      	b.n	80061d6 <_svfiprintf_r+0x192>
 80061f4:	ab03      	add	r3, sp, #12
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	462a      	mov	r2, r5
 80061fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006234 <_svfiprintf_r+0x1f0>)
 80061fc:	a904      	add	r1, sp, #16
 80061fe:	4638      	mov	r0, r7
 8006200:	f3af 8000 	nop.w
 8006204:	1c42      	adds	r2, r0, #1
 8006206:	4606      	mov	r6, r0
 8006208:	d1d6      	bne.n	80061b8 <_svfiprintf_r+0x174>
 800620a:	89ab      	ldrh	r3, [r5, #12]
 800620c:	065b      	lsls	r3, r3, #25
 800620e:	f53f af2d 	bmi.w	800606c <_svfiprintf_r+0x28>
 8006212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006214:	e72c      	b.n	8006070 <_svfiprintf_r+0x2c>
 8006216:	ab03      	add	r3, sp, #12
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	462a      	mov	r2, r5
 800621c:	4b05      	ldr	r3, [pc, #20]	@ (8006234 <_svfiprintf_r+0x1f0>)
 800621e:	a904      	add	r1, sp, #16
 8006220:	4638      	mov	r0, r7
 8006222:	f000 f879 	bl	8006318 <_printf_i>
 8006226:	e7ed      	b.n	8006204 <_svfiprintf_r+0x1c0>
 8006228:	080066b0 	.word	0x080066b0
 800622c:	080066ba 	.word	0x080066ba
 8006230:	00000000 	.word	0x00000000
 8006234:	08005f8d 	.word	0x08005f8d
 8006238:	080066b6 	.word	0x080066b6

0800623c <_printf_common>:
 800623c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006240:	4616      	mov	r6, r2
 8006242:	4698      	mov	r8, r3
 8006244:	688a      	ldr	r2, [r1, #8]
 8006246:	690b      	ldr	r3, [r1, #16]
 8006248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800624c:	4293      	cmp	r3, r2
 800624e:	bfb8      	it	lt
 8006250:	4613      	movlt	r3, r2
 8006252:	6033      	str	r3, [r6, #0]
 8006254:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006258:	4607      	mov	r7, r0
 800625a:	460c      	mov	r4, r1
 800625c:	b10a      	cbz	r2, 8006262 <_printf_common+0x26>
 800625e:	3301      	adds	r3, #1
 8006260:	6033      	str	r3, [r6, #0]
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	0699      	lsls	r1, r3, #26
 8006266:	bf42      	ittt	mi
 8006268:	6833      	ldrmi	r3, [r6, #0]
 800626a:	3302      	addmi	r3, #2
 800626c:	6033      	strmi	r3, [r6, #0]
 800626e:	6825      	ldr	r5, [r4, #0]
 8006270:	f015 0506 	ands.w	r5, r5, #6
 8006274:	d106      	bne.n	8006284 <_printf_common+0x48>
 8006276:	f104 0a19 	add.w	sl, r4, #25
 800627a:	68e3      	ldr	r3, [r4, #12]
 800627c:	6832      	ldr	r2, [r6, #0]
 800627e:	1a9b      	subs	r3, r3, r2
 8006280:	42ab      	cmp	r3, r5
 8006282:	dc26      	bgt.n	80062d2 <_printf_common+0x96>
 8006284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006288:	6822      	ldr	r2, [r4, #0]
 800628a:	3b00      	subs	r3, #0
 800628c:	bf18      	it	ne
 800628e:	2301      	movne	r3, #1
 8006290:	0692      	lsls	r2, r2, #26
 8006292:	d42b      	bmi.n	80062ec <_printf_common+0xb0>
 8006294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006298:	4641      	mov	r1, r8
 800629a:	4638      	mov	r0, r7
 800629c:	47c8      	blx	r9
 800629e:	3001      	adds	r0, #1
 80062a0:	d01e      	beq.n	80062e0 <_printf_common+0xa4>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	6922      	ldr	r2, [r4, #16]
 80062a6:	f003 0306 	and.w	r3, r3, #6
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	bf02      	ittt	eq
 80062ae:	68e5      	ldreq	r5, [r4, #12]
 80062b0:	6833      	ldreq	r3, [r6, #0]
 80062b2:	1aed      	subeq	r5, r5, r3
 80062b4:	68a3      	ldr	r3, [r4, #8]
 80062b6:	bf0c      	ite	eq
 80062b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062bc:	2500      	movne	r5, #0
 80062be:	4293      	cmp	r3, r2
 80062c0:	bfc4      	itt	gt
 80062c2:	1a9b      	subgt	r3, r3, r2
 80062c4:	18ed      	addgt	r5, r5, r3
 80062c6:	2600      	movs	r6, #0
 80062c8:	341a      	adds	r4, #26
 80062ca:	42b5      	cmp	r5, r6
 80062cc:	d11a      	bne.n	8006304 <_printf_common+0xc8>
 80062ce:	2000      	movs	r0, #0
 80062d0:	e008      	b.n	80062e4 <_printf_common+0xa8>
 80062d2:	2301      	movs	r3, #1
 80062d4:	4652      	mov	r2, sl
 80062d6:	4641      	mov	r1, r8
 80062d8:	4638      	mov	r0, r7
 80062da:	47c8      	blx	r9
 80062dc:	3001      	adds	r0, #1
 80062de:	d103      	bne.n	80062e8 <_printf_common+0xac>
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e8:	3501      	adds	r5, #1
 80062ea:	e7c6      	b.n	800627a <_printf_common+0x3e>
 80062ec:	18e1      	adds	r1, r4, r3
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	2030      	movs	r0, #48	@ 0x30
 80062f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062f6:	4422      	add	r2, r4
 80062f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006300:	3302      	adds	r3, #2
 8006302:	e7c7      	b.n	8006294 <_printf_common+0x58>
 8006304:	2301      	movs	r3, #1
 8006306:	4622      	mov	r2, r4
 8006308:	4641      	mov	r1, r8
 800630a:	4638      	mov	r0, r7
 800630c:	47c8      	blx	r9
 800630e:	3001      	adds	r0, #1
 8006310:	d0e6      	beq.n	80062e0 <_printf_common+0xa4>
 8006312:	3601      	adds	r6, #1
 8006314:	e7d9      	b.n	80062ca <_printf_common+0x8e>
	...

08006318 <_printf_i>:
 8006318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	7e0f      	ldrb	r7, [r1, #24]
 800631e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006320:	2f78      	cmp	r7, #120	@ 0x78
 8006322:	4691      	mov	r9, r2
 8006324:	4680      	mov	r8, r0
 8006326:	460c      	mov	r4, r1
 8006328:	469a      	mov	sl, r3
 800632a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800632e:	d807      	bhi.n	8006340 <_printf_i+0x28>
 8006330:	2f62      	cmp	r7, #98	@ 0x62
 8006332:	d80a      	bhi.n	800634a <_printf_i+0x32>
 8006334:	2f00      	cmp	r7, #0
 8006336:	f000 80d1 	beq.w	80064dc <_printf_i+0x1c4>
 800633a:	2f58      	cmp	r7, #88	@ 0x58
 800633c:	f000 80b8 	beq.w	80064b0 <_printf_i+0x198>
 8006340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006344:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006348:	e03a      	b.n	80063c0 <_printf_i+0xa8>
 800634a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800634e:	2b15      	cmp	r3, #21
 8006350:	d8f6      	bhi.n	8006340 <_printf_i+0x28>
 8006352:	a101      	add	r1, pc, #4	@ (adr r1, 8006358 <_printf_i+0x40>)
 8006354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006358:	080063b1 	.word	0x080063b1
 800635c:	080063c5 	.word	0x080063c5
 8006360:	08006341 	.word	0x08006341
 8006364:	08006341 	.word	0x08006341
 8006368:	08006341 	.word	0x08006341
 800636c:	08006341 	.word	0x08006341
 8006370:	080063c5 	.word	0x080063c5
 8006374:	08006341 	.word	0x08006341
 8006378:	08006341 	.word	0x08006341
 800637c:	08006341 	.word	0x08006341
 8006380:	08006341 	.word	0x08006341
 8006384:	080064c3 	.word	0x080064c3
 8006388:	080063ef 	.word	0x080063ef
 800638c:	0800647d 	.word	0x0800647d
 8006390:	08006341 	.word	0x08006341
 8006394:	08006341 	.word	0x08006341
 8006398:	080064e5 	.word	0x080064e5
 800639c:	08006341 	.word	0x08006341
 80063a0:	080063ef 	.word	0x080063ef
 80063a4:	08006341 	.word	0x08006341
 80063a8:	08006341 	.word	0x08006341
 80063ac:	08006485 	.word	0x08006485
 80063b0:	6833      	ldr	r3, [r6, #0]
 80063b2:	1d1a      	adds	r2, r3, #4
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6032      	str	r2, [r6, #0]
 80063b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063c0:	2301      	movs	r3, #1
 80063c2:	e09c      	b.n	80064fe <_printf_i+0x1e6>
 80063c4:	6833      	ldr	r3, [r6, #0]
 80063c6:	6820      	ldr	r0, [r4, #0]
 80063c8:	1d19      	adds	r1, r3, #4
 80063ca:	6031      	str	r1, [r6, #0]
 80063cc:	0606      	lsls	r6, r0, #24
 80063ce:	d501      	bpl.n	80063d4 <_printf_i+0xbc>
 80063d0:	681d      	ldr	r5, [r3, #0]
 80063d2:	e003      	b.n	80063dc <_printf_i+0xc4>
 80063d4:	0645      	lsls	r5, r0, #25
 80063d6:	d5fb      	bpl.n	80063d0 <_printf_i+0xb8>
 80063d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063dc:	2d00      	cmp	r5, #0
 80063de:	da03      	bge.n	80063e8 <_printf_i+0xd0>
 80063e0:	232d      	movs	r3, #45	@ 0x2d
 80063e2:	426d      	negs	r5, r5
 80063e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e8:	4858      	ldr	r0, [pc, #352]	@ (800654c <_printf_i+0x234>)
 80063ea:	230a      	movs	r3, #10
 80063ec:	e011      	b.n	8006412 <_printf_i+0xfa>
 80063ee:	6821      	ldr	r1, [r4, #0]
 80063f0:	6833      	ldr	r3, [r6, #0]
 80063f2:	0608      	lsls	r0, r1, #24
 80063f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80063f8:	d402      	bmi.n	8006400 <_printf_i+0xe8>
 80063fa:	0649      	lsls	r1, r1, #25
 80063fc:	bf48      	it	mi
 80063fe:	b2ad      	uxthmi	r5, r5
 8006400:	2f6f      	cmp	r7, #111	@ 0x6f
 8006402:	4852      	ldr	r0, [pc, #328]	@ (800654c <_printf_i+0x234>)
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	bf14      	ite	ne
 8006408:	230a      	movne	r3, #10
 800640a:	2308      	moveq	r3, #8
 800640c:	2100      	movs	r1, #0
 800640e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006412:	6866      	ldr	r6, [r4, #4]
 8006414:	60a6      	str	r6, [r4, #8]
 8006416:	2e00      	cmp	r6, #0
 8006418:	db05      	blt.n	8006426 <_printf_i+0x10e>
 800641a:	6821      	ldr	r1, [r4, #0]
 800641c:	432e      	orrs	r6, r5
 800641e:	f021 0104 	bic.w	r1, r1, #4
 8006422:	6021      	str	r1, [r4, #0]
 8006424:	d04b      	beq.n	80064be <_printf_i+0x1a6>
 8006426:	4616      	mov	r6, r2
 8006428:	fbb5 f1f3 	udiv	r1, r5, r3
 800642c:	fb03 5711 	mls	r7, r3, r1, r5
 8006430:	5dc7      	ldrb	r7, [r0, r7]
 8006432:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006436:	462f      	mov	r7, r5
 8006438:	42bb      	cmp	r3, r7
 800643a:	460d      	mov	r5, r1
 800643c:	d9f4      	bls.n	8006428 <_printf_i+0x110>
 800643e:	2b08      	cmp	r3, #8
 8006440:	d10b      	bne.n	800645a <_printf_i+0x142>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	07df      	lsls	r7, r3, #31
 8006446:	d508      	bpl.n	800645a <_printf_i+0x142>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	6861      	ldr	r1, [r4, #4]
 800644c:	4299      	cmp	r1, r3
 800644e:	bfde      	ittt	le
 8006450:	2330      	movle	r3, #48	@ 0x30
 8006452:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006456:	f106 36ff 	addle.w	r6, r6, #4294967295
 800645a:	1b92      	subs	r2, r2, r6
 800645c:	6122      	str	r2, [r4, #16]
 800645e:	f8cd a000 	str.w	sl, [sp]
 8006462:	464b      	mov	r3, r9
 8006464:	aa03      	add	r2, sp, #12
 8006466:	4621      	mov	r1, r4
 8006468:	4640      	mov	r0, r8
 800646a:	f7ff fee7 	bl	800623c <_printf_common>
 800646e:	3001      	adds	r0, #1
 8006470:	d14a      	bne.n	8006508 <_printf_i+0x1f0>
 8006472:	f04f 30ff 	mov.w	r0, #4294967295
 8006476:	b004      	add	sp, #16
 8006478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	f043 0320 	orr.w	r3, r3, #32
 8006482:	6023      	str	r3, [r4, #0]
 8006484:	4832      	ldr	r0, [pc, #200]	@ (8006550 <_printf_i+0x238>)
 8006486:	2778      	movs	r7, #120	@ 0x78
 8006488:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	6831      	ldr	r1, [r6, #0]
 8006490:	061f      	lsls	r7, r3, #24
 8006492:	f851 5b04 	ldr.w	r5, [r1], #4
 8006496:	d402      	bmi.n	800649e <_printf_i+0x186>
 8006498:	065f      	lsls	r7, r3, #25
 800649a:	bf48      	it	mi
 800649c:	b2ad      	uxthmi	r5, r5
 800649e:	6031      	str	r1, [r6, #0]
 80064a0:	07d9      	lsls	r1, r3, #31
 80064a2:	bf44      	itt	mi
 80064a4:	f043 0320 	orrmi.w	r3, r3, #32
 80064a8:	6023      	strmi	r3, [r4, #0]
 80064aa:	b11d      	cbz	r5, 80064b4 <_printf_i+0x19c>
 80064ac:	2310      	movs	r3, #16
 80064ae:	e7ad      	b.n	800640c <_printf_i+0xf4>
 80064b0:	4826      	ldr	r0, [pc, #152]	@ (800654c <_printf_i+0x234>)
 80064b2:	e7e9      	b.n	8006488 <_printf_i+0x170>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	f023 0320 	bic.w	r3, r3, #32
 80064ba:	6023      	str	r3, [r4, #0]
 80064bc:	e7f6      	b.n	80064ac <_printf_i+0x194>
 80064be:	4616      	mov	r6, r2
 80064c0:	e7bd      	b.n	800643e <_printf_i+0x126>
 80064c2:	6833      	ldr	r3, [r6, #0]
 80064c4:	6825      	ldr	r5, [r4, #0]
 80064c6:	6961      	ldr	r1, [r4, #20]
 80064c8:	1d18      	adds	r0, r3, #4
 80064ca:	6030      	str	r0, [r6, #0]
 80064cc:	062e      	lsls	r6, r5, #24
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	d501      	bpl.n	80064d6 <_printf_i+0x1be>
 80064d2:	6019      	str	r1, [r3, #0]
 80064d4:	e002      	b.n	80064dc <_printf_i+0x1c4>
 80064d6:	0668      	lsls	r0, r5, #25
 80064d8:	d5fb      	bpl.n	80064d2 <_printf_i+0x1ba>
 80064da:	8019      	strh	r1, [r3, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	4616      	mov	r6, r2
 80064e2:	e7bc      	b.n	800645e <_printf_i+0x146>
 80064e4:	6833      	ldr	r3, [r6, #0]
 80064e6:	1d1a      	adds	r2, r3, #4
 80064e8:	6032      	str	r2, [r6, #0]
 80064ea:	681e      	ldr	r6, [r3, #0]
 80064ec:	6862      	ldr	r2, [r4, #4]
 80064ee:	2100      	movs	r1, #0
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7f9 fe75 	bl	80001e0 <memchr>
 80064f6:	b108      	cbz	r0, 80064fc <_printf_i+0x1e4>
 80064f8:	1b80      	subs	r0, r0, r6
 80064fa:	6060      	str	r0, [r4, #4]
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	2300      	movs	r3, #0
 8006502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006506:	e7aa      	b.n	800645e <_printf_i+0x146>
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	4632      	mov	r2, r6
 800650c:	4649      	mov	r1, r9
 800650e:	4640      	mov	r0, r8
 8006510:	47d0      	blx	sl
 8006512:	3001      	adds	r0, #1
 8006514:	d0ad      	beq.n	8006472 <_printf_i+0x15a>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	079b      	lsls	r3, r3, #30
 800651a:	d413      	bmi.n	8006544 <_printf_i+0x22c>
 800651c:	68e0      	ldr	r0, [r4, #12]
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	4298      	cmp	r0, r3
 8006522:	bfb8      	it	lt
 8006524:	4618      	movlt	r0, r3
 8006526:	e7a6      	b.n	8006476 <_printf_i+0x15e>
 8006528:	2301      	movs	r3, #1
 800652a:	4632      	mov	r2, r6
 800652c:	4649      	mov	r1, r9
 800652e:	4640      	mov	r0, r8
 8006530:	47d0      	blx	sl
 8006532:	3001      	adds	r0, #1
 8006534:	d09d      	beq.n	8006472 <_printf_i+0x15a>
 8006536:	3501      	adds	r5, #1
 8006538:	68e3      	ldr	r3, [r4, #12]
 800653a:	9903      	ldr	r1, [sp, #12]
 800653c:	1a5b      	subs	r3, r3, r1
 800653e:	42ab      	cmp	r3, r5
 8006540:	dcf2      	bgt.n	8006528 <_printf_i+0x210>
 8006542:	e7eb      	b.n	800651c <_printf_i+0x204>
 8006544:	2500      	movs	r5, #0
 8006546:	f104 0619 	add.w	r6, r4, #25
 800654a:	e7f5      	b.n	8006538 <_printf_i+0x220>
 800654c:	080066c1 	.word	0x080066c1
 8006550:	080066d2 	.word	0x080066d2

08006554 <memmove>:
 8006554:	4288      	cmp	r0, r1
 8006556:	b510      	push	{r4, lr}
 8006558:	eb01 0402 	add.w	r4, r1, r2
 800655c:	d902      	bls.n	8006564 <memmove+0x10>
 800655e:	4284      	cmp	r4, r0
 8006560:	4623      	mov	r3, r4
 8006562:	d807      	bhi.n	8006574 <memmove+0x20>
 8006564:	1e43      	subs	r3, r0, #1
 8006566:	42a1      	cmp	r1, r4
 8006568:	d008      	beq.n	800657c <memmove+0x28>
 800656a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800656e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006572:	e7f8      	b.n	8006566 <memmove+0x12>
 8006574:	4402      	add	r2, r0
 8006576:	4601      	mov	r1, r0
 8006578:	428a      	cmp	r2, r1
 800657a:	d100      	bne.n	800657e <memmove+0x2a>
 800657c:	bd10      	pop	{r4, pc}
 800657e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006586:	e7f7      	b.n	8006578 <memmove+0x24>

08006588 <_sbrk_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	@ (80065a4 <_sbrk_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa fce2 	bl	8000f5c <_sbrk>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_sbrk_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_sbrk_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	200002f0 	.word	0x200002f0

080065a8 <memcpy>:
 80065a8:	440a      	add	r2, r1
 80065aa:	4291      	cmp	r1, r2
 80065ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b0:	d100      	bne.n	80065b4 <memcpy+0xc>
 80065b2:	4770      	bx	lr
 80065b4:	b510      	push	{r4, lr}
 80065b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065be:	4291      	cmp	r1, r2
 80065c0:	d1f9      	bne.n	80065b6 <memcpy+0xe>
 80065c2:	bd10      	pop	{r4, pc}

080065c4 <_realloc_r>:
 80065c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c8:	4607      	mov	r7, r0
 80065ca:	4614      	mov	r4, r2
 80065cc:	460d      	mov	r5, r1
 80065ce:	b921      	cbnz	r1, 80065da <_realloc_r+0x16>
 80065d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	4611      	mov	r1, r2
 80065d6:	f7ff bc4d 	b.w	8005e74 <_malloc_r>
 80065da:	b92a      	cbnz	r2, 80065e8 <_realloc_r+0x24>
 80065dc:	f7ff fbde 	bl	8005d9c <_free_r>
 80065e0:	4625      	mov	r5, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e8:	f000 f81a 	bl	8006620 <_malloc_usable_size_r>
 80065ec:	4284      	cmp	r4, r0
 80065ee:	4606      	mov	r6, r0
 80065f0:	d802      	bhi.n	80065f8 <_realloc_r+0x34>
 80065f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065f6:	d8f4      	bhi.n	80065e2 <_realloc_r+0x1e>
 80065f8:	4621      	mov	r1, r4
 80065fa:	4638      	mov	r0, r7
 80065fc:	f7ff fc3a 	bl	8005e74 <_malloc_r>
 8006600:	4680      	mov	r8, r0
 8006602:	b908      	cbnz	r0, 8006608 <_realloc_r+0x44>
 8006604:	4645      	mov	r5, r8
 8006606:	e7ec      	b.n	80065e2 <_realloc_r+0x1e>
 8006608:	42b4      	cmp	r4, r6
 800660a:	4622      	mov	r2, r4
 800660c:	4629      	mov	r1, r5
 800660e:	bf28      	it	cs
 8006610:	4632      	movcs	r2, r6
 8006612:	f7ff ffc9 	bl	80065a8 <memcpy>
 8006616:	4629      	mov	r1, r5
 8006618:	4638      	mov	r0, r7
 800661a:	f7ff fbbf 	bl	8005d9c <_free_r>
 800661e:	e7f1      	b.n	8006604 <_realloc_r+0x40>

08006620 <_malloc_usable_size_r>:
 8006620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006624:	1f18      	subs	r0, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfbc      	itt	lt
 800662a:	580b      	ldrlt	r3, [r1, r0]
 800662c:	18c0      	addlt	r0, r0, r3
 800662e:	4770      	bx	lr

08006630 <_init>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr

0800663c <_fini>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr
