
STM32_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003988  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003b10  08003b10  00004b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008be6  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001516  00000000  00000000  0000dc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0000f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000771  00000000  00000000  0000fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5c7  00000000  00000000  00010249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b01f  00000000  00000000  0002c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae706  00000000  00000000  0003782f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e5f35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000290c  00000000  00000000  000e5f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000e8884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003af8 	.word	0x08003af8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003af8 	.word	0x08003af8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <zatrzymajSilniki>:

/*=============================================================================
  Zatrzymanie silników (0% duty)
=============================================================================*/
void zatrzymajSilniki(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <zatrzymajSilniki+0x20>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <zatrzymajSilniki+0x20>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000028 	.word	0x20000028

080007f8 <jedzNaprzod>:
/*=============================================================================
  Jazda do przodu: oba silniki do przodu + 80% PWM
=============================================================================*/
void jedzNaprzod(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  uint32_t predkosc = (htim3.Init.Period+1)*0.3;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <jedzNaprzod+0x88>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff4b 	bl	80006a0 <__aeabi_ui2d>
 800080a:	a31b      	add	r3, pc, #108	@ (adr r3, 8000878 <jedzNaprzod+0x80>)
 800080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000810:	f7ff fcda 	bl	80001c8 <__aeabi_dmul>
 8000814:	4602      	mov	r2, r0
 8000816:	460b      	mov	r3, r1
 8000818:	4610      	mov	r0, r2
 800081a:	4619      	mov	r1, r3
 800081c:	f7ff ffba 	bl	8000794 <__aeabi_d2uiz>
 8000820:	4603      	mov	r3, r0
 8000822:	607b      	str	r3, [r7, #4]
  // ustawienie kierunku
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4816      	ldr	r0, [pc, #88]	@ (8000884 <jedzNaprzod+0x8c>)
 800082a:	f000 fe73 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2102      	movs	r1, #2
 8000832:	4814      	ldr	r0, [pc, #80]	@ (8000884 <jedzNaprzod+0x8c>)
 8000834:	f000 fe6e 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800083e:	4811      	ldr	r0, [pc, #68]	@ (8000884 <jedzNaprzod+0x8c>)
 8000840:	f000 fe68 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <jedzNaprzod+0x8c>)
 800084c:	f000 fe62 	bl	8001514 <HAL_GPIO_WritePin>
  // ustawienie prędkości
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, predkosc);
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <jedzNaprzod+0x88>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, predkosc);
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <jedzNaprzod+0x88>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	639a      	str	r2, [r3, #56]	@ 0x38
  // jazda
  HAL_Delay(CZAS_JAZDY);
 8000860:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000864:	f000 fbba 	bl	8000fdc <HAL_Delay>
  zatrzymajSilniki();
 8000868:	f7ff ffb4 	bl	80007d4 <zatrzymajSilniki>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	f3af 8000 	nop.w
 8000878:	33333333 	.word	0x33333333
 800087c:	3fd33333 	.word	0x3fd33333
 8000880:	20000028 	.word	0x20000028
 8000884:	48000400 	.word	0x48000400

08000888 <jedzDoTylu>:

/*=============================================================================
  Jazda do tyłu: oba silniki do tyłu + 80% PWM
=============================================================================*/
void jedzDoTylu(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  uint32_t predkosc = (htim3.Init.Period + 1)*0.3;
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <jedzDoTylu+0x88>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff03 	bl	80006a0 <__aeabi_ui2d>
 800089a:	a31b      	add	r3, pc, #108	@ (adr r3, 8000908 <jedzDoTylu+0x80>)
 800089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a0:	f7ff fc92 	bl	80001c8 <__aeabi_dmul>
 80008a4:	4602      	mov	r2, r0
 80008a6:	460b      	mov	r3, r1
 80008a8:	4610      	mov	r0, r2
 80008aa:	4619      	mov	r1, r3
 80008ac:	f7ff ff72 	bl	8000794 <__aeabi_d2uiz>
 80008b0:	4603      	mov	r3, r0
 80008b2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2101      	movs	r1, #1
 80008b8:	4816      	ldr	r0, [pc, #88]	@ (8000914 <jedzDoTylu+0x8c>)
 80008ba:	f000 fe2b 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	2102      	movs	r1, #2
 80008c2:	4814      	ldr	r0, [pc, #80]	@ (8000914 <jedzDoTylu+0x8c>)
 80008c4:	f000 fe26 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ce:	4811      	ldr	r0, [pc, #68]	@ (8000914 <jedzDoTylu+0x8c>)
 80008d0:	f000 fe20 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <jedzDoTylu+0x8c>)
 80008dc:	f000 fe1a 	bl	8001514 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, predkosc);
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <jedzDoTylu+0x88>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, predkosc);
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <jedzDoTylu+0x88>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(CZAS_JAZDY);
 80008f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008f4:	f000 fb72 	bl	8000fdc <HAL_Delay>
  zatrzymajSilniki();
 80008f8:	f7ff ff6c 	bl	80007d4 <zatrzymajSilniki>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	f3af 8000 	nop.w
 8000908:	33333333 	.word	0x33333333
 800090c:	3fd33333 	.word	0x3fd33333
 8000910:	20000028 	.word	0x20000028
 8000914:	48000400 	.word	0x48000400

08000918 <skrecWLewo>:

/*=============================================================================
  Obrót w lewo o 90°: lewy silnik do tyłu, prawy do przodu
=============================================================================*/
void skrecWLewo(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  uint32_t predkosc = (htim3.Init.Period + 1)*0.3;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <skrecWLewo+0x88>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	3301      	adds	r3, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff febb 	bl	80006a0 <__aeabi_ui2d>
 800092a:	a31b      	add	r3, pc, #108	@ (adr r3, 8000998 <skrecWLewo+0x80>)
 800092c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000930:	f7ff fc4a 	bl	80001c8 <__aeabi_dmul>
 8000934:	4602      	mov	r2, r0
 8000936:	460b      	mov	r3, r1
 8000938:	4610      	mov	r0, r2
 800093a:	4619      	mov	r1, r3
 800093c:	f7ff ff2a 	bl	8000794 <__aeabi_d2uiz>
 8000940:	4603      	mov	r3, r0
 8000942:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <skrecWLewo+0x8c>)
 800094a:	f000 fde3 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2102      	movs	r1, #2
 8000952:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <skrecWLewo+0x8c>)
 8000954:	f000 fdde 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800095e:	4811      	ldr	r0, [pc, #68]	@ (80009a4 <skrecWLewo+0x8c>)
 8000960:	f000 fdd8 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <skrecWLewo+0x8c>)
 800096c:	f000 fdd2 	bl	8001514 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, predkosc);
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <skrecWLewo+0x88>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, predkosc);
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <skrecWLewo+0x88>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(CZAS_OBROTU_90);
 8000980:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000984:	f000 fb2a 	bl	8000fdc <HAL_Delay>
  zatrzymajSilniki();
 8000988:	f7ff ff24 	bl	80007d4 <zatrzymajSilniki>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	f3af 8000 	nop.w
 8000998:	33333333 	.word	0x33333333
 800099c:	3fd33333 	.word	0x3fd33333
 80009a0:	20000028 	.word	0x20000028
 80009a4:	48000400 	.word	0x48000400

080009a8 <skrecWPrawo>:

/*=============================================================================
  Obrót w prawo o 90°: lewy silnik do przodu, prawy do tyłu
=============================================================================*/
void skrecWPrawo(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  uint32_t predkosc = (htim3.Init.Period + 1)*0.3;
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <skrecWPrawo+0x88>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fe73 	bl	80006a0 <__aeabi_ui2d>
 80009ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8000a28 <skrecWPrawo+0x80>)
 80009bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c0:	f7ff fc02 	bl	80001c8 <__aeabi_dmul>
 80009c4:	4602      	mov	r2, r0
 80009c6:	460b      	mov	r3, r1
 80009c8:	4610      	mov	r0, r2
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff fee2 	bl	8000794 <__aeabi_d2uiz>
 80009d0:	4603      	mov	r3, r0
 80009d2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <skrecWPrawo+0x8c>)
 80009da:	f000 fd9b 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 80009de:	2201      	movs	r2, #1
 80009e0:	2102      	movs	r1, #2
 80009e2:	4814      	ldr	r0, [pc, #80]	@ (8000a34 <skrecWPrawo+0x8c>)
 80009e4:	f000 fd96 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ee:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <skrecWPrawo+0x8c>)
 80009f0:	f000 fd90 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <skrecWPrawo+0x8c>)
 80009fc:	f000 fd8a 	bl	8001514 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, predkosc);
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <skrecWPrawo+0x88>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, predkosc);
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <skrecWPrawo+0x88>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(CZAS_OBROTU_90);
 8000a10:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a14:	f000 fae2 	bl	8000fdc <HAL_Delay>
  zatrzymajSilniki();
 8000a18:	f7ff fedc 	bl	80007d4 <zatrzymajSilniki>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	f3af 8000 	nop.w
 8000a28:	33333333 	.word	0x33333333
 8000a2c:	3fd33333 	.word	0x3fd33333
 8000a30:	20000028 	.word	0x20000028
 8000a34:	48000400 	.word	0x48000400

08000a38 <zatrzymajRobota>:

void zatrzymajRobota(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  // Najpierw zatrzymaj PWM na obu kanałach
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4812      	ldr	r0, [pc, #72]	@ (8000a8c <zatrzymajRobota+0x54>)
 8000a42:	f000 fd67 	bl	8001514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <zatrzymajRobota+0x54>)
 8000a4c:	f000 fd62 	bl	8001514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <zatrzymajRobota+0x54>)
 8000a58:	f000 fd5c 	bl	8001514 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a62:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <zatrzymajRobota+0x54>)
 8000a64:	f000 fd56 	bl	8001514 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <zatrzymajRobota+0x58>)
 8000a6c:	f002 f8f2 	bl	8002c54 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000a70:	2104      	movs	r1, #4
 8000a72:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <zatrzymajRobota+0x58>)
 8000a74:	f002 f8ee 	bl	8002c54 <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <zatrzymajRobota+0x58>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <zatrzymajRobota+0x58>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	20000028 	.word	0x20000028

08000a94 <sekwencja>:
  Wykonanie zadanej sekwencji ruchów:
  przód → prawo → przód → lewo → przód → tył → prawo → przód → lewo → tył
=============================================================================*/

void sekwencja(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4810      	ldr	r0, [pc, #64]	@ (8000adc <sekwencja+0x48>)
 8000a9c:	f001 ffda 	bl	8002a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480e      	ldr	r0, [pc, #56]	@ (8000adc <sekwencja+0x48>)
 8000aa4:	f001 ffd6 	bl	8002a54 <HAL_TIM_PWM_Start>
  jedzNaprzod();
 8000aa8:	f7ff fea6 	bl	80007f8 <jedzNaprzod>
  skrecWLewo();
 8000aac:	f7ff ff34 	bl	8000918 <skrecWLewo>
  jedzNaprzod();
 8000ab0:	f7ff fea2 	bl	80007f8 <jedzNaprzod>
  skrecWPrawo();
 8000ab4:	f7ff ff78 	bl	80009a8 <skrecWPrawo>
  jedzDoTylu();
 8000ab8:	f7ff fee6 	bl	8000888 <jedzDoTylu>
  jedzNaprzod();
 8000abc:	f7ff fe9c 	bl	80007f8 <jedzNaprzod>
  skrecWPrawo();
 8000ac0:	f7ff ff72 	bl	80009a8 <skrecWPrawo>
  skrecWLewo();
 8000ac4:	f7ff ff28 	bl	8000918 <skrecWLewo>
  jedzDoTylu();
 8000ac8:	f7ff fede 	bl	8000888 <jedzDoTylu>
  skrecWPrawo();
 8000acc:	f7ff ff6c 	bl	80009a8 <skrecWPrawo>
  jedzNaprzod();
 8000ad0:	f7ff fe92 	bl	80007f8 <jedzNaprzod>
  zatrzymajRobota();
 8000ad4:	f7ff ffb0 	bl	8000a38 <zatrzymajRobota>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000028 	.word	0x20000028

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fa13 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f81a 	bl	8000b22 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 f8d5 	bl	8000c9c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000af2:	f000 f851 	bl	8000b98 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t guzikoSprawdz = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]
  uint8_t guzikoSprawdzPrzed = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	71fb      	strb	r3, [r7, #7]
  while (1){
	  guzikoSprawdz = HAL_GPIO_ReadPin(p_GPIO_Port, p_Pin);
 8000afe:	2101      	movs	r1, #1
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f000 fcee 	bl	80014e4 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71bb      	strb	r3, [r7, #6]
	    if(guzikoSprawdz == 1 && guzikoSprawdzPrzed == 0){
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d104      	bne.n	8000b1c <main+0x3c>
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <main+0x3c>
	    	sekwencja();
 8000b18:	f7ff ffbc 	bl	8000a94 <sekwencja>
	    }
	    guzikoSprawdzPrzed = guzikoSprawdz;
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	71fb      	strb	r3, [r7, #7]
	  guzikoSprawdz = HAL_GPIO_ReadPin(p_GPIO_Port, p_Pin);
 8000b20:	e7ed      	b.n	8000afe <main+0x1e>

08000b22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b090      	sub	sp, #64	@ 0x40
 8000b26:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b28:	f107 0318 	add.w	r3, r7, #24
 8000b2c:	2228      	movs	r2, #40	@ 0x28
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 ffb5 	bl	8003aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fcf3 	bl	8001544 <HAL_RCC_OscConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b64:	f000 f8e8 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
 8000b6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fced 	bl	8002560 <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b8c:	f000 f8d4 	bl	8000d38 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3740      	adds	r7, #64	@ 0x40
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	@ 0x38
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bca:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000bcc:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <MX_TIM3_Init+0x100>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000bde:	2263      	movs	r2, #99	@ 0x63
 8000be0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bee:	4829      	ldr	r0, [pc, #164]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000bf0:	f001 fe78 	bl	80028e4 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bfa:	f000 f89d 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4822      	ldr	r0, [pc, #136]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000c0c:	f002 f9cc 	bl	8002fa8 <HAL_TIM_ConfigClockSource>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c16:	f000 f88f 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c1a:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000c1c:	f001 feb9 	bl	8002992 <HAL_TIM_PWM_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c26:	f000 f887 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4816      	ldr	r0, [pc, #88]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000c3a:	f002 feb1 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c44:	f000 f878 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	@ 0x60
 8000c4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000c60:	f002 f88e 	bl	8002d80 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c6a:	f000 f865 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2204      	movs	r2, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4807      	ldr	r0, [pc, #28]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000c76:	f002 f883 	bl	8002d80 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c80:	f000 f85a 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <MX_TIM3_Init+0xfc>)
 8000c86:	f000 f8a1 	bl	8000dcc <HAL_TIM_MspPostInit>

}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	@ 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000028 	.word	0x20000028
 8000c98:	40000400 	.word	0x40000400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <MX_GPIO_Init+0x94>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d30 <MX_GPIO_Init+0x94>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <MX_GPIO_Init+0x94>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <MX_GPIO_Init+0x94>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a18      	ldr	r2, [pc, #96]	@ (8000d30 <MX_GPIO_Init+0x94>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <MX_GPIO_Init+0x94>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f640 4103 	movw	r1, #3075	@ 0xc03
 8000ce8:	4812      	ldr	r0, [pc, #72]	@ (8000d34 <MX_GPIO_Init+0x98>)
 8000cea:	f000 fc13 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : p_Pin */
  GPIO_InitStruct.Pin = p_Pin;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(p_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d04:	f000 fa74 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8000d08:	f640 4303 	movw	r3, #3075	@ 0xc03
 8000d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <MX_GPIO_Init+0x98>)
 8000d22:	f000 fa65 	bl	80011f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000400 	.word	0x48000400

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x8>

08000d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6193      	str	r3, [r2, #24]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x38>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10b      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40000400 	.word	0x40000400
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a11      	ldr	r2, [pc, #68]	@ (8000e30 <HAL_TIM_MspPostInit+0x64>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d11c      	bne.n	8000e28 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_TIM_MspPostInit+0x68>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <HAL_TIM_MspPostInit+0x68>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	6153      	str	r3, [r2, #20]
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_TIM_MspPostInit+0x68>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8000e06:	23c0      	movs	r3, #192	@ 0xc0
 8000e08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f000 f9e4 	bl	80011f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40000400 	.word	0x40000400
 8000e34:	40021000 	.word	0x40021000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8e:	f000 f885 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f002 fde1 	bl	8003ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eee:	f7ff fdf7 	bl	8000ae0 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f00:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 8000f04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f08:	20000078 	.word	0x20000078

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_Init+0x28>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_Init+0x28>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f931 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff ff0a 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f93b 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f911 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000074 	.word	0x20000074

08000fc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000074 	.word	0x20000074

08000fdc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff47 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff5c 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffb0 	bl	8001144 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	e154      	b.n	80014aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8146 	beq.w	80014a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d005      	beq.n	8001230 <HAL_GPIO_Init+0x40>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d130      	bne.n	8001292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 0201 	and.w	r2, r3, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b03      	cmp	r3, #3
 800129c:	d017      	beq.n	80012ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d123      	bne.n	8001322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0203 	and.w	r2, r3, #3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80a0 	beq.w	80014a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4b58      	ldr	r3, [pc, #352]	@ (80014c8 <HAL_GPIO_Init+0x2d8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a57      	ldr	r2, [pc, #348]	@ (80014c8 <HAL_GPIO_Init+0x2d8>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b55      	ldr	r3, [pc, #340]	@ (80014c8 <HAL_GPIO_Init+0x2d8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137c:	4a53      	ldr	r2, [pc, #332]	@ (80014cc <HAL_GPIO_Init+0x2dc>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013a6:	d019      	beq.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a49      	ldr	r2, [pc, #292]	@ (80014d0 <HAL_GPIO_Init+0x2e0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d013      	beq.n	80013d8 <HAL_GPIO_Init+0x1e8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a48      	ldr	r2, [pc, #288]	@ (80014d4 <HAL_GPIO_Init+0x2e4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00d      	beq.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a47      	ldr	r2, [pc, #284]	@ (80014d8 <HAL_GPIO_Init+0x2e8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d007      	beq.n	80013d0 <HAL_GPIO_Init+0x1e0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a46      	ldr	r2, [pc, #280]	@ (80014dc <HAL_GPIO_Init+0x2ec>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d101      	bne.n	80013cc <HAL_GPIO_Init+0x1dc>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e008      	b.n	80013de <HAL_GPIO_Init+0x1ee>
 80013cc:	2305      	movs	r3, #5
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x1ee>
 80013d0:	2303      	movs	r3, #3
 80013d2:	e004      	b.n	80013de <HAL_GPIO_Init+0x1ee>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e002      	b.n	80013de <HAL_GPIO_Init+0x1ee>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_GPIO_Init+0x1ee>
 80013dc:	2300      	movs	r3, #0
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	f002 0203 	and.w	r2, r2, #3
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4093      	lsls	r3, r2
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ee:	4937      	ldr	r1, [pc, #220]	@ (80014cc <HAL_GPIO_Init+0x2dc>)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fc:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001420:	4a2f      	ldr	r2, [pc, #188]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001426:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800144a:	4a25      	ldr	r2, [pc, #148]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001450:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001474:	4a1a      	ldr	r2, [pc, #104]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800149e:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f47f aea3 	bne.w	8001200 <HAL_GPIO_Init+0x10>
  }
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000
 80014d0:	48000400 	.word	0x48000400
 80014d4:	48000800 	.word	0x48000800
 80014d8:	48000c00 	.word	0x48000c00
 80014dc:	48001000 	.word	0x48001000
 80014e0:	40010400 	.word	0x40010400

080014e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e001      	b.n	8001506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800154a:	af00      	add	r7, sp, #0
 800154c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001550:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001554:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	f000 bff4 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 816d 	beq.w	800185a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001580:	4bb4      	ldr	r3, [pc, #720]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800158c:	4bb1      	ldr	r3, [pc, #708]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d157      	bne.n	8001648 <HAL_RCC_OscConfig+0x104>
 8001598:	4bae      	ldr	r3, [pc, #696]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a4:	d150      	bne.n	8001648 <HAL_RCC_OscConfig+0x104>
 80015a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80015c6:	d802      	bhi.n	80015ce <HAL_RCC_OscConfig+0x8a>
 80015c8:	4ba2      	ldr	r3, [pc, #648]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0xb6>
 80015ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015d2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80015e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015e6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80015ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80015f6:	4b97      	ldr	r3, [pc, #604]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015fe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001602:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001606:	fa92 f2a2 	rbit	r2, r2
 800160a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800160e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001612:	fab2 f282 	clz	r2, r2
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f002 021f 	and.w	r2, r2, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8114 	beq.w	8001858 <HAL_RCC_OscConfig+0x314>
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f040 810b 	bne.w	8001858 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f000 bf85 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x124>
 800165a:	4b7e      	ldr	r3, [pc, #504]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7d      	ldr	r2, [pc, #500]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e036      	b.n	80016d6 <HAL_RCC_OscConfig+0x192>
 8001668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x14e>
 8001678:	4b76      	ldr	r3, [pc, #472]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a75      	ldr	r2, [pc, #468]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a72      	ldr	r2, [pc, #456]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e021      	b.n	80016d6 <HAL_RCC_OscConfig+0x192>
 8001692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001696:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x17a>
 80016a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b68      	ldr	r3, [pc, #416]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a67      	ldr	r2, [pc, #412]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0x192>
 80016be:	4b65      	ldr	r3, [pc, #404]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a64      	ldr	r2, [pc, #400]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b62      	ldr	r3, [pc, #392]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a61      	ldr	r2, [pc, #388]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	f023 020f 	bic.w	r2, r3, #15
 80016de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	495a      	ldr	r1, [pc, #360]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d054      	beq.n	80017aa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fc60 	bl	8000fc4 <HAL_GetTick>
 8001704:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170a:	f7ff fc5b 	bl	8000fc4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d902      	bls.n	8001720 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	f000 bf19 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
 8001720:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001724:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001734:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001740:	d802      	bhi.n	8001748 <HAL_RCC_OscConfig+0x204>
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	e015      	b.n	8001774 <HAL_RCC_OscConfig+0x230>
 8001748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800174c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800175c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001760:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001764:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001770:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001778:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800177c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001780:	fa92 f2a2 	rbit	r2, r2
 8001784:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001788:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800178c:	fab2 f282 	clz	r2, r2
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f002 021f 	and.w	r2, r2, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0b0      	beq.n	800170a <HAL_RCC_OscConfig+0x1c6>
 80017a8:	e057      	b.n	800185a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fc0b 	bl	8000fc4 <HAL_GetTick>
 80017ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc06 	bl	8000fc4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b64      	cmp	r3, #100	@ 0x64
 80017c2:	d902      	bls.n	80017ca <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f000 bec4 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
 80017ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80017de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017ea:	d802      	bhi.n	80017f2 <HAL_RCC_OscConfig+0x2ae>
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x2da>
 80017f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017f6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001806:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800180a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800180e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_RCC_OscConfig+0x310>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001822:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001826:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800182a:	fa92 f2a2 	rbit	r2, r2
 800182e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001832:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f042 0220 	orr.w	r2, r2, #32
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f002 021f 	and.w	r2, r2, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1b0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x270>
 8001852:	e002      	b.n	800185a <HAL_RCC_OscConfig+0x316>
 8001854:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 816c 	beq.w	8001b48 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001870:	4bcc      	ldr	r3, [pc, #816]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00b      	beq.n	8001894 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800187c:	4bc9      	ldr	r3, [pc, #804]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d16d      	bne.n	8001964 <HAL_RCC_OscConfig+0x420>
 8001888:	4bc6      	ldr	r3, [pc, #792]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d167      	bne.n	8001964 <HAL_RCC_OscConfig+0x420>
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80018a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80018b2:	d802      	bhi.n	80018ba <HAL_RCC_OscConfig+0x376>
 80018b4:	4bbb      	ldr	r3, [pc, #748]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	e013      	b.n	80018e2 <HAL_RCC_OscConfig+0x39e>
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80018d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80018de:	4bb1      	ldr	r3, [pc, #708]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	2202      	movs	r2, #2
 80018e4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80018e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80018ec:	fa92 f2a2 	rbit	r2, r2
 80018f0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80018f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80018f8:	fab2 f282 	clz	r2, r2
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	f042 0220 	orr.w	r2, r2, #32
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f002 021f 	and.w	r2, r2, #31
 8001908:	2101      	movs	r1, #1
 800190a:	fa01 f202 	lsl.w	r2, r1, r2
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <HAL_RCC_OscConfig+0x3e6>
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d002      	beq.n	800192a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f000 be14 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	21f8      	movs	r1, #248	@ 0xf8
 8001940:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001948:	fa91 f1a1 	rbit	r1, r1
 800194c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001950:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001954:	fab1 f181 	clz	r1, r1
 8001958:	b2c9      	uxtb	r1, r1
 800195a:	408b      	lsls	r3, r1
 800195c:	4991      	ldr	r1, [pc, #580]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	e0f1      	b.n	8001b48 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001968:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8083 	beq.w	8001a7c <HAL_RCC_OscConfig+0x538>
 8001976:	2301      	movs	r3, #1
 8001978:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001988:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001996:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	2301      	movs	r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb0f 	bl	8000fc4 <HAL_GetTick>
 80019a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff fb0a 	bl	8000fc4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bdc8 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80019d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e0:	d802      	bhi.n	80019e8 <HAL_RCC_OscConfig+0x4a4>
 80019e2:	4b70      	ldr	r3, [pc, #448]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	e013      	b.n	8001a10 <HAL_RCC_OscConfig+0x4cc>
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001a00:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001a0c:	4b65      	ldr	r3, [pc, #404]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	2202      	movs	r2, #2
 8001a12:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001a16:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001a1a:	fa92 f2a2 	rbit	r2, r2
 8001a1e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001a22:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001a26:	fab2 f282 	clz	r2, r2
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f042 0220 	orr.w	r2, r2, #32
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f002 021f 	and.w	r2, r2, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0b4      	beq.n	80019ac <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b58      	ldr	r3, [pc, #352]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	21f8      	movs	r1, #248	@ 0xf8
 8001a58:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001a60:	fa91 f1a1 	rbit	r1, r1
 8001a64:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001a68:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001a6c:	fab1 f181 	clz	r1, r1
 8001a70:	b2c9      	uxtb	r1, r1
 8001a72:	408b      	lsls	r3, r1
 8001a74:	494b      	ldr	r1, [pc, #300]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
 8001a7a:	e065      	b.n	8001b48 <HAL_RCC_OscConfig+0x604>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001a8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa8c 	bl	8000fc4 <HAL_GetTick>
 8001aac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fa87 	bl	8000fc4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d902      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f000 bd45 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ae6:	d802      	bhi.n	8001aee <HAL_RCC_OscConfig+0x5aa>
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	e013      	b.n	8001b16 <HAL_RCC_OscConfig+0x5d2>
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_RCC_OscConfig+0x660>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	2202      	movs	r2, #2
 8001b18:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001b1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b20:	fa92 f2a2 	rbit	r2, r2
 8001b24:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001b28:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001b2c:	fab2 f282 	clz	r2, r2
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f002 021f 	and.w	r2, r2, #31
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1b4      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8115 	beq.w	8001d88 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d07e      	beq.n	8001c6c <HAL_RCC_OscConfig+0x728>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_RCC_OscConfig+0x664>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	461a      	mov	r2, r3
 8001b94:	2301      	movs	r3, #1
 8001b96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff fa14 	bl	8000fc4 <HAL_GetTick>
 8001b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba0:	e00f      	b.n	8001bc2 <HAL_RCC_OscConfig+0x67e>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fa0a 	bl	8000fc4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d902      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f000 bcc8 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bdc:	2202      	movs	r2, #2
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c00:	2202      	movs	r2, #2
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1c:	4bb0      	ldr	r3, [pc, #704]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c28:	2102      	movs	r1, #2
 8001c2a:	6019      	str	r1, [r3, #0]
 8001c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f1a3 	rbit	r1, r3
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c42:	6019      	str	r1, [r3, #0]
  return result;
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0a0      	beq.n	8001bac <HAL_RCC_OscConfig+0x668>
 8001c6a:	e08d      	b.n	8001d88 <HAL_RCC_OscConfig+0x844>
 8001c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c8e:	601a      	str	r2, [r3, #0]
  return result;
 8001c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b90      	ldr	r3, [pc, #576]	@ (8001ee4 <HAL_RCC_OscConfig+0x9a0>)
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2300      	movs	r3, #0
 8001cac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff f989 	bl	8000fc4 <HAL_GetTick>
 8001cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff f984 	bl	8000fc4 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d902      	bls.n	8001cce <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f000 bc42 	b.w	8002552 <HAL_RCC_OscConfig+0x100e>
 8001cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3a:	4b69      	ldr	r3, [pc, #420]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d46:	2102      	movs	r1, #2
 8001d48:	6019      	str	r1, [r3, #0]
 8001d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f1a3 	rbit	r1, r3
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d60:	6019      	str	r1, [r3, #0]
  return result;
 8001d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d197      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 819e 	beq.w	80020da <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da4:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d116      	bne.n	8001dde <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	61d3      	str	r3, [r2, #28]
 8001dbc:	4b48      	ldr	r3, [pc, #288]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001dd6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b42      	ldr	r3, [pc, #264]	@ (8001ee8 <HAL_RCC_OscConfig+0x9a4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d11a      	bne.n	8001e20 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee8 <HAL_RCC_OscConfig+0x9a4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a3e      	ldr	r2, [pc, #248]	@ (8001ee8 <HAL_RCC_OscConfig+0x9a4>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df6:	f7ff f8e5 	bl	8000fc4 <HAL_GetTick>
 8001dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	e009      	b.n	8001e14 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e00:	f7ff f8e0 	bl	8000fc4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	@ 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e39e      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <HAL_RCC_OscConfig+0x9a4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ef      	beq.n	8001e00 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x8fa>
 8001e30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e035      	b.n	8001eaa <HAL_RCC_OscConfig+0x966>
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x924>
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a23      	ldr	r2, [pc, #140]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	e020      	b.n	8001eaa <HAL_RCC_OscConfig+0x966>
 8001e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x94e>
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a15      	ldr	r2, [pc, #84]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x966>
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <HAL_RCC_OscConfig+0x99c>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f882 	bl	8000fc4 <HAL_GetTick>
 8001ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	e012      	b.n	8001eec <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff f87d 	bl	8000fc4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e339      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	10908120 	.word	0x10908120
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f18:	2202      	movs	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f32:	601a      	str	r2, [r3, #0]
  return result;
 8001f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f38:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0xa10>
 8001f4e:	4b98      	ldr	r3, [pc, #608]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	e013      	b.n	8001f7c <HAL_RCC_OscConfig+0xa38>
 8001f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f64:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	fa93 f2a3 	rbit	r2, r3
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	4b8d      	ldr	r3, [pc, #564]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f84:	2102      	movs	r1, #2
 8001f86:	6011      	str	r1, [r2, #0]
 8001f88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f8c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	fa92 f1a2 	rbit	r1, r2
 8001f96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f9a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f9e:	6011      	str	r1, [r2, #0]
  return result;
 8001fa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fa4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f002 021f 	and.w	r2, r2, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f43f af7f 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x982>
 8001fc8:	e07d      	b.n	80020c6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fffb 	bl	8000fc4 <HAL_GetTick>
 8001fce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fff6 	bl	8000fc4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e2b2      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
 8001fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002014:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f2a3 	rbit	r2, r3
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002032:	601a      	str	r2, [r3, #0]
  return result;
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800203c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0xb10>
 800204e:	4b58      	ldr	r3, [pc, #352]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	e013      	b.n	800207c <HAL_RCC_OscConfig+0xb38>
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800205c:	2202      	movs	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002064:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4b4d      	ldr	r3, [pc, #308]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002080:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002084:	2102      	movs	r1, #2
 8002086:	6011      	str	r1, [r2, #0]
 8002088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800208c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	fa92 f1a2 	rbit	r1, r2
 8002096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800209a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800209e:	6011      	str	r1, [r2, #0]
  return result;
 80020a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f002 021f 	and.w	r2, r2, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d186      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020c6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b38      	ldr	r3, [pc, #224]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a37      	ldr	r2, [pc, #220]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8232 	beq.w	8002550 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	4b30      	ldr	r3, [pc, #192]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	f000 8201 	beq.w	80024fc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	2b02      	cmp	r3, #2
 8002108:	f040 8157 	bne.w	80023ba <HAL_RCC_OscConfig+0xe76>
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002114:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002130:	601a      	str	r2, [r3, #0]
  return result;
 8002132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002136:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800213a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002146:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	461a      	mov	r2, r3
 800214e:	2300      	movs	r3, #0
 8002150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe ff37 	bl	8000fc4 <HAL_GetTick>
 8002156:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	e009      	b.n	8002170 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe ff32 	bl	8000fc4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1f0      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
 8002170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002174:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002178:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800217c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002182:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002190:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002194:	601a      	str	r2, [r3, #0]
  return result;
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800219e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80021a8:	d804      	bhi.n	80021b4 <HAL_RCC_OscConfig+0xc70>
 80021aa:	4b01      	ldr	r3, [pc, #4]	@ (80021b0 <HAL_RCC_OscConfig+0xc6c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	e029      	b.n	8002204 <HAL_RCC_OscConfig+0xcc0>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	4bc3      	ldr	r3, [pc, #780]	@ (8002510 <HAL_RCC_OscConfig+0xfcc>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002208:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800220c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002210:	6011      	str	r1, [r2, #0]
 8002212:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002216:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	fa92 f1a2 	rbit	r1, r2
 8002220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002224:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002228:	6011      	str	r1, [r2, #0]
  return result;
 800222a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800222e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f042 0220 	orr.w	r2, r2, #32
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f002 021f 	and.w	r2, r2, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d185      	bne.n	800215c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002250:	4baf      	ldr	r3, [pc, #700]	@ (8002510 <HAL_RCC_OscConfig+0xfcc>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	430b      	orrs	r3, r1
 8002272:	49a7      	ldr	r1, [pc, #668]	@ (8002510 <HAL_RCC_OscConfig+0xfcc>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002280:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002298:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800229c:	601a      	str	r2, [r3, #0]
  return result;
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80022a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	2301      	movs	r3, #1
 80022bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fe81 	bl	8000fc4 <HAL_GetTick>
 80022c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c6:	e009      	b.n	80022dc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fe7c 	bl	8000fc4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e13a      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f2a3 	rbit	r2, r3
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002300:	601a      	str	r2, [r3, #0]
  return result;
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800230a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b3f      	cmp	r3, #63	@ 0x3f
 8002314:	d802      	bhi.n	800231c <HAL_RCC_OscConfig+0xdd8>
 8002316:	4b7e      	ldr	r3, [pc, #504]	@ (8002510 <HAL_RCC_OscConfig+0xfcc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e027      	b.n	800236c <HAL_RCC_OscConfig+0xe28>
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002324:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800234a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	4b69      	ldr	r3, [pc, #420]	@ (8002510 <HAL_RCC_OscConfig+0xfcc>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002370:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002374:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002378:	6011      	str	r1, [r2, #0]
 800237a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800237e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	fa92 f1a2 	rbit	r1, r2
 8002388:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800238c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002390:	6011      	str	r1, [r2, #0]
  return result;
 8002392:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002396:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	fab2 f282 	clz	r2, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f042 0220 	orr.w	r2, r2, #32
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f002 021f 	and.w	r2, r2, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d087      	beq.n	80022c8 <HAL_RCC_OscConfig+0xd84>
 80023b8:	e0ca      	b.n	8002550 <HAL_RCC_OscConfig+0x100c>
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80023c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023de:	601a      	str	r2, [r3, #0]
  return result;
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	461a      	mov	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fde0 	bl	8000fc4 <HAL_GetTick>
 8002404:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002408:	e009      	b.n	800241e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe fddb 	bl	8000fc4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e099      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002430:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002442:	601a      	str	r2, [r3, #0]
  return result;
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800244c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b3f      	cmp	r3, #63	@ 0x3f
 8002456:	d802      	bhi.n	800245e <HAL_RCC_OscConfig+0xf1a>
 8002458:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <HAL_RCC_OscConfig+0xfcc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e027      	b.n	80024ae <HAL_RCC_OscConfig+0xf6a>
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002466:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800246a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002470:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800248c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_RCC_OscConfig+0xfcc>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80024b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024ba:	6011      	str	r1, [r2, #0]
 80024bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024c0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	fa92 f1a2 	rbit	r1, r2
 80024ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024d2:	6011      	str	r1, [r2, #0]
  return result;
 80024d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	fab2 f282 	clz	r2, r2
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f042 0220 	orr.w	r2, r2, #32
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	f002 021f 	and.w	r2, r2, #31
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d187      	bne.n	800240a <HAL_RCC_OscConfig+0xec6>
 80024fa:	e029      	b.n	8002550 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d103      	bne.n	8002514 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e020      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
 8002510:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_RCC_OscConfig+0x1018>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800251c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002520:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	429a      	cmp	r2, r3
 8002532:	d10b      	bne.n	800254c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002534:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002538:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b09e      	sub	sp, #120	@ 0x78
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e154      	b.n	8002822 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b89      	ldr	r3, [pc, #548]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d910      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b86      	ldr	r3, [pc, #536]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 0207 	bic.w	r2, r3, #7
 800258e:	4984      	ldr	r1, [pc, #528]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b82      	ldr	r3, [pc, #520]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e13c      	b.n	8002822 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b7b      	ldr	r3, [pc, #492]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4978      	ldr	r1, [pc, #480]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80cd 	beq.w	800276e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d137      	bne.n	800264c <HAL_RCC_ClockConfig+0xec>
 80025dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80025f4:	d802      	bhi.n	80025fc <HAL_RCC_ClockConfig+0x9c>
 80025f6:	4b6b      	ldr	r3, [pc, #428]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e00f      	b.n	800261c <HAL_RCC_ClockConfig+0xbc>
 80025fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002600:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	667b      	str	r3, [r7, #100]	@ 0x64
 800260a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800260e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002618:	4b62      	ldr	r3, [pc, #392]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002620:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002622:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002624:	fa92 f2a2 	rbit	r2, r2
 8002628:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800262a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d171      	bne.n	800272c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0ea      	b.n	8002822 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d137      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x164>
 8002654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002658:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b3f      	cmp	r3, #63	@ 0x3f
 800266c:	d802      	bhi.n	8002674 <HAL_RCC_ClockConfig+0x114>
 800266e:	4b4d      	ldr	r3, [pc, #308]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e00f      	b.n	8002694 <HAL_RCC_ClockConfig+0x134>
 8002674:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002678:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
 8002682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002686:	643b      	str	r3, [r7, #64]	@ 0x40
 8002688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002690:	4b44      	ldr	r3, [pc, #272]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002698:	63ba      	str	r2, [r7, #56]	@ 0x38
 800269a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80026a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f042 0220 	orr.w	r2, r2, #32
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f002 021f 	and.w	r2, r2, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d135      	bne.n	800272c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0ae      	b.n	8002822 <HAL_RCC_ClockConfig+0x2c2>
 80026c4:	2302      	movs	r3, #2
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80026d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80026da:	d802      	bhi.n	80026e2 <HAL_RCC_ClockConfig+0x182>
 80026dc:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e00d      	b.n	80026fe <HAL_RCC_ClockConfig+0x19e>
 80026e2:	2302      	movs	r3, #2
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ee:	2302      	movs	r3, #2
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	2202      	movs	r2, #2
 8002700:	61ba      	str	r2, [r7, #24]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	617a      	str	r2, [r7, #20]
  return result;
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	fab2 f282 	clz	r2, r2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f042 0220 	orr.w	r2, r2, #32
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f002 021f 	and.w	r2, r2, #31
 800271c:	2101      	movs	r1, #1
 800271e:	fa01 f202 	lsl.w	r2, r1, r2
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e07a      	b.n	8002822 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 0203 	bic.w	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	491a      	ldr	r1, [pc, #104]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273e:	f7fe fc41 	bl	8000fc4 <HAL_GetTick>
 8002742:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002744:	e00a      	b.n	800275c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002746:	f7fe fc3d 	bl	8000fc4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e062      	b.n	8002822 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 020c 	and.w	r2, r3, #12
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	429a      	cmp	r2, r3
 800276c:	d1eb      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d215      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 0207 	bic.w	r2, r3, #7
 8002784:	4906      	ldr	r1, [pc, #24]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <HAL_RCC_ClockConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d006      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e041      	b.n	8002822 <HAL_RCC_ClockConfig+0x2c2>
 800279e:	bf00      	nop
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b1d      	ldr	r3, [pc, #116]	@ (800282c <HAL_RCC_ClockConfig+0x2cc>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	491a      	ldr	r1, [pc, #104]	@ (800282c <HAL_RCC_ClockConfig+0x2cc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d2:	4b16      	ldr	r3, [pc, #88]	@ (800282c <HAL_RCC_ClockConfig+0x2cc>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4912      	ldr	r1, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x2cc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027e6:	f000 f829 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027ea:	4601      	mov	r1, r0
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <HAL_RCC_ClockConfig+0x2cc>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f4:	22f0      	movs	r2, #240	@ 0xf0
 80027f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	fa92 f2a2 	rbit	r2, r2
 80027fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	fab2 f282 	clz	r2, r2
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	40d3      	lsrs	r3, r2
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_RCC_ClockConfig+0x2d0>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	fa21 f303 	lsr.w	r3, r1, r3
 8002812:	4a08      	ldr	r2, [pc, #32]	@ (8002834 <HAL_RCC_ClockConfig+0x2d4>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_RCC_ClockConfig+0x2d8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fb8e 	bl	8000f3c <HAL_InitTick>
  
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3778      	adds	r7, #120	@ 0x78
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	08003b10 	.word	0x08003b10
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x30>
 8002866:	2b08      	cmp	r3, #8
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x36>
 800286a:	e026      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	e026      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002898:	4a0e      	ldr	r2, [pc, #56]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e004      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
      break;
 80028b8:	e002      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028bc:	613b      	str	r3, [r7, #16]
      break;
 80028be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c0:	693b      	ldr	r3, [r7, #16]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	08003b20 	.word	0x08003b20
 80028dc:	08003b30 	.word	0x08003b30
 80028e0:	003d0900 	.word	0x003d0900

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e049      	b.n	800298a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fa3e 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 fc0a 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e049      	b.n	8002a38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f841 	bl	8002a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f000 fbb3 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x24>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e03c      	b.n	8002af2 <HAL_TIM_PWM_Start+0x9e>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d109      	bne.n	8002a92 <HAL_TIM_PWM_Start+0x3e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e02f      	b.n	8002af2 <HAL_TIM_PWM_Start+0x9e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d109      	bne.n	8002aac <HAL_TIM_PWM_Start+0x58>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e022      	b.n	8002af2 <HAL_TIM_PWM_Start+0x9e>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d109      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0x72>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e015      	b.n	8002af2 <HAL_TIM_PWM_Start+0x9e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d109      	bne.n	8002ae0 <HAL_TIM_PWM_Start+0x8c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e008      	b.n	8002af2 <HAL_TIM_PWM_Start+0x9e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e097      	b.n	8002c2a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start+0xb6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b08:	e023      	b.n	8002b52 <HAL_TIM_PWM_Start+0xfe>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0xc6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b18:	e01b      	b.n	8002b52 <HAL_TIM_PWM_Start+0xfe>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0xd6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b28:	e013      	b.n	8002b52 <HAL_TIM_PWM_Start+0xfe>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0xe6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b38:	e00b      	b.n	8002b52 <HAL_TIM_PWM_Start+0xfe>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0xf6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b48:	e003      	b.n	8002b52 <HAL_TIM_PWM_Start+0xfe>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2201      	movs	r2, #1
 8002b58:	6839      	ldr	r1, [r7, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fefa 	bl	8003954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a33      	ldr	r2, [pc, #204]	@ (8002c34 <HAL_TIM_PWM_Start+0x1e0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x13e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a32      	ldr	r2, [pc, #200]	@ (8002c38 <HAL_TIM_PWM_Start+0x1e4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00e      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x13e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <HAL_TIM_PWM_Start+0x1e8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x13e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2f      	ldr	r2, [pc, #188]	@ (8002c40 <HAL_TIM_PWM_Start+0x1ec>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x13e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c44 <HAL_TIM_PWM_Start+0x1f0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x142>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_PWM_Start+0x144>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002baa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	@ (8002c34 <HAL_TIM_PWM_Start+0x1e0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d018      	beq.n	8002be8 <HAL_TIM_PWM_Start+0x194>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbe:	d013      	beq.n	8002be8 <HAL_TIM_PWM_Start+0x194>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a20      	ldr	r2, [pc, #128]	@ (8002c48 <HAL_TIM_PWM_Start+0x1f4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00e      	beq.n	8002be8 <HAL_TIM_PWM_Start+0x194>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_TIM_PWM_Start+0x1f8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_TIM_PWM_Start+0x194>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a17      	ldr	r2, [pc, #92]	@ (8002c38 <HAL_TIM_PWM_Start+0x1e4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_TIM_PWM_Start+0x194>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <HAL_TIM_PWM_Start+0x1e8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d115      	bne.n	8002c14 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_TIM_PWM_Start+0x1fc>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d015      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x1d2>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c00:	d011      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	e008      	b.n	8002c26 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e000      	b.n	8002c28 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	40014800 	.word	0x40014800
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	00010007 	.word	0x00010007

08002c54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	6839      	ldr	r1, [r7, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fe74 	bl	8003954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3e      	ldr	r2, [pc, #248]	@ (8002d6c <HAL_TIM_PWM_Stop+0x118>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d70 <HAL_TIM_PWM_Stop+0x11c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3b      	ldr	r2, [pc, #236]	@ (8002d74 <HAL_TIM_PWM_Stop+0x120>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d78 <HAL_TIM_PWM_Stop+0x124>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a38      	ldr	r2, [pc, #224]	@ (8002d7c <HAL_TIM_PWM_Stop+0x128>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_Stop+0x4e>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_TIM_PWM_Stop+0x50>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_TIM_PWM_Stop+0x84>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_PWM_Stop+0x84>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10f      	bne.n	8002d08 <HAL_TIM_PWM_Stop+0xb4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_PWM_Stop+0xb4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_TIM_PWM_Stop+0xc4>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d16:	e023      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d104      	bne.n	8002d28 <HAL_TIM_PWM_Stop+0xd4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d26:	e01b      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d104      	bne.n	8002d38 <HAL_TIM_PWM_Stop+0xe4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d36:	e013      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d104      	bne.n	8002d48 <HAL_TIM_PWM_Stop+0xf4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d46:	e00b      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d104      	bne.n	8002d58 <HAL_TIM_PWM_Stop+0x104>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d56:	e003      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40013400 	.word	0x40013400
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0ff      	b.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b14      	cmp	r3, #20
 8002daa:	f200 80f0 	bhi.w	8002f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dae:	a201      	add	r2, pc, #4	@ (adr r2, 8002db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002f8f 	.word	0x08002f8f
 8002dbc:	08002f8f 	.word	0x08002f8f
 8002dc0:	08002f8f 	.word	0x08002f8f
 8002dc4:	08002e49 	.word	0x08002e49
 8002dc8:	08002f8f 	.word	0x08002f8f
 8002dcc:	08002f8f 	.word	0x08002f8f
 8002dd0:	08002f8f 	.word	0x08002f8f
 8002dd4:	08002e8b 	.word	0x08002e8b
 8002dd8:	08002f8f 	.word	0x08002f8f
 8002ddc:	08002f8f 	.word	0x08002f8f
 8002de0:	08002f8f 	.word	0x08002f8f
 8002de4:	08002ecb 	.word	0x08002ecb
 8002de8:	08002f8f 	.word	0x08002f8f
 8002dec:	08002f8f 	.word	0x08002f8f
 8002df0:	08002f8f 	.word	0x08002f8f
 8002df4:	08002f0d 	.word	0x08002f0d
 8002df8:	08002f8f 	.word	0x08002f8f
 8002dfc:	08002f8f 	.word	0x08002f8f
 8002e00:	08002f8f 	.word	0x08002f8f
 8002e04:	08002f4d 	.word	0x08002f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fa30 	bl	8003274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0208 	orr.w	r2, r2, #8
 8002e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6999      	ldr	r1, [r3, #24]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	619a      	str	r2, [r3, #24]
      break;
 8002e46:	e0a5      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 faa0 	bl	8003394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	021a      	lsls	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
      break;
 8002e88:	e084      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fb09 	bl	80034a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0208 	orr.w	r2, r2, #8
 8002ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0204 	bic.w	r2, r2, #4
 8002eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69d9      	ldr	r1, [r3, #28]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
      break;
 8002ec8:	e064      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fb71 	bl	80035b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	61da      	str	r2, [r3, #28]
      break;
 8002f0a:	e043      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fbba 	bl	800368c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f4a:	e023      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fbfe 	bl	8003754 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f8c:	e002      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
      break;
 8002f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop

08002fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0b6      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x18a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003000:	d03e      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xd8>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003006:	f200 8087 	bhi.w	8003118 <HAL_TIM_ConfigClockSource+0x170>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300e:	f000 8086 	beq.w	800311e <HAL_TIM_ConfigClockSource+0x176>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003016:	d87f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003018:	2b70      	cmp	r3, #112	@ 0x70
 800301a:	d01a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xaa>
 800301c:	2b70      	cmp	r3, #112	@ 0x70
 800301e:	d87b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003020:	2b60      	cmp	r3, #96	@ 0x60
 8003022:	d050      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x11e>
 8003024:	2b60      	cmp	r3, #96	@ 0x60
 8003026:	d877      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003028:	2b50      	cmp	r3, #80	@ 0x50
 800302a:	d03c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xfe>
 800302c:	2b50      	cmp	r3, #80	@ 0x50
 800302e:	d873      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d058      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x13e>
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d86f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d064      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 800303c:	2b30      	cmp	r3, #48	@ 0x30
 800303e:	d86b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d060      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d867      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d05a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 8003050:	e062      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	f000 fc57 	bl	8003914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]
      break;
 800307e:	e04f      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	f000 fc40 	bl	8003914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e03c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 fbb4 	bl	8003820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2150      	movs	r1, #80	@ 0x50
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fc0d 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 80030c4:	e02c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 fbd3 	bl	800387e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2160      	movs	r1, #96	@ 0x60
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fbfd 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 80030e4:	e01c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 fb94 	bl	8003820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	@ 0x40
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fbed 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 8003104:	e00c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 fbe4 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 8003116:	e003      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e000      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800311e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a42      	ldr	r2, [pc, #264]	@ (8003258 <TIM_Base_SetConfig+0x11c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00f      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d00b      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3f      	ldr	r2, [pc, #252]	@ (800325c <TIM_Base_SetConfig+0x120>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3e      	ldr	r2, [pc, #248]	@ (8003260 <TIM_Base_SetConfig+0x124>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0x38>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3d      	ldr	r2, [pc, #244]	@ (8003264 <TIM_Base_SetConfig+0x128>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a33      	ldr	r2, [pc, #204]	@ (8003258 <TIM_Base_SetConfig+0x11c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01b      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d017      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a30      	ldr	r2, [pc, #192]	@ (800325c <TIM_Base_SetConfig+0x120>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003260 <TIM_Base_SetConfig+0x124>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00f      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003264 <TIM_Base_SetConfig+0x128>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2c      	ldr	r2, [pc, #176]	@ (800326c <TIM_Base_SetConfig+0x130>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d003      	beq.n	80031c6 <TIM_Base_SetConfig+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003270 <TIM_Base_SetConfig+0x134>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a16      	ldr	r2, [pc, #88]	@ (8003258 <TIM_Base_SetConfig+0x11c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00f      	beq.n	8003224 <TIM_Base_SetConfig+0xe8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a17      	ldr	r2, [pc, #92]	@ (8003264 <TIM_Base_SetConfig+0x128>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00b      	beq.n	8003224 <TIM_Base_SetConfig+0xe8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_Base_SetConfig+0xe8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a15      	ldr	r2, [pc, #84]	@ (800326c <TIM_Base_SetConfig+0x130>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0xe8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <TIM_Base_SetConfig+0x134>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f023 0201 	bic.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	611a      	str	r2, [r3, #16]
  }
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40013400 	.word	0x40013400
 8003268:	40014000 	.word	0x40014000
 800326c:	40014400 	.word	0x40014400
 8003270:	40014800 	.word	0x40014800

08003274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f023 0201 	bic.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f023 0302 	bic.w	r3, r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003380 <TIM_OC1_SetConfig+0x10c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00f      	beq.n	80032f4 <TIM_OC1_SetConfig+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003384 <TIM_OC1_SetConfig+0x110>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00b      	beq.n	80032f4 <TIM_OC1_SetConfig+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a2a      	ldr	r2, [pc, #168]	@ (8003388 <TIM_OC1_SetConfig+0x114>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_OC1_SetConfig+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a29      	ldr	r2, [pc, #164]	@ (800338c <TIM_OC1_SetConfig+0x118>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_OC1_SetConfig+0x80>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <TIM_OC1_SetConfig+0x11c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10c      	bne.n	800330e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0308 	bic.w	r3, r3, #8
 80032fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <TIM_OC1_SetConfig+0x10c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_OC1_SetConfig+0xc2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <TIM_OC1_SetConfig+0x110>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_OC1_SetConfig+0xc2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <TIM_OC1_SetConfig+0x114>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_OC1_SetConfig+0xc2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a18      	ldr	r2, [pc, #96]	@ (800338c <TIM_OC1_SetConfig+0x118>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_OC1_SetConfig+0xc2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <TIM_OC1_SetConfig+0x11c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800333c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40013400 	.word	0x40013400
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800

08003394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 0210 	bic.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0320 	bic.w	r3, r3, #32
 80033e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <TIM_OC2_SetConfig+0x100>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_OC2_SetConfig+0x6c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a27      	ldr	r2, [pc, #156]	@ (8003498 <TIM_OC2_SetConfig+0x104>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10d      	bne.n	800341c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800341a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <TIM_OC2_SetConfig+0x100>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00f      	beq.n	8003444 <TIM_OC2_SetConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1c      	ldr	r2, [pc, #112]	@ (8003498 <TIM_OC2_SetConfig+0x104>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00b      	beq.n	8003444 <TIM_OC2_SetConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1b      	ldr	r2, [pc, #108]	@ (800349c <TIM_OC2_SetConfig+0x108>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <TIM_OC2_SetConfig+0xb0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a1a      	ldr	r2, [pc, #104]	@ (80034a0 <TIM_OC2_SetConfig+0x10c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_OC2_SetConfig+0xb0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a19      	ldr	r2, [pc, #100]	@ (80034a4 <TIM_OC2_SetConfig+0x110>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d113      	bne.n	800346c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800344a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003452:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800

080034a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a27      	ldr	r2, [pc, #156]	@ (80035a4 <TIM_OC3_SetConfig+0xfc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_OC3_SetConfig+0x6a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a26      	ldr	r2, [pc, #152]	@ (80035a8 <TIM_OC3_SetConfig+0x100>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800352c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <TIM_OC3_SetConfig+0xfc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00f      	beq.n	8003556 <TIM_OC3_SetConfig+0xae>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <TIM_OC3_SetConfig+0x100>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_OC3_SetConfig+0xae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1a      	ldr	r2, [pc, #104]	@ (80035ac <TIM_OC3_SetConfig+0x104>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_OC3_SetConfig+0xae>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <TIM_OC3_SetConfig+0x108>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_OC3_SetConfig+0xae>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a18      	ldr	r2, [pc, #96]	@ (80035b4 <TIM_OC3_SetConfig+0x10c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d113      	bne.n	800357e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800355c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40013400 	.word	0x40013400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40014400 	.word	0x40014400
 80035b4:	40014800 	.word	0x40014800

080035b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	031b      	lsls	r3, r3, #12
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <TIM_OC4_SetConfig+0xc0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00f      	beq.n	800363c <TIM_OC4_SetConfig+0x84>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a17      	ldr	r2, [pc, #92]	@ (800367c <TIM_OC4_SetConfig+0xc4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_OC4_SetConfig+0x84>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a16      	ldr	r2, [pc, #88]	@ (8003680 <TIM_OC4_SetConfig+0xc8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <TIM_OC4_SetConfig+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a15      	ldr	r2, [pc, #84]	@ (8003684 <TIM_OC4_SetConfig+0xcc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_OC4_SetConfig+0x84>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <TIM_OC4_SetConfig+0xd0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d109      	bne.n	8003650 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	019b      	lsls	r3, r3, #6
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40013400 	.word	0x40013400
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800

0800368c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <TIM_OC5_SetConfig+0xb4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <TIM_OC5_SetConfig+0x7a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a16      	ldr	r2, [pc, #88]	@ (8003744 <TIM_OC5_SetConfig+0xb8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_OC5_SetConfig+0x7a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <TIM_OC5_SetConfig+0xbc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_OC5_SetConfig+0x7a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a14      	ldr	r2, [pc, #80]	@ (800374c <TIM_OC5_SetConfig+0xc0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_OC5_SetConfig+0x7a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a13      	ldr	r2, [pc, #76]	@ (8003750 <TIM_OC5_SetConfig+0xc4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d109      	bne.n	800371a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40013400 	.word	0x40013400
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800

08003754 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800379a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	051b      	lsls	r3, r3, #20
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a18      	ldr	r2, [pc, #96]	@ (800380c <TIM_OC6_SetConfig+0xb8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00f      	beq.n	80037d0 <TIM_OC6_SetConfig+0x7c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a17      	ldr	r2, [pc, #92]	@ (8003810 <TIM_OC6_SetConfig+0xbc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_OC6_SetConfig+0x7c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <TIM_OC6_SetConfig+0xc0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_OC6_SetConfig+0x7c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <TIM_OC6_SetConfig+0xc4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_OC6_SetConfig+0x7c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a14      	ldr	r2, [pc, #80]	@ (800381c <TIM_OC6_SetConfig+0xc8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d109      	bne.n	80037e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	029b      	lsls	r3, r3, #10
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800384a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 030a 	bic.w	r3, r3, #10
 800385c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387e:	b480      	push	{r7}
 8003880:	b087      	sub	sp, #28
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 0210 	bic.w	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	031b      	lsls	r3, r3, #12
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f043 0307 	orr.w	r3, r3, #7
 8003900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	609a      	str	r2, [r3, #8]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800392e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	431a      	orrs	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4313      	orrs	r3, r2
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e063      	b.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d018      	beq.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2a:	d013      	beq.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10c      	bne.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40013400 	.word	0x40013400
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <memset>:
 8003aa0:	4402      	add	r2, r0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d100      	bne.n	8003aaa <memset+0xa>
 8003aa8:	4770      	bx	lr
 8003aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003aae:	e7f9      	b.n	8003aa4 <memset+0x4>

08003ab0 <__libc_init_array>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ae8 <__libc_init_array+0x38>)
 8003ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8003aec <__libc_init_array+0x3c>)
 8003ab6:	1b64      	subs	r4, r4, r5
 8003ab8:	10a4      	asrs	r4, r4, #2
 8003aba:	2600      	movs	r6, #0
 8003abc:	42a6      	cmp	r6, r4
 8003abe:	d109      	bne.n	8003ad4 <__libc_init_array+0x24>
 8003ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8003af0 <__libc_init_array+0x40>)
 8003ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8003af4 <__libc_init_array+0x44>)
 8003ac4:	f000 f818 	bl	8003af8 <_init>
 8003ac8:	1b64      	subs	r4, r4, r5
 8003aca:	10a4      	asrs	r4, r4, #2
 8003acc:	2600      	movs	r6, #0
 8003ace:	42a6      	cmp	r6, r4
 8003ad0:	d105      	bne.n	8003ade <__libc_init_array+0x2e>
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad8:	4798      	blx	r3
 8003ada:	3601      	adds	r6, #1
 8003adc:	e7ee      	b.n	8003abc <__libc_init_array+0xc>
 8003ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae2:	4798      	blx	r3
 8003ae4:	3601      	adds	r6, #1
 8003ae6:	e7f2      	b.n	8003ace <__libc_init_array+0x1e>
 8003ae8:	08003b40 	.word	0x08003b40
 8003aec:	08003b40 	.word	0x08003b40
 8003af0:	08003b40 	.word	0x08003b40
 8003af4:	08003b44 	.word	0x08003b44

08003af8 <_init>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

08003b04 <_fini>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr
