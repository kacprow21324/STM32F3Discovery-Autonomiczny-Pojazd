
STM32_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005980  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b08  08005b08  00006b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b50  08005b50  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b50  08005b50  00006b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b58  08005b58  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b5c  08005b5c  00006b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005b60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00000144  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f54b  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d8  00000000  00000000  0001658b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00018668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a74  00000000  00000000  000193b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd1f  00000000  00000000  00019e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108f8  00000000  00000000  00037b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6d97  00000000  00000000  00048443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff1da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037e0  00000000  00000000  000ff220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00102a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005af0 	.word	0x08005af0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005af0 	.word	0x08005af0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <aktualizujPredkosc>:

/*=============================================================================
  Ustawianie PWM wg procentuPredkosci
=============================================================================*/
void aktualizujPredkosc(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
   uint32_t predkosc = (htim3.Init.Period + 1)*procentPredkosci/100;
 80001de:	4b0d      	ldr	r3, [pc, #52]	@ (8000214 <aktualizujPredkosc+0x3c>)
 80001e0:	68db      	ldr	r3, [r3, #12]
 80001e2:	3301      	adds	r3, #1
 80001e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000218 <aktualizujPredkosc+0x40>)
 80001e6:	7812      	ldrb	r2, [r2, #0]
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	fb02 f303 	mul.w	r3, r2, r3
 80001ee:	4a0b      	ldr	r2, [pc, #44]	@ (800021c <aktualizujPredkosc+0x44>)
 80001f0:	fba2 2303 	umull	r2, r3, r2, r3
 80001f4:	095b      	lsrs	r3, r3, #5
 80001f6:	607b      	str	r3, [r7, #4]
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, predkosc);
 80001f8:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <aktualizujPredkosc+0x3c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	635a      	str	r2, [r3, #52]	@ 0x34
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, predkosc);
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <aktualizujPredkosc+0x3c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	20000078 	.word	0x20000078
 8000218:	20000000 	.word	0x20000000
 800021c:	51eb851f 	.word	0x51eb851f

08000220 <zatrzymajSilniki>:
/*=============================================================================
  Zatrzymanie silników
=============================================================================*/
void zatrzymajSilniki(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <zatrzymajSilniki+0x20>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2200      	movs	r2, #0
 800022a:	635a      	str	r2, [r3, #52]	@ 0x34
  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800022c:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <zatrzymajSilniki+0x20>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2200      	movs	r2, #0
 8000232:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	20000078 	.word	0x20000078

08000244 <jedzNaprzod>:
/*=============================================================================
  Jazda do przodu
=============================================================================*/
void jedzNaprzod(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2101      	movs	r1, #1
 800024c:	480b      	ldr	r0, [pc, #44]	@ (800027c <jedzNaprzod+0x38>)
 800024e:	f001 f897 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2102      	movs	r1, #2
 8000256:	4809      	ldr	r0, [pc, #36]	@ (800027c <jedzNaprzod+0x38>)
 8000258:	f001 f892 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000262:	4806      	ldr	r0, [pc, #24]	@ (800027c <jedzNaprzod+0x38>)
 8000264:	f001 f88c 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800026e:	4803      	ldr	r0, [pc, #12]	@ (800027c <jedzNaprzod+0x38>)
 8000270:	f001 f886 	bl	8001380 <HAL_GPIO_WritePin>
	aktualizujPredkosc();
 8000274:	f7ff ffb0 	bl	80001d8 <aktualizujPredkosc>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	48000400 	.word	0x48000400

08000280 <jedzDoTylu>:
/*=============================================================================
  Jazda do tyłu
=============================================================================*/
void jedzDoTylu(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000284:	2200      	movs	r2, #0
 8000286:	2101      	movs	r1, #1
 8000288:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <jedzDoTylu+0x38>)
 800028a:	f001 f879 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 800028e:	2201      	movs	r2, #1
 8000290:	2102      	movs	r1, #2
 8000292:	4809      	ldr	r0, [pc, #36]	@ (80002b8 <jedzDoTylu+0x38>)
 8000294:	f001 f874 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800029e:	4806      	ldr	r0, [pc, #24]	@ (80002b8 <jedzDoTylu+0x38>)
 80002a0:	f001 f86e 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002aa:	4803      	ldr	r0, [pc, #12]	@ (80002b8 <jedzDoTylu+0x38>)
 80002ac:	f001 f868 	bl	8001380 <HAL_GPIO_WritePin>
	aktualizujPredkosc();
 80002b0:	f7ff ff92 	bl	80001d8 <aktualizujPredkosc>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	48000400 	.word	0x48000400

080002bc <skrecWLewo>:

/*=============================================================================
  Skręt w lewo: lewy silnik do tyłu, prawy do przodu
=============================================================================*/
void skrecWLewo(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2101      	movs	r1, #1
 80002c4:	480b      	ldr	r0, [pc, #44]	@ (80002f4 <skrecWLewo+0x38>)
 80002c6:	f001 f85b 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2102      	movs	r1, #2
 80002ce:	4809      	ldr	r0, [pc, #36]	@ (80002f4 <skrecWLewo+0x38>)
 80002d0:	f001 f856 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002da:	4806      	ldr	r0, [pc, #24]	@ (80002f4 <skrecWLewo+0x38>)
 80002dc:	f001 f850 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002e6:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <skrecWLewo+0x38>)
 80002e8:	f001 f84a 	bl	8001380 <HAL_GPIO_WritePin>
	aktualizujPredkosc();
 80002ec:	f7ff ff74 	bl	80001d8 <aktualizujPredkosc>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	48000400 	.word	0x48000400

080002f8 <skrecWPrawo>:

/*=============================================================================
  Skręt w prawo: lewy silnik do przodu, prawy do tyłu
=============================================================================*/
void skrecWPrawo(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2101      	movs	r1, #1
 8000300:	480b      	ldr	r0, [pc, #44]	@ (8000330 <skrecWPrawo+0x38>)
 8000302:	f001 f83d 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000306:	2201      	movs	r2, #1
 8000308:	2102      	movs	r1, #2
 800030a:	4809      	ldr	r0, [pc, #36]	@ (8000330 <skrecWPrawo+0x38>)
 800030c:	f001 f838 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000316:	4806      	ldr	r0, [pc, #24]	@ (8000330 <skrecWPrawo+0x38>)
 8000318:	f001 f832 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000322:	4803      	ldr	r0, [pc, #12]	@ (8000330 <skrecWPrawo+0x38>)
 8000324:	f001 f82c 	bl	8001380 <HAL_GPIO_WritePin>
	aktualizujPredkosc();
 8000328:	f7ff ff56 	bl	80001d8 <aktualizujPredkosc>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	48000400 	.word	0x48000400

08000334 <zatrzymajRobota>:
/*=============================================================================
  Pełne zatrzymanie robota
=============================================================================*/
void zatrzymajRobota(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	zatrzymajSilniki();
 8000338:	f7ff ff72 	bl	8000220 <zatrzymajSilniki>
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	480a      	ldr	r0, [pc, #40]	@ (800036c <zatrzymajRobota+0x38>)
 8000342:	f001 f81d 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	2102      	movs	r1, #2
 800034a:	4808      	ldr	r0, [pc, #32]	@ (800036c <zatrzymajRobota+0x38>)
 800034c:	f001 f818 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <zatrzymajRobota+0x38>)
 8000358:	f001 f812 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000362:	4802      	ldr	r0, [pc, #8]	@ (800036c <zatrzymajRobota+0x38>)
 8000364:	f001 f80c 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	48000400 	.word	0x48000400

08000370 <jedzPoLinii>:
/*=============================================================================
  Jazda po linii
=============================================================================*/
void jedzPoLinii(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
	aktualizujPredkosc();
 8000376:	f7ff ff2f 	bl	80001d8 <aktualizujPredkosc>
	uint8_t lewySensor = HAL_GPIO_ReadPin(IR_LEFT_D0_GPIO_Port, IR_LEFT_D0_Pin);
 800037a:	2108      	movs	r1, #8
 800037c:	4816      	ldr	r0, [pc, #88]	@ (80003d8 <jedzPoLinii+0x68>)
 800037e:	f000 ffe7 	bl	8001350 <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	uint8_t prawySensor = HAL_GPIO_ReadPin(IR_RIGHT_D0_GPIO_Port, IR_RIGHT_D0_Pin);
 8000386:	2104      	movs	r1, #4
 8000388:	4813      	ldr	r0, [pc, #76]	@ (80003d8 <jedzPoLinii+0x68>)
 800038a:	f000 ffe1 	bl	8001350 <HAL_GPIO_ReadPin>
 800038e:	4603      	mov	r3, r0
 8000390:	71bb      	strb	r3, [r7, #6]

  if(lewySensor==0&&prawySensor==0) // oba czujniki widzą biały (jazda prosto)
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d105      	bne.n	80003a4 <jedzPoLinii+0x34>
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d102      	bne.n	80003a4 <jedzPoLinii+0x34>
  {
	  jedzNaprzod();
 800039e:	f7ff ff51 	bl	8000244 <jedzNaprzod>
 80003a2:	e014      	b.n	80003ce <jedzPoLinii+0x5e>
  }
  else if(lewySensor==1&&prawySensor==0) // lewy widzi czarny, prawy biały (skręt w lewo)
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d105      	bne.n	80003b6 <jedzPoLinii+0x46>
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <jedzPoLinii+0x46>
  {
	  skrecWLewo();
 80003b0:	f7ff ff84 	bl	80002bc <skrecWLewo>
 80003b4:	e00b      	b.n	80003ce <jedzPoLinii+0x5e>
  }
  else if(lewySensor==0&&prawySensor==1) // lewy biały, prawy czarny (skręt w prawo)
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d105      	bne.n	80003c8 <jedzPoLinii+0x58>
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d102      	bne.n	80003c8 <jedzPoLinii+0x58>
  {
	  skrecWPrawo();
 80003c2:	f7ff ff99 	bl	80002f8 <skrecWPrawo>
 80003c6:	e002      	b.n	80003ce <jedzPoLinii+0x5e>
  }
  else // oba widzą czarny (zatrzymaj się)
  {
	 zatrzymajRobota();
 80003c8:	f7ff ffb4 	bl	8000334 <zatrzymajRobota>
  }
}
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	48000800 	.word	0x48000800

080003dc <obslugaMenu>:
/*=============================================================================
  MENU (UART)
=============================================================================*/
void obslugaMenu(char znak)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
    switch (znak)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	3b41      	subs	r3, #65	@ 0x41
 80003ea:	2b20      	cmp	r3, #32
 80003ec:	f200 8085 	bhi.w	80004fa <obslugaMenu+0x11e>
 80003f0:	a201      	add	r2, pc, #4	@ (adr r2, 80003f8 <obslugaMenu+0x1c>)
 80003f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f6:	bf00      	nop
 80003f8:	080004e7 	.word	0x080004e7
 80003fc:	080004fb 	.word	0x080004fb
 8000400:	080004fb 	.word	0x080004fb
 8000404:	080004fb 	.word	0x080004fb
 8000408:	080004fb 	.word	0x080004fb
 800040c:	080004fb 	.word	0x080004fb
 8000410:	080004c9 	.word	0x080004c9
 8000414:	080004fb 	.word	0x080004fb
 8000418:	080004fb 	.word	0x080004fb
 800041c:	080004fb 	.word	0x080004fb
 8000420:	080004fb 	.word	0x080004fb
 8000424:	080004d5 	.word	0x080004d5
 8000428:	0800047d 	.word	0x0800047d
 800042c:	080004a3 	.word	0x080004a3
 8000430:	080004fb 	.word	0x080004fb
 8000434:	080004db 	.word	0x080004db
 8000438:	080004fb 	.word	0x080004fb
 800043c:	080004fb 	.word	0x080004fb
 8000440:	080004e1 	.word	0x080004e1
 8000444:	080004cf 	.word	0x080004cf
 8000448:	080004fb 	.word	0x080004fb
 800044c:	080004fb 	.word	0x080004fb
 8000450:	080004fb 	.word	0x080004fb
 8000454:	080004fb 	.word	0x080004fb
 8000458:	080004fb 	.word	0x080004fb
 800045c:	080004fb 	.word	0x080004fb
 8000460:	080004fb 	.word	0x080004fb
 8000464:	080004fb 	.word	0x080004fb
 8000468:	080004fb 	.word	0x080004fb
 800046c:	080004fb 	.word	0x080004fb
 8000470:	080004fb 	.word	0x080004fb
 8000474:	080004fb 	.word	0x080004fb
 8000478:	080004ef 	.word	0x080004ef
    {
    case 'M':
        if (procentPredkosci + KROK_PREDKOSCI <= PREDKOSC_MAX) {
 800047c:	4b21      	ldr	r3, [pc, #132]	@ (8000504 <obslugaMenu+0x128>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b5a      	cmp	r3, #90	@ 0x5a
 8000484:	d807      	bhi.n	8000496 <obslugaMenu+0xba>
            procentPredkosci += KROK_PREDKOSCI;
 8000486:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <obslugaMenu+0x128>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	330a      	adds	r3, #10
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b1c      	ldr	r3, [pc, #112]	@ (8000504 <obslugaMenu+0x128>)
 8000492:	701a      	strb	r2, [r3, #0]
 8000494:	e002      	b.n	800049c <obslugaMenu+0xc0>
        } else {
            procentPredkosci = PREDKOSC_MAX;
 8000496:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <obslugaMenu+0x128>)
 8000498:	2264      	movs	r2, #100	@ 0x64
 800049a:	701a      	strb	r2, [r3, #0]
        }
        aktualizujPredkosc();
 800049c:	f7ff fe9c 	bl	80001d8 <aktualizujPredkosc>
        break;
 80004a0:	e02c      	b.n	80004fc <obslugaMenu+0x120>

    case 'N':
        if (procentPredkosci >= KROK_PREDKOSCI) {
 80004a2:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <obslugaMenu+0x128>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b09      	cmp	r3, #9
 80004aa:	d907      	bls.n	80004bc <obslugaMenu+0xe0>
            procentPredkosci -= KROK_PREDKOSCI;
 80004ac:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <obslugaMenu+0x128>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	3b0a      	subs	r3, #10
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <obslugaMenu+0x128>)
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	e002      	b.n	80004c2 <obslugaMenu+0xe6>
        } else {
            procentPredkosci = PREDKOSC_MIN;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <obslugaMenu+0x128>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
        }
        aktualizujPredkosc();
 80004c2:	f7ff fe89 	bl	80001d8 <aktualizujPredkosc>
        break;
 80004c6:	e019      	b.n	80004fc <obslugaMenu+0x120>
     case 'G':
    	jedzNaprzod();
 80004c8:	f7ff febc 	bl	8000244 <jedzNaprzod>
        break;
 80004cc:	e016      	b.n	80004fc <obslugaMenu+0x120>
     case 'T':
    	jedzDoTylu();
 80004ce:	f7ff fed7 	bl	8000280 <jedzDoTylu>
        break;
 80004d2:	e013      	b.n	80004fc <obslugaMenu+0x120>
     case 'L':
    	skrecWLewo();
 80004d4:	f7ff fef2 	bl	80002bc <skrecWLewo>
        break;
 80004d8:	e010      	b.n	80004fc <obslugaMenu+0x120>
     case 'P':
    	skrecWPrawo();
 80004da:	f7ff ff0d 	bl	80002f8 <skrecWPrawo>
        break;
 80004de:	e00d      	b.n	80004fc <obslugaMenu+0x120>
     case 'S':
        zatrzymajRobota();
 80004e0:	f7ff ff28 	bl	8000334 <zatrzymajRobota>
        break;
 80004e4:	e00a      	b.n	80004fc <obslugaMenu+0x120>
     case 'A':
    	Auto = 1;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <obslugaMenu+0x12c>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	701a      	strb	r2, [r3, #0]
        break;
 80004ec:	e006      	b.n	80004fc <obslugaMenu+0x120>
     case 'a':
        Auto = 0;
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <obslugaMenu+0x12c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
        zatrzymajRobota();
 80004f4:	f7ff ff1e 	bl	8000334 <zatrzymajRobota>
        break;
 80004f8:	e000      	b.n	80004fc <obslugaMenu+0x120>
     default:
        break;
 80004fa:	bf00      	nop
    }
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000000 	.word	0x20000000
 8000508:	2000014c 	.word	0x2000014c

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fbaf 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f841 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f99f 	bl	800085c <MX_GPIO_Init>
  MX_TIM3_Init();
 800051e:	f000 f8eb 	bl	80006f8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000522:	f000 f88b 	bl	800063c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f969 	bl	80007fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	4815      	ldr	r0, [pc, #84]	@ (8000584 <main+0x78>)
 800052e:	f002 fbc5 	bl	8002cbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000532:	2104      	movs	r1, #4
 8000534:	4813      	ldr	r0, [pc, #76]	@ (8000584 <main+0x78>)
 8000536:	f002 fbc1 	bl	8002cbc <HAL_TIM_PWM_Start>

  aktualizujPredkosc();
 800053a:	f7ff fe4d 	bl	80001d8 <aktualizujPredkosc>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800053e:	2104      	movs	r1, #4
 8000540:	4811      	ldr	r0, [pc, #68]	@ (8000588 <main+0x7c>)
 8000542:	f002 fd13 	bl	8002f6c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000546:	2108      	movs	r1, #8
 8000548:	480f      	ldr	r0, [pc, #60]	@ (8000588 <main+0x7c>)
 800054a:	f002 fd0f 	bl	8002f6c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&znak, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	490e      	ldr	r1, [pc, #56]	@ (800058c <main+0x80>)
 8000552:	480f      	ldr	r0, [pc, #60]	@ (8000590 <main+0x84>)
 8000554:	f004 f8bf 	bl	80046d6 <HAL_UART_Receive_IT>

  char *w = "Robot Działa\r\n";
 8000558:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <main+0x88>)
 800055a:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)w, strlen(w), HAL_MAX_DELAY);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff fe33 	bl	80001c8 <strlen>
 8000562:	4603      	mov	r3, r0
 8000564:	b29a      	uxth	r2, r3
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4808      	ldr	r0, [pc, #32]	@ (8000590 <main+0x84>)
 800056e:	f004 f829 	bl	80045c4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Auto)
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <main+0x8c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0fa      	beq.n	8000572 <main+0x66>
	      {
	        jedzPoLinii();
 800057c:	f7ff fef8 	bl	8000370 <jedzPoLinii>
	  if (Auto)
 8000580:	e7f7      	b.n	8000572 <main+0x66>
 8000582:	bf00      	nop
 8000584:	20000078 	.word	0x20000078
 8000588:	2000002c 	.word	0x2000002c
 800058c:	2000014d 	.word	0x2000014d
 8000590:	200000c4 	.word	0x200000c4
 8000594:	08005b08 	.word	0x08005b08
 8000598:	2000014c 	.word	0x2000014c

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b09e      	sub	sp, #120	@ 0x78
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005a6:	2228      	movs	r2, #40	@ 0x28
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 fa74 	bl	8005a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	223c      	movs	r2, #60	@ 0x3c
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fa66 	bl	8005a98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fee5 	bl	80013b0 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005ec:	f000 f9ae 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000604:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fede 	bl	80023cc <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000616:	f000 f999 	bl	800094c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800061a:	2301      	movs	r3, #1
 800061c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f8e3 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000630:	f000 f98c 	bl	800094c <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3778      	adds	r7, #120	@ 0x78
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 800065c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000660:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000662:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 8000664:	2207      	movs	r2, #7
 8000666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 8000670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000682:	481c      	ldr	r0, [pc, #112]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 8000684:	f002 fc1a 	bl	8002ebc <HAL_TIM_IC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800068e:	f000 f95d 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4814      	ldr	r0, [pc, #80]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 80006a2:	f003 fea3 	bl	80043ec <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80006ac:	f000 f94e 	bl	800094c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2204      	movs	r2, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 80006c8:	f002 fe94 	bl	80033f4 <HAL_TIM_IC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f93b 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2208      	movs	r2, #8
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_TIM2_Init+0xb8>)
 80006de:	f002 fe89 	bl	80033f4 <HAL_TIM_IC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80006e8:	f000 f930 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000002c 	.word	0x2000002c

080006f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	@ 0x38
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800072a:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 800072c:	4a32      	ldr	r2, [pc, #200]	@ (80007f8 <MX_TIM3_Init+0x100>)
 800072e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000730:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 8000732:	2207      	movs	r2, #7
 8000734:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b2f      	ldr	r3, [pc, #188]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800073c:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 800073e:	2263      	movs	r2, #99	@ 0x63
 8000740:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800074e:	4829      	ldr	r0, [pc, #164]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 8000750:	f002 f9fc 	bl	8002b4c <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800075a:	f000 f8f7 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000764:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000768:	4619      	mov	r1, r3
 800076a:	4822      	ldr	r0, [pc, #136]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 800076c:	f002 fff2 	bl	8003754 <HAL_TIM_ConfigClockSource>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000776:	f000 f8e9 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800077a:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 800077c:	f002 fa3d 	bl	8002bfa <HAL_TIM_PWM_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000786:	f000 f8e1 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4816      	ldr	r0, [pc, #88]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 800079a:	f003 fe27 	bl	80043ec <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007a4:	f000 f8d2 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a8:	2360      	movs	r3, #96	@ 0x60
 80007aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 80007c0:	f002 feb4 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007ca:	f000 f8bf 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2204      	movs	r2, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 80007d6:	f002 fea9 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80007e0:	f000 f8b4 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007e4:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <MX_TIM3_Init+0xfc>)
 80007e6:	f000 f943 	bl	8000a70 <HAL_TIM_MspPostInit>

}
 80007ea:	bf00      	nop
 80007ec:	3738      	adds	r7, #56	@ 0x38
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000078 	.word	0x20000078
 80007f8:	40000400 	.word	0x40000400

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_USART1_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000808:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800080c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART1_UART_Init+0x58>)
 8000840:	f003 fe72 	bl	8004528 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f87f 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000c4 	.word	0x200000c4
 8000858:	40013800 	.word	0x40013800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b24      	ldr	r3, [pc, #144]	@ (8000904 <MX_GPIO_Init+0xa8>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a23      	ldr	r2, [pc, #140]	@ (8000904 <MX_GPIO_Init+0xa8>)
 8000878:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <MX_GPIO_Init+0xa8>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <MX_GPIO_Init+0xa8>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <MX_GPIO_Init+0xa8>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_GPIO_Init+0xa8>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_GPIO_Init+0xa8>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <MX_GPIO_Init+0xa8>)
 80008a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_GPIO_Init+0xa8>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f643 4103 	movw	r1, #15363	@ 0x3c03
 80008c0:	4811      	ldr	r0, [pc, #68]	@ (8000908 <MX_GPIO_Init+0xac>)
 80008c2:	f000 fd5d 	bl	8001380 <HAL_GPIO_WritePin>
                          |TRIG1_Pin|TRIG2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IR_RIGHT_D0_Pin IR_LEFT_D0_Pin */
  GPIO_InitStruct.Pin = IR_RIGHT_D0_Pin|IR_LEFT_D0_Pin;
 80008c6:	230c      	movs	r3, #12
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <MX_GPIO_Init+0xb0>)
 80008da:	f000 fbbf 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           TRIG1_Pin TRIG2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 80008de:	f643 4303 	movw	r3, #15363	@ 0x3c03
 80008e2:	60fb      	str	r3, [r7, #12]
                          |TRIG1_Pin|TRIG2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_GPIO_Init+0xac>)
 80008f8:	f000 fbb0 	bl	800105c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800

08000910 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_UART_RxCpltCallback+0x30>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d109      	bne.n	8000936 <HAL_UART_RxCpltCallback+0x26>
    {
    	obslugaMenu(znak);
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_UART_RxCpltCallback+0x34>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd58 	bl	80003dc <obslugaMenu>
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&znak, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	4905      	ldr	r1, [pc, #20]	@ (8000944 <HAL_UART_RxCpltCallback+0x34>)
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <HAL_UART_RxCpltCallback+0x38>)
 8000932:	f003 fed0 	bl	80046d6 <HAL_UART_Receive_IT>
    }
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013800 	.word	0x40013800
 8000944:	2000014d 	.word	0x2000014d
 8000948:	200000c4 	.word	0x200000c4

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x44>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <HAL_MspInit+0x44>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_MspInit+0x44>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_MspInit+0x44>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_MspInit+0x44>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c0:	d130      	bne.n	8000a24 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <HAL_TIM_IC_MspInit+0x8c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <HAL_TIM_IC_MspInit+0x8c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <HAL_TIM_IC_MspInit+0x8c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_TIM_IC_MspInit+0x8c>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <HAL_TIM_IC_MspInit+0x8c>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_TIM_IC_MspInit+0x8c>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ECHO1_Pin|ECHO2_Pin;
 80009f2:	2306      	movs	r3, #6
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a10:	f000 fb24 	bl	800105c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	201c      	movs	r0, #28
 8000a1a:	f000 fa6c 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 fa85 	bl	8000f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_TIM_Base_MspInit+0x38>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10b      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_TIM_Base_MspInit+0x3c>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_TIM_Base_MspInit+0x3c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_TIM_Base_MspInit+0x3c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a11      	ldr	r2, [pc, #68]	@ (8000ad4 <HAL_TIM_MspPostInit+0x64>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d11c      	bne.n	8000acc <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_TIM_MspPostInit+0x68>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a10      	ldr	r2, [pc, #64]	@ (8000ad8 <HAL_TIM_MspPostInit+0x68>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_TIM_MspPostInit+0x68>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8000aaa:	23c0      	movs	r3, #192	@ 0xc0
 8000aac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f000 fac8 	bl	800105c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40000400 	.word	0x40000400
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <HAL_UART_MspInit+0x8c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12f      	bne.n	8000b5e <HAL_UART_MspInit+0x82>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <HAL_UART_MspInit+0x90>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <HAL_UART_MspInit+0x90>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <HAL_UART_MspInit+0x90>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_UART_MspInit+0x90>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <HAL_UART_MspInit+0x90>)
 8000b1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_UART_MspInit+0x90>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b2e:	2330      	movs	r3, #48	@ 0x30
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <HAL_UART_MspInit+0x94>)
 8000b4a:	f000 fa87 	bl	800105c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2025      	movs	r0, #37	@ 0x25
 8000b54:	f000 f9cf 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b58:	2025      	movs	r0, #37	@ 0x25
 8000b5a:	f000 f9e8 	bl	8000f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40013800 	.word	0x40013800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000800 	.word	0x48000800

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 f899 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <TIM2_IRQHandler+0x10>)
 8000bda:	f002 fb09 	bl	80031f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000002c 	.word	0x2000002c

08000be8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <USART1_IRQHandler+0x10>)
 8000bee:	f003 fdb7 	bl	8004760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000c4 	.word	0x200000c4

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f004 ff2b 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fc5b 	bl	800050c <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c58:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c64:	08005b60 	.word	0x08005b60
  ldr r2, =_sbss
 8000c68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c6c:	20000154 	.word	0x20000154

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f92b 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe62 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f943 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f90b 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000004 	.word	0x20000004
 8000cf8:	2000000c 	.word	0x2000000c
 8000cfc:	20000008 	.word	0x20000008

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000150 	.word	0x20000150

08000d28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000150 	.word	0x20000150

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	@ (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff29 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff3e 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff8e 	bl	8000e34 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff31 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa2 	bl	8000e9c <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e02e      	b.n	8000fd2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d008      	beq.n	8000f90 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2204      	movs	r2, #4
 8000f82:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e020      	b.n	8000fd2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 020e 	bic.w	r2, r2, #14
 8000f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d005      	beq.n	8001000 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e027      	b.n	8001050 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 020e 	bic.w	r2, r2, #14
 800100e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
    }
  }
  return status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	e154      	b.n	8001316 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8146 	beq.w	8001310 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d005      	beq.n	800109c <HAL_GPIO_Init+0x40>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d130      	bne.n	80010fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d2:	2201      	movs	r2, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	f003 0201 	and.w	r2, r3, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b03      	cmp	r3, #3
 8001108:	d017      	beq.n	800113a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d123      	bne.n	800118e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	6939      	ldr	r1, [r7, #16]
 800118a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0203 	and.w	r2, r3, #3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80a0 	beq.w	8001310 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	4b58      	ldr	r3, [pc, #352]	@ (8001334 <HAL_GPIO_Init+0x2d8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a57      	ldr	r2, [pc, #348]	@ (8001334 <HAL_GPIO_Init+0x2d8>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b55      	ldr	r3, [pc, #340]	@ (8001334 <HAL_GPIO_Init+0x2d8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e8:	4a53      	ldr	r2, [pc, #332]	@ (8001338 <HAL_GPIO_Init+0x2dc>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001212:	d019      	beq.n	8001248 <HAL_GPIO_Init+0x1ec>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a49      	ldr	r2, [pc, #292]	@ (800133c <HAL_GPIO_Init+0x2e0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d013      	beq.n	8001244 <HAL_GPIO_Init+0x1e8>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a48      	ldr	r2, [pc, #288]	@ (8001340 <HAL_GPIO_Init+0x2e4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d00d      	beq.n	8001240 <HAL_GPIO_Init+0x1e4>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a47      	ldr	r2, [pc, #284]	@ (8001344 <HAL_GPIO_Init+0x2e8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d007      	beq.n	800123c <HAL_GPIO_Init+0x1e0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a46      	ldr	r2, [pc, #280]	@ (8001348 <HAL_GPIO_Init+0x2ec>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d101      	bne.n	8001238 <HAL_GPIO_Init+0x1dc>
 8001234:	2304      	movs	r3, #4
 8001236:	e008      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001238:	2305      	movs	r3, #5
 800123a:	e006      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 800123c:	2303      	movs	r3, #3
 800123e:	e004      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001240:	2302      	movs	r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001248:	2300      	movs	r3, #0
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800125a:	4937      	ldr	r1, [pc, #220]	@ (8001338 <HAL_GPIO_Init+0x2dc>)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001268:	4b38      	ldr	r3, [pc, #224]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800128c:	4a2f      	ldr	r2, [pc, #188]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001292:	4b2e      	ldr	r3, [pc, #184]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b6:	4a25      	ldr	r2, [pc, #148]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012e0:	4a1a      	ldr	r2, [pc, #104]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800130a:	4a10      	ldr	r2, [pc, #64]	@ (800134c <HAL_GPIO_Init+0x2f0>)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	f47f aea3 	bne.w	800106c <HAL_GPIO_Init+0x10>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	48000400 	.word	0x48000400
 8001340:	48000800 	.word	0x48000800
 8001344:	48000c00 	.word	0x48000c00
 8001348:	48001000 	.word	0x48001000
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f000 bff4 	b.w	80023be <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 816d 	beq.w	80016c6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013ec:	4bb4      	ldr	r3, [pc, #720]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d00c      	beq.n	8001412 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f8:	4bb1      	ldr	r3, [pc, #708]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d157      	bne.n	80014b4 <HAL_RCC_OscConfig+0x104>
 8001404:	4bae      	ldr	r3, [pc, #696]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001410:	d150      	bne.n	80014b4 <HAL_RCC_OscConfig+0x104>
 8001412:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001416:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001426:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b3f      	cmp	r3, #63	@ 0x3f
 8001432:	d802      	bhi.n	800143a <HAL_RCC_OscConfig+0x8a>
 8001434:	4ba2      	ldr	r3, [pc, #648]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0xb6>
 800143a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800143e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800144e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001452:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001456:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001462:	4b97      	ldr	r3, [pc, #604]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800146a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800146e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001472:	fa92 f2a2 	rbit	r2, r2
 8001476:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800147a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800147e:	fab2 f282 	clz	r2, r2
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	f042 0220 	orr.w	r2, r2, #32
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f002 021f 	and.w	r2, r2, #31
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8114 	beq.w	80016c4 <HAL_RCC_OscConfig+0x314>
 800149c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 810b 	bne.w	80016c4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f000 bf85 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x124>
 80014c6:	4b7e      	ldr	r3, [pc, #504]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7d      	ldr	r2, [pc, #500]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e036      	b.n	8001542 <HAL_RCC_OscConfig+0x192>
 80014d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x14e>
 80014e4:	4b76      	ldr	r3, [pc, #472]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a75      	ldr	r2, [pc, #468]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b73      	ldr	r3, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a72      	ldr	r2, [pc, #456]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e021      	b.n	8001542 <HAL_RCC_OscConfig+0x192>
 80014fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001502:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x17a>
 8001510:	4b6b      	ldr	r3, [pc, #428]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a6a      	ldr	r2, [pc, #424]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001516:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b68      	ldr	r3, [pc, #416]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a67      	ldr	r2, [pc, #412]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e00b      	b.n	8001542 <HAL_RCC_OscConfig+0x192>
 800152a:	4b65      	ldr	r3, [pc, #404]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a64      	ldr	r2, [pc, #400]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b62      	ldr	r3, [pc, #392]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a61      	ldr	r2, [pc, #388]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001542:	4b5f      	ldr	r3, [pc, #380]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001546:	f023 020f 	bic.w	r2, r3, #15
 800154a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	495a      	ldr	r1, [pc, #360]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001558:	4313      	orrs	r3, r2
 800155a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001560:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d054      	beq.n	8001616 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fbdc 	bl	8000d28 <HAL_GetTick>
 8001570:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001576:	f7ff fbd7 	bl	8000d28 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	@ 0x64
 8001584:	d902      	bls.n	800158c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	f000 bf19 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
 800158c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001590:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80015a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80015ac:	d802      	bhi.n	80015b4 <HAL_RCC_OscConfig+0x204>
 80015ae:	4b44      	ldr	r3, [pc, #272]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	e015      	b.n	80015e0 <HAL_RCC_OscConfig+0x230>
 80015b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015b8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80015c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015cc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80015d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80015dc:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015e4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80015e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80015ec:	fa92 f2a2 	rbit	r2, r2
 80015f0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80015f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80015f8:	fab2 f282 	clz	r2, r2
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f042 0220 	orr.w	r2, r2, #32
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	f002 021f 	and.w	r2, r2, #31
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0b0      	beq.n	8001576 <HAL_RCC_OscConfig+0x1c6>
 8001614:	e057      	b.n	80016c6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb87 	bl	8000d28 <HAL_GetTick>
 800161a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fb82 	bl	8000d28 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	@ 0x64
 800162e:	d902      	bls.n	8001636 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	f000 bec4 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
 8001636:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800163a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800164a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b3f      	cmp	r3, #63	@ 0x3f
 8001656:	d802      	bhi.n	800165e <HAL_RCC_OscConfig+0x2ae>
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x2da>
 800165e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001662:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001672:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001676:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800167a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_RCC_OscConfig+0x310>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800168e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001692:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001696:	fa92 f2a2 	rbit	r2, r2
 800169a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800169e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80016a2:	fab2 f282 	clz	r2, r2
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f042 0220 	orr.w	r2, r2, #32
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f002 021f 	and.w	r2, r2, #31
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1b0      	bne.n	8001620 <HAL_RCC_OscConfig+0x270>
 80016be:	e002      	b.n	80016c6 <HAL_RCC_OscConfig+0x316>
 80016c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 816c 	beq.w	80019b4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016dc:	4bcc      	ldr	r3, [pc, #816]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016e8:	4bc9      	ldr	r3, [pc, #804]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d16d      	bne.n	80017d0 <HAL_RCC_OscConfig+0x420>
 80016f4:	4bc6      	ldr	r3, [pc, #792]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d167      	bne.n	80017d0 <HAL_RCC_OscConfig+0x420>
 8001700:	2302      	movs	r3, #2
 8001702:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001712:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b3f      	cmp	r3, #63	@ 0x3f
 800171e:	d802      	bhi.n	8001726 <HAL_RCC_OscConfig+0x376>
 8001720:	4bbb      	ldr	r3, [pc, #748]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	e013      	b.n	800174e <HAL_RCC_OscConfig+0x39e>
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001738:	2302      	movs	r3, #2
 800173a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800173e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800174a:	4bb1      	ldr	r3, [pc, #708]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174e:	2202      	movs	r2, #2
 8001750:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001754:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001758:	fa92 f2a2 	rbit	r2, r2
 800175c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001760:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001764:	fab2 f282 	clz	r2, r2
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f042 0220 	orr.w	r2, r2, #32
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f002 021f 	and.w	r2, r2, #31
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <HAL_RCC_OscConfig+0x3e6>
 8001780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001784:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d002      	beq.n	8001796 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	f000 be14 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b9e      	ldr	r3, [pc, #632]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800179e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	21f8      	movs	r1, #248	@ 0xf8
 80017ac:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80017b4:	fa91 f1a1 	rbit	r1, r1
 80017b8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80017bc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80017c0:	fab1 f181 	clz	r1, r1
 80017c4:	b2c9      	uxtb	r1, r1
 80017c6:	408b      	lsls	r3, r1
 80017c8:	4991      	ldr	r1, [pc, #580]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e0f1      	b.n	80019b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8083 	beq.w	80018e8 <HAL_RCC_OscConfig+0x538>
 80017e2:	2301      	movs	r3, #1
 80017e4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80017f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001802:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	461a      	mov	r2, r3
 800180a:	2301      	movs	r3, #1
 800180c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fa8b 	bl	8000d28 <HAL_GetTick>
 8001812:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	e00a      	b.n	800182e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fa86 	bl	8000d28 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d902      	bls.n	800182e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	f000 bdc8 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001840:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b3f      	cmp	r3, #63	@ 0x3f
 800184c:	d802      	bhi.n	8001854 <HAL_RCC_OscConfig+0x4a4>
 800184e:	4b70      	ldr	r3, [pc, #448]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e013      	b.n	800187c <HAL_RCC_OscConfig+0x4cc>
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800186c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001878:	4b65      	ldr	r3, [pc, #404]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	2202      	movs	r2, #2
 800187e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001882:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001886:	fa92 f2a2 	rbit	r2, r2
 800188a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800188e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f042 0220 	orr.w	r2, r2, #32
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f002 021f 	and.w	r2, r2, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0b4      	beq.n	8001818 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b58      	ldr	r3, [pc, #352]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	21f8      	movs	r1, #248	@ 0xf8
 80018c4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80018cc:	fa91 f1a1 	rbit	r1, r1
 80018d0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80018d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80018d8:	fab1 f181 	clz	r1, r1
 80018dc:	b2c9      	uxtb	r1, r1
 80018de:	408b      	lsls	r3, r1
 80018e0:	494b      	ldr	r1, [pc, #300]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
 80018e6:	e065      	b.n	80019b4 <HAL_RCC_OscConfig+0x604>
 80018e8:	2301      	movs	r3, #1
 80018ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80018fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001908:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	461a      	mov	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fa08 	bl	8000d28 <HAL_GetTick>
 8001918:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fa03 	bl	8000d28 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d902      	bls.n	8001934 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	f000 bd45 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001946:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b3f      	cmp	r3, #63	@ 0x3f
 8001952:	d802      	bhi.n	800195a <HAL_RCC_OscConfig+0x5aa>
 8001954:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e013      	b.n	8001982 <HAL_RCC_OscConfig+0x5d2>
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001972:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_RCC_OscConfig+0x660>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	2202      	movs	r2, #2
 8001984:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001988:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800198c:	fa92 f2a2 	rbit	r2, r2
 8001990:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001994:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001998:	fab2 f282 	clz	r2, r2
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f042 0220 	orr.w	r2, r2, #32
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f002 021f 	and.w	r2, r2, #31
 80019a8:	2101      	movs	r1, #1
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1b4      	bne.n	800191e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8115 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d07e      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x728>
 80019da:	2301      	movs	r3, #1
 80019dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80019ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_RCC_OscConfig+0x664>)
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	461a      	mov	r2, r3
 8001a00:	2301      	movs	r3, #1
 8001a02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff f990 	bl	8000d28 <HAL_GetTick>
 8001a08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0c:	e00f      	b.n	8001a2e <HAL_RCC_OscConfig+0x67e>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f986 	bl	8000d28 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d902      	bls.n	8001a2e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	f000 bcc8 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a48:	2202      	movs	r2, #2
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a88:	4bb0      	ldr	r3, [pc, #704]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a94:	2102      	movs	r1, #2
 8001a96:	6019      	str	r1, [r3, #0]
 8001a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f1a3 	rbit	r1, r3
 8001aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001aae:	6019      	str	r1, [r3, #0]
  return result;
 8001ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0a0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x668>
 8001ad6:	e08d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x844>
 8001ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001adc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001afa:	601a      	str	r2, [r3, #0]
  return result;
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b90      	ldr	r3, [pc, #576]	@ (8001d50 <HAL_RCC_OscConfig+0x9a0>)
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	461a      	mov	r2, r3
 8001b16:	2300      	movs	r3, #0
 8001b18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f905 	bl	8000d28 <HAL_GetTick>
 8001b1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff f900 	bl	8000d28 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d902      	bls.n	8001b3a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f000 bc42 	b.w	80023be <HAL_RCC_OscConfig+0x100e>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b42:	2202      	movs	r2, #2
 8001b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b66:	2202      	movs	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b86:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ba4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	4b69      	ldr	r3, [pc, #420]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001ba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	6019      	str	r1, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f1a3 	rbit	r1, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bcc:	6019      	str	r1, [r3, #0]
  return result;
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d197      	bne.n	8001b24 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 819e 	beq.w	8001f46 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c10:	4b4e      	ldr	r3, [pc, #312]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d116      	bne.n	8001c4a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	4a4a      	ldr	r2, [pc, #296]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	61d3      	str	r3, [r2, #28]
 8001c28:	4b48      	ldr	r3, [pc, #288]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c34:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001c42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b42      	ldr	r3, [pc, #264]	@ (8001d54 <HAL_RCC_OscConfig+0x9a4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b3f      	ldr	r3, [pc, #252]	@ (8001d54 <HAL_RCC_OscConfig+0x9a4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d54 <HAL_RCC_OscConfig+0x9a4>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff f861 	bl	8000d28 <HAL_GetTick>
 8001c66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	e009      	b.n	8001c80 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6c:	f7ff f85c 	bl	8000d28 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b64      	cmp	r3, #100	@ 0x64
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e39e      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_RCC_OscConfig+0x9a4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ef      	beq.n	8001c6c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x8fa>
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e035      	b.n	8001d16 <HAL_RCC_OscConfig+0x966>
 8001caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x924>
 8001cba:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a23      	ldr	r2, [pc, #140]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a20      	ldr	r2, [pc, #128]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	e020      	b.n	8001d16 <HAL_RCC_OscConfig+0x966>
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x94e>
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a15      	ldr	r2, [pc, #84]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x966>
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a12      	ldr	r2, [pc, #72]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <HAL_RCC_OscConfig+0x99c>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8087 	beq.w	8001e36 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7fe fffe 	bl	8000d28 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e012      	b.n	8001d58 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe fff9 	bl	8000d28 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d908      	bls.n	8001d58 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e339      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	10908120 	.word	0x10908120
 8001d54:	40007000 	.word	0x40007000
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d68:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d76:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d80:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d84:	2202      	movs	r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d9e:	601a      	str	r2, [r3, #0]
  return result;
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001da8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xa10>
 8001dba:	4b98      	ldr	r3, [pc, #608]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0xa38>
 8001dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001dc8:	2202      	movs	r2, #2
 8001dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	4b8d      	ldr	r3, [pc, #564]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001df0:	2102      	movs	r1, #2
 8001df2:	6011      	str	r1, [r2, #0]
 8001df4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001df8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	fa92 f1a2 	rbit	r1, r2
 8001e02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e06:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e0a:	6011      	str	r1, [r2, #0]
  return result;
 8001e0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e10:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f002 021f 	and.w	r2, r2, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f43f af7f 	beq.w	8001d32 <HAL_RCC_OscConfig+0x982>
 8001e34:	e07d      	b.n	8001f32 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe ff77 	bl	8000d28 <HAL_GetTick>
 8001e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7fe ff72 	bl	8000d28 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e2b2      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
 8001e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e68:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e76:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e84:	2202      	movs	r2, #2
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ea8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xb10>
 8001eba:	4b58      	ldr	r3, [pc, #352]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	e013      	b.n	8001ee8 <HAL_RCC_OscConfig+0xb38>
 8001ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ec8:	2202      	movs	r2, #2
 8001eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eec:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	6011      	str	r1, [r2, #0]
 8001ef4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ef8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	fa92 f1a2 	rbit	r1, r2
 8001f02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f06:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f0a:	6011      	str	r1, [r2, #0]
  return result;
 8001f0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f10:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d186      	bne.n	8001e40 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f32:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a37      	ldr	r2, [pc, #220]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8232 	beq.w	80023bc <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f58:	4b30      	ldr	r3, [pc, #192]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	f000 8201 	beq.w	8002368 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	f040 8157 	bne.w	8002226 <HAL_RCC_OscConfig+0xe76>
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001f80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f9c:	601a      	str	r2, [r3, #0]
  return result;
 8001f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fa6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fb2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2300      	movs	r3, #0
 8001fbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe feb3 	bl	8000d28 <HAL_GetTick>
 8001fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	e009      	b.n	8001fdc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe feae 	bl	8000d28 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1f0      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
 8001fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fe4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002000:	601a      	str	r2, [r3, #0]
  return result;
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800200a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b3f      	cmp	r3, #63	@ 0x3f
 8002014:	d804      	bhi.n	8002020 <HAL_RCC_OscConfig+0xc70>
 8002016:	4b01      	ldr	r3, [pc, #4]	@ (800201c <HAL_RCC_OscConfig+0xc6c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e029      	b.n	8002070 <HAL_RCC_OscConfig+0xcc0>
 800201c:	40021000 	.word	0x40021000
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800202c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800204e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002066:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	4bc3      	ldr	r3, [pc, #780]	@ (800237c <HAL_RCC_OscConfig+0xfcc>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002074:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002078:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800207c:	6011      	str	r1, [r2, #0]
 800207e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002082:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002090:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002094:	6011      	str	r1, [r2, #0]
  return result;
 8002096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800209a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d185      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4baf      	ldr	r3, [pc, #700]	@ (800237c <HAL_RCC_OscConfig+0xfcc>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	430b      	orrs	r3, r1
 80020de:	49a7      	ldr	r1, [pc, #668]	@ (800237c <HAL_RCC_OscConfig+0xfcc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80020ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	fa93 f2a3 	rbit	r2, r3
 8002100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002104:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002108:	601a      	str	r2, [r3, #0]
  return result;
 800210a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002112:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800211e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	461a      	mov	r2, r3
 8002126:	2301      	movs	r3, #1
 8002128:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe fdfd 	bl	8000d28 <HAL_GetTick>
 800212e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002132:	e009      	b.n	8002148 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fdf8 	bl	8000d28 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e13a      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002150:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002168:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800216c:	601a      	str	r2, [r3, #0]
  return result;
 800216e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002172:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002176:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002180:	d802      	bhi.n	8002188 <HAL_RCC_OscConfig+0xdd8>
 8002182:	4b7e      	ldr	r3, [pc, #504]	@ (800237c <HAL_RCC_OscConfig+0xfcc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	e027      	b.n	80021d8 <HAL_RCC_OscConfig+0xe28>
 8002188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002190:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4b69      	ldr	r3, [pc, #420]	@ (800237c <HAL_RCC_OscConfig+0xfcc>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021dc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80021e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021e4:	6011      	str	r1, [r2, #0]
 80021e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ea:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fa92 f1a2 	rbit	r1, r2
 80021f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021fc:	6011      	str	r1, [r2, #0]
  return result;
 80021fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002202:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f002 021f 	and.w	r2, r2, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d087      	beq.n	8002134 <HAL_RCC_OscConfig+0xd84>
 8002224:	e0ca      	b.n	80023bc <HAL_RCC_OscConfig+0x100c>
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800222e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002246:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800224a:	601a      	str	r2, [r3, #0]
  return result;
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002254:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002260:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	461a      	mov	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fd5c 	bl	8000d28 <HAL_GetTick>
 8002270:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	e009      	b.n	800228a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fd57 	bl	8000d28 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e099      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002292:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022ae:	601a      	str	r2, [r3, #0]
  return result;
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80022c2:	d802      	bhi.n	80022ca <HAL_RCC_OscConfig+0xf1a>
 80022c4:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_RCC_OscConfig+0xfcc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	e027      	b.n	800231a <HAL_RCC_OscConfig+0xf6a>
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022dc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	4b19      	ldr	r3, [pc, #100]	@ (800237c <HAL_RCC_OscConfig+0xfcc>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800231e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002322:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002326:	6011      	str	r1, [r2, #0]
 8002328:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800232c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	fa92 f1a2 	rbit	r1, r2
 8002336:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800233a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800233e:	6011      	str	r1, [r2, #0]
  return result;
 8002340:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002344:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d187      	bne.n	8002276 <HAL_RCC_OscConfig+0xec6>
 8002366:	e029      	b.n	80023bc <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d103      	bne.n	8002380 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e020      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
 800237c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <HAL_RCC_OscConfig+0x1018>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002388:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800238c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	429a      	cmp	r2, r3
 800239e:	d10b      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80023a4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b09e      	sub	sp, #120	@ 0x78
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e154      	b.n	800268e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b89      	ldr	r3, [pc, #548]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b86      	ldr	r3, [pc, #536]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4984      	ldr	r1, [pc, #528]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b82      	ldr	r3, [pc, #520]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e13c      	b.n	800268e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b7b      	ldr	r3, [pc, #492]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4978      	ldr	r1, [pc, #480]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80cd 	beq.w	80025da <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d137      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xec>
 8002448:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800244c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002460:	d802      	bhi.n	8002468 <HAL_RCC_ClockConfig+0x9c>
 8002462:	4b6b      	ldr	r3, [pc, #428]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	e00f      	b.n	8002488 <HAL_RCC_ClockConfig+0xbc>
 8002468:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800246c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	667b      	str	r3, [r7, #100]	@ 0x64
 8002476:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800247a:	663b      	str	r3, [r7, #96]	@ 0x60
 800247c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002484:	4b62      	ldr	r3, [pc, #392]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800248c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800248e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002490:	fa92 f2a2 	rbit	r2, r2
 8002494:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002496:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002498:	fab2 f282 	clz	r2, r2
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f042 0220 	orr.w	r2, r2, #32
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f002 021f 	and.w	r2, r2, #31
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f202 	lsl.w	r2, r1, r2
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d171      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0ea      	b.n	800268e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d137      	bne.n	8002530 <HAL_RCC_ClockConfig+0x164>
 80024c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80024d8:	d802      	bhi.n	80024e0 <HAL_RCC_ClockConfig+0x114>
 80024da:	4b4d      	ldr	r3, [pc, #308]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e00f      	b.n	8002500 <HAL_RCC_ClockConfig+0x134>
 80024e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80024f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024fc:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002504:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002506:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002508:	fa92 f2a2 	rbit	r2, r2
 800250c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800250e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d135      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0ae      	b.n	800268e <HAL_RCC_ClockConfig+0x2c2>
 8002530:	2302      	movs	r3, #2
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800253c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b3f      	cmp	r3, #63	@ 0x3f
 8002546:	d802      	bhi.n	800254e <HAL_RCC_ClockConfig+0x182>
 8002548:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	e00d      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
 800254e:	2302      	movs	r3, #2
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
 800255a:	2302      	movs	r3, #2
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	4b2a      	ldr	r3, [pc, #168]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	2202      	movs	r2, #2
 800256c:	61ba      	str	r2, [r7, #24]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	fa92 f2a2 	rbit	r2, r2
 8002574:	617a      	str	r2, [r7, #20]
  return result;
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	fab2 f282 	clz	r2, r2
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f042 0220 	orr.w	r2, r2, #32
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f002 021f 	and.w	r2, r2, #31
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e07a      	b.n	800268e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 0203 	bic.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	491a      	ldr	r1, [pc, #104]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025aa:	f7fe fbbd 	bl	8000d28 <HAL_GetTick>
 80025ae:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7fe fbb9 	bl	8000d28 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e062      	b.n	800268e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_RCC_ClockConfig+0x244>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 020c 	and.w	r2, r3, #12
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d1eb      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d215      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 0207 	bic.w	r2, r3, #7
 80025f0:	4906      	ldr	r1, [pc, #24]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f8:	4b04      	ldr	r3, [pc, #16]	@ (800260c <HAL_RCC_ClockConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d006      	beq.n	8002614 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e041      	b.n	800268e <HAL_RCC_ClockConfig+0x2c2>
 800260a:	bf00      	nop
 800260c:	40022000 	.word	0x40022000
 8002610:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <HAL_RCC_ClockConfig+0x2cc>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	491a      	ldr	r1, [pc, #104]	@ (8002698 <HAL_RCC_ClockConfig+0x2cc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <HAL_RCC_ClockConfig+0x2cc>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4912      	ldr	r1, [pc, #72]	@ (8002698 <HAL_RCC_ClockConfig+0x2cc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002652:	f000 f829 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002656:	4601      	mov	r1, r0
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_RCC_ClockConfig+0x2cc>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002660:	22f0      	movs	r2, #240	@ 0xf0
 8002662:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	fa92 f2a2 	rbit	r2, r2
 800266a:	60fa      	str	r2, [r7, #12]
  return result;
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	40d3      	lsrs	r3, r2
 8002676:	4a09      	ldr	r2, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x2d0>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	fa21 f303 	lsr.w	r3, r1, r3
 800267e:	4a08      	ldr	r2, [pc, #32]	@ (80026a0 <HAL_RCC_ClockConfig+0x2d4>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HAL_RCC_ClockConfig+0x2d8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fb0a 	bl	8000ca0 <HAL_InitTick>
  
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3778      	adds	r7, #120	@ 0x78
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	08005b18 	.word	0x08005b18
 80026a0:	20000004 	.word	0x20000004
 80026a4:	20000008 	.word	0x20000008

080026a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <HAL_RCC_GetSysClockFreq+0x94>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d002      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x30>
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x36>
 80026d6:	e026      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x98>)
 80026da:	613b      	str	r3, [r7, #16]
      break;
 80026dc:	e026      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	0c9b      	lsrs	r3, r3, #18
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <HAL_RCC_GetSysClockFreq+0x94>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002704:	4a0e      	ldr	r2, [pc, #56]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x98>)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	fbb2 f2f3 	udiv	r2, r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e004      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a0c      	ldr	r2, [pc, #48]	@ (800274c <HAL_RCC_GetSysClockFreq+0xa4>)
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	613b      	str	r3, [r7, #16]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x98>)
 8002728:	613b      	str	r3, [r7, #16]
      break;
 800272a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272c:	693b      	ldr	r3, [r7, #16]
}
 800272e:	4618      	mov	r0, r3
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	007a1200 	.word	0x007a1200
 8002744:	08005b30 	.word	0x08005b30
 8002748:	08005b40 	.word	0x08005b40
 800274c:	003d0900 	.word	0x003d0900

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <HAL_RCC_GetHCLKFreq+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800276e:	f7ff ffef 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002772:	4601      	mov	r1, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800277c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002780:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	fa92 f2a2 	rbit	r2, r2
 8002788:	603a      	str	r2, [r7, #0]
  return result;
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	40d3      	lsrs	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08005b28 	.word	0x08005b28

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027b2:	f7ff ffcd 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80027c0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80027c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	603a      	str	r2, [r7, #0]
  return result;
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	40d3      	lsrs	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08005b28 	.word	0x08005b28

080027f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b092      	sub	sp, #72	@ 0x48
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80d2 	beq.w	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002814:	4b4d      	ldr	r3, [pc, #308]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10e      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b4a      	ldr	r3, [pc, #296]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4a49      	ldr	r2, [pc, #292]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800282a:	61d3      	str	r3, [r2, #28]
 800282c:	4b47      	ldr	r3, [pc, #284]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b44      	ldr	r3, [pc, #272]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d118      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284a:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a40      	ldr	r2, [pc, #256]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002854:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7fe fa67 	bl	8000d28 <HAL_GetTick>
 800285a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	e008      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7fe fa63 	bl	8000d28 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	@ 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e167      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800287c:	4b33      	ldr	r3, [pc, #204]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002884:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8082 	beq.w	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002896:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002898:	429a      	cmp	r2, r3
 800289a:	d07a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800289c:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	2301      	movs	r3, #1
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	461a      	mov	r2, r3
 80028ea:	2300      	movs	r3, #0
 80028ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ee:	4a17      	ldr	r2, [pc, #92]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d049      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fa13 	bl	8000d28 <HAL_GetTick>
 8002902:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fa0f 	bl	8000d28 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e111      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800291c:	2302      	movs	r3, #2
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
 8002928:	2302      	movs	r3, #2
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	61fb      	str	r3, [r7, #28]
  return result;
 8002934:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d108      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002946:	4b01      	ldr	r3, [pc, #4]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	e00d      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800294c:	40021000 	.word	0x40021000
 8002950:	40007000 	.word	0x40007000
 8002954:	10908100 	.word	0x10908100
 8002958:	2302      	movs	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	4b78      	ldr	r3, [pc, #480]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	2202      	movs	r2, #2
 800296a:	613a      	str	r2, [r7, #16]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	fa92 f2a2 	rbit	r2, r2
 8002972:	60fa      	str	r2, [r7, #12]
  return result;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	fab2 f282 	clz	r2, r2
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f002 021f 	and.w	r2, r2, #31
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0b9      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002992:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	496a      	ldr	r1, [pc, #424]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a65      	ldr	r2, [pc, #404]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029c4:	4b60      	ldr	r3, [pc, #384]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	f023 0203 	bic.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	495d      	ldr	r1, [pc, #372]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e2:	4b59      	ldr	r3, [pc, #356]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4956      	ldr	r1, [pc, #344]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a00:	4b51      	ldr	r3, [pc, #324]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	494e      	ldr	r1, [pc, #312]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f023 0210 	bic.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4947      	ldr	r1, [pc, #284]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a3c:	4b42      	ldr	r3, [pc, #264]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a48:	493f      	ldr	r1, [pc, #252]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	f023 0220 	bic.w	r2, r3, #32
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4938      	ldr	r1, [pc, #224]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a78:	4b33      	ldr	r3, [pc, #204]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4930      	ldr	r1, [pc, #192]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a96:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4929      	ldr	r1, [pc, #164]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ab4:	4b24      	ldr	r3, [pc, #144]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	4921      	ldr	r1, [pc, #132]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	491a      	ldr	r1, [pc, #104]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002af0:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	4912      	ldr	r1, [pc, #72]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	490b      	ldr	r1, [pc, #44]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b38:	4903      	ldr	r1, [pc, #12]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3748      	adds	r7, #72	@ 0x48
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e049      	b.n	8002bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fd ff5c 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 fede 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e049      	b.n	8002ca0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f841 	bl	8002ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f000 fe87 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_TIM_PWM_Start+0x24>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e03c      	b.n	8002d5a <HAL_TIM_PWM_Start+0x9e>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d109      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x3e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e02f      	b.n	8002d5a <HAL_TIM_PWM_Start+0x9e>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d109      	bne.n	8002d14 <HAL_TIM_PWM_Start+0x58>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e022      	b.n	8002d5a <HAL_TIM_PWM_Start+0x9e>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d109      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x72>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e015      	b.n	8002d5a <HAL_TIM_PWM_Start+0x9e>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d109      	bne.n	8002d48 <HAL_TIM_PWM_Start+0x8c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e008      	b.n	8002d5a <HAL_TIM_PWM_Start+0x9e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e097      	b.n	8002e92 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_PWM_Start+0xb6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d70:	e023      	b.n	8002dba <HAL_TIM_PWM_Start+0xfe>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d104      	bne.n	8002d82 <HAL_TIM_PWM_Start+0xc6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d80:	e01b      	b.n	8002dba <HAL_TIM_PWM_Start+0xfe>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_PWM_Start+0xd6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d90:	e013      	b.n	8002dba <HAL_TIM_PWM_Start+0xfe>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0xe6>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_PWM_Start+0xfe>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xf6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db0:	e003      	b.n	8002dba <HAL_TIM_PWM_Start+0xfe>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 faec 	bl	80043a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a33      	ldr	r2, [pc, #204]	@ (8002e9c <HAL_TIM_PWM_Start+0x1e0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x13e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a32      	ldr	r2, [pc, #200]	@ (8002ea0 <HAL_TIM_PWM_Start+0x1e4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x13e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a30      	ldr	r2, [pc, #192]	@ (8002ea4 <HAL_TIM_PWM_Start+0x1e8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x13e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea8 <HAL_TIM_PWM_Start+0x1ec>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x13e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	@ (8002eac <HAL_TIM_PWM_Start+0x1f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_Start+0x142>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_TIM_PWM_Start+0x144>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a20      	ldr	r2, [pc, #128]	@ (8002e9c <HAL_TIM_PWM_Start+0x1e0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d018      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x194>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e26:	d013      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x194>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <HAL_TIM_PWM_Start+0x1f4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x194>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_TIM_PWM_Start+0x1f8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x194>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <HAL_TIM_PWM_Start+0x1e4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x194>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ea4 <HAL_TIM_PWM_Start+0x1e8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d115      	bne.n	8002e7c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <HAL_TIM_PWM_Start+0x1fc>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d015      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x1d2>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e68:	d011      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	e008      	b.n	8002e8e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e000      	b.n	8002e90 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40013400 	.word	0x40013400
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40014400 	.word	0x40014400
 8002eac:	40014800 	.word	0x40014800
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	00010007 	.word	0x00010007

08002ebc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e049      	b.n	8002f62 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fd5c 	bl	80009a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f000 fd26 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_IC_Start_IT+0x1e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e023      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_IC_Start_IT+0x2e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e01b      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_IC_Start_IT+0x3e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e013      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_IC_Start_IT+0x4e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e00b      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_IC_Start_IT+0x5e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e003      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_TIM_IC_Start_IT+0x78>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e013      	b.n	800300c <HAL_TIM_IC_Start_IT+0xa0>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d104      	bne.n	8002ff4 <HAL_TIM_IC_Start_IT+0x88>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e00b      	b.n	800300c <HAL_TIM_IC_Start_IT+0xa0>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d104      	bne.n	8003004 <HAL_TIM_IC_Start_IT+0x98>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e003      	b.n	800300c <HAL_TIM_IC_Start_IT+0xa0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800300a:	b2db      	uxtb	r3, r3
 800300c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003014:	7b7b      	ldrb	r3, [r7, #13]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0d8      	b.n	80031d0 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <HAL_TIM_IC_Start_IT+0xc2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800302c:	e023      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d104      	bne.n	800303e <HAL_TIM_IC_Start_IT+0xd2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800303c:	e01b      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d104      	bne.n	800304e <HAL_TIM_IC_Start_IT+0xe2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800304c:	e013      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d104      	bne.n	800305e <HAL_TIM_IC_Start_IT+0xf2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800305c:	e00b      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b10      	cmp	r3, #16
 8003062:	d104      	bne.n	800306e <HAL_TIM_IC_Start_IT+0x102>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306c:	e003      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <HAL_TIM_IC_Start_IT+0x11a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003084:	e013      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x142>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d104      	bne.n	8003096 <HAL_TIM_IC_Start_IT+0x12a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003094:	e00b      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x142>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_IC_Start_IT+0x13a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030a4:	e003      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x142>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d841      	bhi.n	8003138 <HAL_TIM_IC_Start_IT+0x1cc>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <HAL_TIM_IC_Start_IT+0x150>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003139 	.word	0x08003139
 80030c4:	08003139 	.word	0x08003139
 80030c8:	08003139 	.word	0x08003139
 80030cc:	08003103 	.word	0x08003103
 80030d0:	08003139 	.word	0x08003139
 80030d4:	08003139 	.word	0x08003139
 80030d8:	08003139 	.word	0x08003139
 80030dc:	08003115 	.word	0x08003115
 80030e0:	08003139 	.word	0x08003139
 80030e4:	08003139 	.word	0x08003139
 80030e8:	08003139 	.word	0x08003139
 80030ec:	08003127 	.word	0x08003127
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0202 	orr.w	r2, r2, #2
 80030fe:	60da      	str	r2, [r3, #12]
      break;
 8003100:	e01d      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0204 	orr.w	r2, r2, #4
 8003110:	60da      	str	r2, [r3, #12]
      break;
 8003112:	e014      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	60da      	str	r2, [r3, #12]
      break;
 8003124:	e00b      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0210 	orr.w	r2, r2, #16
 8003134:	60da      	str	r2, [r3, #12]
      break;
 8003136:	e002      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	bf00      	nop
  }

  if (status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d144      	bne.n	80031ce <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2201      	movs	r2, #1
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f927 	bl	80043a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a20      	ldr	r2, [pc, #128]	@ (80031d8 <HAL_TIM_IC_Start_IT+0x26c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_TIM_IC_Start_IT+0x222>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003164:	d013      	beq.n	800318e <HAL_TIM_IC_Start_IT+0x222>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <HAL_TIM_IC_Start_IT+0x270>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_TIM_IC_Start_IT+0x222>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1a      	ldr	r2, [pc, #104]	@ (80031e0 <HAL_TIM_IC_Start_IT+0x274>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_TIM_IC_Start_IT+0x222>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <HAL_TIM_IC_Start_IT+0x278>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_TIM_IC_Start_IT+0x222>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <HAL_TIM_IC_Start_IT+0x27c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d115      	bne.n	80031ba <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <HAL_TIM_IC_Start_IT+0x280>)
 8003196:	4013      	ands	r3, r2
 8003198:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b06      	cmp	r3, #6
 800319e:	d015      	beq.n	80031cc <HAL_TIM_IC_Start_IT+0x260>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a6:	d011      	beq.n	80031cc <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	e008      	b.n	80031cc <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e000      	b.n	80031ce <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40013400 	.word	0x40013400
 80031e8:	40014000 	.word	0x40014000
 80031ec:	00010007 	.word	0x00010007

080031f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0202 	mvn.w	r2, #2
 8003224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fb67 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb59 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fb6a 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d020      	beq.n	80032a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0204 	mvn.w	r2, #4
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fb41 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fb33 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fb44 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d020      	beq.n	80032ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0208 	mvn.w	r2, #8
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2204      	movs	r2, #4
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fb1b 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fb0d 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fb1e 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d020      	beq.n	8003338 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01b      	beq.n	8003338 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0210 	mvn.w	r2, #16
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2208      	movs	r2, #8
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 faf5 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fae7 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 faf8 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0201 	mvn.w	r2, #1
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fac5 	bl	80038e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f001 f8c0 	bl	8004500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f001 f8b8 	bl	8004514 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fab7 	bl	8003936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0220 	mvn.w	r2, #32
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f001 f880 	bl	80044ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_TIM_IC_ConfigChannel+0x1e>
 800340e:	2302      	movs	r3, #2
 8003410:	e088      	b.n	8003524 <HAL_TIM_IC_ConfigChannel+0x130>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003430:	f000 fdfe 	bl	8004030 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020c 	bic.w	r2, r2, #12
 8003442:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	e060      	b.n	800351a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b04      	cmp	r3, #4
 800345c:	d11c      	bne.n	8003498 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800346e:	f000 fe76 	bl	800415e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003480:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6999      	ldr	r1, [r3, #24]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	619a      	str	r2, [r3, #24]
 8003496:	e040      	b.n	800351a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11b      	bne.n	80034d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80034ae:	f000 fec3 	bl	8004238 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 020c 	bic.w	r2, r2, #12
 80034c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
 80034d4:	e021      	b.n	800351a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	d11c      	bne.n	8003516 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80034ec:	f000 fee0 	bl	80042b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80034fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69d9      	ldr	r1, [r3, #28]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	021a      	lsls	r2, r3, #8
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	61da      	str	r2, [r3, #28]
 8003514:	e001      	b.n	800351a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003546:	2302      	movs	r3, #2
 8003548:	e0ff      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b14      	cmp	r3, #20
 8003556:	f200 80f0 	bhi.w	800373a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035b5 	.word	0x080035b5
 8003564:	0800373b 	.word	0x0800373b
 8003568:	0800373b 	.word	0x0800373b
 800356c:	0800373b 	.word	0x0800373b
 8003570:	080035f5 	.word	0x080035f5
 8003574:	0800373b 	.word	0x0800373b
 8003578:	0800373b 	.word	0x0800373b
 800357c:	0800373b 	.word	0x0800373b
 8003580:	08003637 	.word	0x08003637
 8003584:	0800373b 	.word	0x0800373b
 8003588:	0800373b 	.word	0x0800373b
 800358c:	0800373b 	.word	0x0800373b
 8003590:	08003677 	.word	0x08003677
 8003594:	0800373b 	.word	0x0800373b
 8003598:	0800373b 	.word	0x0800373b
 800359c:	0800373b 	.word	0x0800373b
 80035a0:	080036b9 	.word	0x080036b9
 80035a4:	0800373b 	.word	0x0800373b
 80035a8:	0800373b 	.word	0x0800373b
 80035ac:	0800373b 	.word	0x0800373b
 80035b0:	080036f9 	.word	0x080036f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa62 	bl	8003a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
      break;
 80035f2:	e0a5      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fad2 	bl	8003ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e084      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fb3b 	bl	8003cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
      break;
 8003674:	e064      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fba3 	bl	8003dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	61da      	str	r2, [r3, #28]
      break;
 80036b6:	e043      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fbec 	bl	8003e9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0208 	orr.w	r2, r2, #8
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036f6:	e023      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fc30 	bl	8003f64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003712:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003738:	e002      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop

08003754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIM_ConfigClockSource+0x1c>
 800376c:	2302      	movs	r3, #2
 800376e:	e0b6      	b.n	80038de <HAL_TIM_ConfigClockSource+0x18a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800379a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ac:	d03e      	beq.n	800382c <HAL_TIM_ConfigClockSource+0xd8>
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b2:	f200 8087 	bhi.w	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ba:	f000 8086 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x176>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c2:	d87f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037c4:	2b70      	cmp	r3, #112	@ 0x70
 80037c6:	d01a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xaa>
 80037c8:	2b70      	cmp	r3, #112	@ 0x70
 80037ca:	d87b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037cc:	2b60      	cmp	r3, #96	@ 0x60
 80037ce:	d050      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x11e>
 80037d0:	2b60      	cmp	r3, #96	@ 0x60
 80037d2:	d877      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037d4:	2b50      	cmp	r3, #80	@ 0x50
 80037d6:	d03c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xfe>
 80037d8:	2b50      	cmp	r3, #80	@ 0x50
 80037da:	d873      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037dc:	2b40      	cmp	r3, #64	@ 0x40
 80037de:	d058      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x13e>
 80037e0:	2b40      	cmp	r3, #64	@ 0x40
 80037e2:	d86f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037e4:	2b30      	cmp	r3, #48	@ 0x30
 80037e6:	d064      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037e8:	2b30      	cmp	r3, #48	@ 0x30
 80037ea:	d86b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d060      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d867      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d05a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037fc:	e062      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800380e:	f000 fda7 	bl	8004360 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
      break;
 800382a:	e04f      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800383c:	f000 fd90 	bl	8004360 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800384e:	609a      	str	r2, [r3, #8]
      break;
 8003850:	e03c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	461a      	mov	r2, r3
 8003860:	f000 fc4e 	bl	8004100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2150      	movs	r1, #80	@ 0x50
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fd5d 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 8003870:	e02c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800387e:	461a      	mov	r2, r3
 8003880:	f000 fcaa 	bl	80041d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2160      	movs	r1, #96	@ 0x60
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fd4d 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 8003890:	e01c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 fc2e 	bl	8004100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2140      	movs	r1, #64	@ 0x40
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fd3d 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 80038b0:	e00c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 fd34 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 80038c2:	e003      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e000      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a42      	ldr	r2, [pc, #264]	@ (8003a68 <TIM_Base_SetConfig+0x11c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00f      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396a:	d00b      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a6c <TIM_Base_SetConfig+0x120>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d007      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3e      	ldr	r2, [pc, #248]	@ (8003a70 <TIM_Base_SetConfig+0x124>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a74 <TIM_Base_SetConfig+0x128>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d108      	bne.n	8003996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a33      	ldr	r2, [pc, #204]	@ (8003a68 <TIM_Base_SetConfig+0x11c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01b      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a4:	d017      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a30      	ldr	r2, [pc, #192]	@ (8003a6c <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003a70 <TIM_Base_SetConfig+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a74 <TIM_Base_SetConfig+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a7c <TIM_Base_SetConfig+0x130>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a80 <TIM_Base_SetConfig+0x134>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	@ (8003a68 <TIM_Base_SetConfig+0x11c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00f      	beq.n	8003a34 <TIM_Base_SetConfig+0xe8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a17      	ldr	r2, [pc, #92]	@ (8003a74 <TIM_Base_SetConfig+0x128>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0xe8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0xe8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <TIM_Base_SetConfig+0x130>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0xe8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <TIM_Base_SetConfig+0x134>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d105      	bne.n	8003a5a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f023 0201 	bic.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	611a      	str	r2, [r3, #16]
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800

08003a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0201 	bic.w	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 0302 	bic.w	r3, r3, #2
 8003ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	@ (8003b90 <TIM_OC1_SetConfig+0x10c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00f      	beq.n	8003b04 <TIM_OC1_SetConfig+0x80>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b94 <TIM_OC1_SetConfig+0x110>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <TIM_OC1_SetConfig+0x80>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <TIM_OC1_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <TIM_OC1_SetConfig+0x80>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a29      	ldr	r2, [pc, #164]	@ (8003b9c <TIM_OC1_SetConfig+0x118>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_OC1_SetConfig+0x80>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a28      	ldr	r2, [pc, #160]	@ (8003ba0 <TIM_OC1_SetConfig+0x11c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10c      	bne.n	8003b1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0308 	bic.w	r3, r3, #8
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1b      	ldr	r2, [pc, #108]	@ (8003b90 <TIM_OC1_SetConfig+0x10c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00f      	beq.n	8003b46 <TIM_OC1_SetConfig+0xc2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1a      	ldr	r2, [pc, #104]	@ (8003b94 <TIM_OC1_SetConfig+0x110>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <TIM_OC1_SetConfig+0xc2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a19      	ldr	r2, [pc, #100]	@ (8003b98 <TIM_OC1_SetConfig+0x114>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <TIM_OC1_SetConfig+0xc2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a18      	ldr	r2, [pc, #96]	@ (8003b9c <TIM_OC1_SetConfig+0x118>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_OC1_SetConfig+0xc2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <TIM_OC1_SetConfig+0x11c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d111      	bne.n	8003b6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40013400 	.word	0x40013400
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800

08003ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f023 0210 	bic.w	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0320 	bic.w	r3, r3, #32
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a28      	ldr	r2, [pc, #160]	@ (8003ca4 <TIM_OC2_SetConfig+0x100>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC2_SetConfig+0x6c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ca8 <TIM_OC2_SetConfig+0x104>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10d      	bne.n	8003c2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca4 <TIM_OC2_SetConfig+0x100>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00f      	beq.n	8003c54 <TIM_OC2_SetConfig+0xb0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca8 <TIM_OC2_SetConfig+0x104>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_OC2_SetConfig+0xb0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cac <TIM_OC2_SetConfig+0x108>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <TIM_OC2_SetConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <TIM_OC2_SetConfig+0x10c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC2_SetConfig+0xb0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a19      	ldr	r2, [pc, #100]	@ (8003cb4 <TIM_OC2_SetConfig+0x110>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d113      	bne.n	8003c7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c5a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c62:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <TIM_OC3_SetConfig+0xfc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_OC3_SetConfig+0x6a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	@ (8003db8 <TIM_OC3_SetConfig+0x100>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10d      	bne.n	8003d3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d3c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <TIM_OC3_SetConfig+0xfc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <TIM_OC3_SetConfig+0xae>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <TIM_OC3_SetConfig+0x100>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <TIM_OC3_SetConfig+0xae>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1a      	ldr	r2, [pc, #104]	@ (8003dbc <TIM_OC3_SetConfig+0x104>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_OC3_SetConfig+0xae>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a19      	ldr	r2, [pc, #100]	@ (8003dc0 <TIM_OC3_SetConfig+0x108>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_OC3_SetConfig+0xae>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <TIM_OC3_SetConfig+0x10c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d113      	bne.n	8003d8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40013400 	.word	0x40013400
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800

08003dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <TIM_OC4_SetConfig+0xc0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00f      	beq.n	8003e4c <TIM_OC4_SetConfig+0x84>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <TIM_OC4_SetConfig+0xc4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00b      	beq.n	8003e4c <TIM_OC4_SetConfig+0x84>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <TIM_OC4_SetConfig+0xc8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_OC4_SetConfig+0x84>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a15      	ldr	r2, [pc, #84]	@ (8003e94 <TIM_OC4_SetConfig+0xcc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_OC4_SetConfig+0x84>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a14      	ldr	r2, [pc, #80]	@ (8003e98 <TIM_OC4_SetConfig+0xd0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d109      	bne.n	8003e60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800

08003e9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ee0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	@ (8003f50 <TIM_OC5_SetConfig+0xb4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_OC5_SetConfig+0x7a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a16      	ldr	r2, [pc, #88]	@ (8003f54 <TIM_OC5_SetConfig+0xb8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_OC5_SetConfig+0x7a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a15      	ldr	r2, [pc, #84]	@ (8003f58 <TIM_OC5_SetConfig+0xbc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_OC5_SetConfig+0x7a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a14      	ldr	r2, [pc, #80]	@ (8003f5c <TIM_OC5_SetConfig+0xc0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_OC5_SetConfig+0x7a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a13      	ldr	r2, [pc, #76]	@ (8003f60 <TIM_OC5_SetConfig+0xc4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d109      	bne.n	8003f2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	621a      	str	r2, [r3, #32]
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40013400 	.word	0x40013400
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800

08003f64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	051b      	lsls	r3, r3, #20
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a18      	ldr	r2, [pc, #96]	@ (800401c <TIM_OC6_SetConfig+0xb8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x7c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <TIM_OC6_SetConfig+0xbc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x7c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a16      	ldr	r2, [pc, #88]	@ (8004024 <TIM_OC6_SetConfig+0xc0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x7c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a15      	ldr	r2, [pc, #84]	@ (8004028 <TIM_OC6_SetConfig+0xc4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x7c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a14      	ldr	r2, [pc, #80]	@ (800402c <TIM_OC6_SetConfig+0xc8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d109      	bne.n	8003ff4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	029b      	lsls	r3, r3, #10
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40013400 	.word	0x40013400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800

08004030 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f023 0201 	bic.w	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a24      	ldr	r2, [pc, #144]	@ (80040ec <TIM_TI1_SetConfig+0xbc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <TIM_TI1_SetConfig+0x56>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004064:	d00f      	beq.n	8004086 <TIM_TI1_SetConfig+0x56>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a21      	ldr	r2, [pc, #132]	@ (80040f0 <TIM_TI1_SetConfig+0xc0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00b      	beq.n	8004086 <TIM_TI1_SetConfig+0x56>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <TIM_TI1_SetConfig+0xc4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <TIM_TI1_SetConfig+0x56>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <TIM_TI1_SetConfig+0xc8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <TIM_TI1_SetConfig+0x56>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <TIM_TI1_SetConfig+0xcc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <TIM_TI1_SetConfig+0x5a>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <TIM_TI1_SetConfig+0x5c>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e003      	b.n	80040aa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f023 030a 	bic.w	r3, r3, #10
 80040c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f003 030a 	and.w	r3, r3, #10
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40013400 	.word	0x40013400
 80040fc:	40014000 	.word	0x40014000

08004100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800412a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 030a 	bic.w	r3, r3, #10
 800413c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800415e:	b480      	push	{r7}
 8004160:	b087      	sub	sp, #28
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0210 	bic.w	r2, r3, #16
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800418a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800419c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	031b      	lsls	r3, r3, #12
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	031b      	lsls	r3, r3, #12
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004214:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	621a      	str	r2, [r3, #32]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f023 0303 	bic.w	r3, r3, #3
 8004264:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004274:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	b2db      	uxtb	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	031b      	lsls	r3, r3, #12
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004302:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	031b      	lsls	r3, r3, #12
 8004308:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	f043 0307 	orr.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800437a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	021a      	lsls	r2, r3, #8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	431a      	orrs	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4313      	orrs	r3, r2
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	2201      	movs	r2, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	401a      	ands	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004400:	2302      	movs	r3, #2
 8004402:	e063      	b.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2a      	ldr	r2, [pc, #168]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800443e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d018      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004476:	d013      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	@ (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a12      	ldr	r2, [pc, #72]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a13      	ldr	r2, [pc, #76]	@ (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10c      	bne.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40014000 	.word	0x40014000

080044ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e040      	b.n	80045bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fc fac6 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	@ 0x24
 8004554:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fdd0 	bl	8005114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fbf9 	bl	8004d6c <UART_SetConfig>
 800457a:	4603      	mov	r3, r0
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e01b      	b.n	80045bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fe4f 	bl	8005258 <UART_CheckIdleState>
 80045ba:	4603      	mov	r3, r0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d177      	bne.n	80046cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_UART_Transmit+0x24>
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e070      	b.n	80046ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2221      	movs	r2, #33	@ 0x21
 80045f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045fa:	f7fc fb95 	bl	8000d28 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004618:	d108      	bne.n	800462c <HAL_UART_Transmit+0x68>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e003      	b.n	8004634 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004634:	e02f      	b.n	8004696 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	2180      	movs	r1, #128	@ 0x80
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 feb1 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e03b      	b.n	80046ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	881a      	ldrh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004668:	b292      	uxth	r2, r2
 800466a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	3302      	adds	r3, #2
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	e007      	b.n	8004684 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3301      	adds	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1c9      	bne.n	8004636 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2140      	movs	r1, #64	@ 0x40
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fe7b 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e005      	b.n	80046ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b08a      	sub	sp, #40	@ 0x28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	4613      	mov	r3, r2
 80046e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d132      	bne.n	8004754 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_UART_Receive_IT+0x24>
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e02b      	b.n	8004756 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	613b      	str	r3, [r7, #16]
   return(result);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	69f9      	ldr	r1, [r7, #28]
 8004736:	6a3a      	ldr	r2, [r7, #32]
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	61bb      	str	r3, [r7, #24]
   return(result);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e6      	bne.n	8004712 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	461a      	mov	r2, r3
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fe9a 	bl	8005484 <UART_Start_Receive_IT>
 8004750:	4603      	mov	r3, r0
 8004752:	e000      	b.n	8004756 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3728      	adds	r7, #40	@ 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b0ba      	sub	sp, #232	@ 0xe8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800478a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800478e:	4013      	ands	r3, r2
 8004790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d115      	bne.n	80047c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 82ab 	beq.w	8004d14 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
      }
      return;
 80047c6:	e2a5      	b.n	8004d14 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8117 	beq.w	8004a00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80047e2:	4b85      	ldr	r3, [pc, #532]	@ (80049f8 <HAL_UART_IRQHandler+0x298>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 810a 	beq.w	8004a00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d011      	beq.n	800481c <HAL_UART_IRQHandler+0xbc>
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800481c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d011      	beq.n	800484c <HAL_UART_IRQHandler+0xec>
 8004828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2202      	movs	r2, #2
 800483a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004842:	f043 0204 	orr.w	r2, r3, #4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800484c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d011      	beq.n	800487c <HAL_UART_IRQHandler+0x11c>
 8004858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2204      	movs	r2, #4
 800486a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004872:	f043 0202 	orr.w	r2, r3, #2
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800487c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d017      	beq.n	80048b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2208      	movs	r2, #8
 80048a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ae:	f043 0208 	orr.w	r2, r3, #8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d012      	beq.n	80048ea <HAL_UART_IRQHandler+0x18a>
 80048c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00c      	beq.n	80048ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8211 	beq.w	8004d18 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004924:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04f      	beq.n	80049e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fe52 	bl	80055ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004952:	2b40      	cmp	r3, #64	@ 0x40
 8004954:	d141      	bne.n	80049da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800496c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3308      	adds	r3, #8
 800497e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004982:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800498e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800499a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1d9      	bne.n	8004956 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d013      	beq.n	80049d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ae:	4a13      	ldr	r2, [pc, #76]	@ (80049fc <HAL_UART_IRQHandler+0x29c>)
 80049b0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fc fb11 	bl	8000fde <HAL_DMA_Abort_IT>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d017      	beq.n	80049f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049cc:	4610      	mov	r0, r2
 80049ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d0:	e00f      	b.n	80049f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9b4 	bl	8004d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	e00b      	b.n	80049f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9b0 	bl	8004d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	e007      	b.n	80049f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9ac 	bl	8004d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80049f0:	e192      	b.n	8004d18 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f2:	bf00      	nop
    return;
 80049f4:	e190      	b.n	8004d18 <HAL_UART_IRQHandler+0x5b8>
 80049f6:	bf00      	nop
 80049f8:	04000120 	.word	0x04000120
 80049fc:	080056b5 	.word	0x080056b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	f040 814b 	bne.w	8004ca0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8144 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 813d 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	f040 80b5 	bne.w	8004ba8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8164 	beq.w	8004d1c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	f080 815c 	bcs.w	8004d1c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	f000 8086 	beq.w	8004b86 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004aa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004aa8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ab0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1da      	bne.n	8004a7a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ae8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004af0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004afa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e1      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e3      	bne.n	8004b00 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b56:	f023 0310 	bic.w	r3, r3, #16
 8004b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b6a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e4      	bne.n	8004b46 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc f9ee 	bl	8000f62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8d7 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ba6:	e0b9      	b.n	8004d1c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80ab 	beq.w	8004d20 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004bca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a6 	beq.w	8004d20 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e4      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	623b      	str	r3, [r7, #32]
   return(result);
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e3      	bne.n	8004c0a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0310 	bic.w	r3, r3, #16
 8004c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	69b9      	ldr	r1, [r7, #24]
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	617b      	str	r3, [r7, #20]
   return(result);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e4      	bne.n	8004c56 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f85b 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c9e:	e03f      	b.n	8004d20 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <HAL_UART_IRQHandler+0x56a>
 8004cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fede 	bl	8005a84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cc8:	e02d      	b.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01c      	beq.n	8004d24 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
    }
    return;
 8004cf2:	e017      	b.n	8004d24 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d012      	beq.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00c      	beq.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fce7 	bl	80056e0 <UART_EndTransmit_IT>
    return;
 8004d12:	e008      	b.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d14:	bf00      	nop
 8004d16:	e006      	b.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d18:	bf00      	nop
 8004d1a:	e004      	b.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d1c:	bf00      	nop
 8004d1e:	e002      	b.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d24:	bf00      	nop
  }

}
 8004d26:	37e8      	adds	r7, #232	@ 0xe8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004d9a:	f023 030c 	bic.w	r3, r3, #12
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	6979      	ldr	r1, [r7, #20]
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4aa7      	ldr	r2, [pc, #668]	@ (8005084 <UART_SetConfig+0x318>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d120      	bne.n	8004e2e <UART_SetConfig+0xc2>
 8004dec:	4ba6      	ldr	r3, [pc, #664]	@ (8005088 <UART_SetConfig+0x31c>)
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d817      	bhi.n	8004e28 <UART_SetConfig+0xbc>
 8004df8:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <UART_SetConfig+0x94>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e1d 	.word	0x08004e1d
 8004e08:	08004e23 	.word	0x08004e23
 8004e0c:	08004e17 	.word	0x08004e17
 8004e10:	2301      	movs	r3, #1
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e0b5      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e16:	2302      	movs	r3, #2
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e0b2      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e0af      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e22:	2308      	movs	r3, #8
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e0ac      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e0a9      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a96      	ldr	r2, [pc, #600]	@ (800508c <UART_SetConfig+0x320>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d124      	bne.n	8004e82 <UART_SetConfig+0x116>
 8004e38:	4b93      	ldr	r3, [pc, #588]	@ (8005088 <UART_SetConfig+0x31c>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e44:	d011      	beq.n	8004e6a <UART_SetConfig+0xfe>
 8004e46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e4a:	d817      	bhi.n	8004e7c <UART_SetConfig+0x110>
 8004e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e50:	d011      	beq.n	8004e76 <UART_SetConfig+0x10a>
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e56:	d811      	bhi.n	8004e7c <UART_SetConfig+0x110>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <UART_SetConfig+0xf8>
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d006      	beq.n	8004e70 <UART_SetConfig+0x104>
 8004e62:	e00b      	b.n	8004e7c <UART_SetConfig+0x110>
 8004e64:	2300      	movs	r3, #0
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e08b      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e088      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e70:	2304      	movs	r3, #4
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e085      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e76:	2308      	movs	r3, #8
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e082      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e07f      	b.n	8004f82 <UART_SetConfig+0x216>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a82      	ldr	r2, [pc, #520]	@ (8005090 <UART_SetConfig+0x324>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d124      	bne.n	8004ed6 <UART_SetConfig+0x16a>
 8004e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8005088 <UART_SetConfig+0x31c>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004e94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e98:	d011      	beq.n	8004ebe <UART_SetConfig+0x152>
 8004e9a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e9e:	d817      	bhi.n	8004ed0 <UART_SetConfig+0x164>
 8004ea0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ea4:	d011      	beq.n	8004eca <UART_SetConfig+0x15e>
 8004ea6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004eaa:	d811      	bhi.n	8004ed0 <UART_SetConfig+0x164>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <UART_SetConfig+0x14c>
 8004eb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eb4:	d006      	beq.n	8004ec4 <UART_SetConfig+0x158>
 8004eb6:	e00b      	b.n	8004ed0 <UART_SetConfig+0x164>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e061      	b.n	8004f82 <UART_SetConfig+0x216>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e05e      	b.n	8004f82 <UART_SetConfig+0x216>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e05b      	b.n	8004f82 <UART_SetConfig+0x216>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e058      	b.n	8004f82 <UART_SetConfig+0x216>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e055      	b.n	8004f82 <UART_SetConfig+0x216>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6e      	ldr	r2, [pc, #440]	@ (8005094 <UART_SetConfig+0x328>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d124      	bne.n	8004f2a <UART_SetConfig+0x1be>
 8004ee0:	4b69      	ldr	r3, [pc, #420]	@ (8005088 <UART_SetConfig+0x31c>)
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004ee8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004eec:	d011      	beq.n	8004f12 <UART_SetConfig+0x1a6>
 8004eee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ef2:	d817      	bhi.n	8004f24 <UART_SetConfig+0x1b8>
 8004ef4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ef8:	d011      	beq.n	8004f1e <UART_SetConfig+0x1b2>
 8004efa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004efe:	d811      	bhi.n	8004f24 <UART_SetConfig+0x1b8>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <UART_SetConfig+0x1a0>
 8004f04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f08:	d006      	beq.n	8004f18 <UART_SetConfig+0x1ac>
 8004f0a:	e00b      	b.n	8004f24 <UART_SetConfig+0x1b8>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e037      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f12:	2302      	movs	r3, #2
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e034      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e031      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e02e      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e02b      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a5a      	ldr	r2, [pc, #360]	@ (8005098 <UART_SetConfig+0x32c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d124      	bne.n	8004f7e <UART_SetConfig+0x212>
 8004f34:	4b54      	ldr	r3, [pc, #336]	@ (8005088 <UART_SetConfig+0x31c>)
 8004f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f38:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004f3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f40:	d011      	beq.n	8004f66 <UART_SetConfig+0x1fa>
 8004f42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f46:	d817      	bhi.n	8004f78 <UART_SetConfig+0x20c>
 8004f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f4c:	d011      	beq.n	8004f72 <UART_SetConfig+0x206>
 8004f4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f52:	d811      	bhi.n	8004f78 <UART_SetConfig+0x20c>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <UART_SetConfig+0x1f4>
 8004f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f5c:	d006      	beq.n	8004f6c <UART_SetConfig+0x200>
 8004f5e:	e00b      	b.n	8004f78 <UART_SetConfig+0x20c>
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e00d      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f66:	2302      	movs	r3, #2
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e00a      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e007      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f72:	2308      	movs	r3, #8
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e004      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e001      	b.n	8004f82 <UART_SetConfig+0x216>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f8a:	d15b      	bne.n	8005044 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d827      	bhi.n	8004fe2 <UART_SetConfig+0x276>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <UART_SetConfig+0x22c>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	08004fe3 	.word	0x08004fe3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fe3 	.word	0x08004fe3
 8004fb0:	08004fe3 	.word	0x08004fe3
 8004fb4:	08004fe3 	.word	0x08004fe3
 8004fb8:	08004fdb 	.word	0x08004fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fd fbd4 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	61b8      	str	r0, [r7, #24]
        break;
 8004fc2:	e013      	b.n	8004fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fd fbf2 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8004fc8:	61b8      	str	r0, [r7, #24]
        break;
 8004fca:	e00f      	b.n	8004fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fcc:	4b33      	ldr	r3, [pc, #204]	@ (800509c <UART_SetConfig+0x330>)
 8004fce:	61bb      	str	r3, [r7, #24]
        break;
 8004fd0:	e00c      	b.n	8004fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd2:	f7fd fb69 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8004fd6:	61b8      	str	r0, [r7, #24]
        break;
 8004fd8:	e008      	b.n	8004fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fde:	61bb      	str	r3, [r7, #24]
        break;
 8004fe0:	e004      	b.n	8004fec <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8004fea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8082 	beq.w	80050f8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	005a      	lsls	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d916      	bls.n	800503e <UART_SetConfig+0x2d2>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005016:	d212      	bcs.n	800503e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f023 030f 	bic.w	r3, r3, #15
 8005020:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	b29b      	uxth	r3, r3
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	b29a      	uxth	r2, r3
 800502e:	89fb      	ldrh	r3, [r7, #14]
 8005030:	4313      	orrs	r3, r2
 8005032:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	89fa      	ldrh	r2, [r7, #14]
 800503a:	60da      	str	r2, [r3, #12]
 800503c:	e05c      	b.n	80050f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	77bb      	strb	r3, [r7, #30]
 8005042:	e059      	b.n	80050f8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005044:	7ffb      	ldrb	r3, [r7, #31]
 8005046:	2b08      	cmp	r3, #8
 8005048:	d835      	bhi.n	80050b6 <UART_SetConfig+0x34a>
 800504a:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <UART_SetConfig+0x2e4>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005075 	.word	0x08005075
 8005054:	0800507d 	.word	0x0800507d
 8005058:	080050a1 	.word	0x080050a1
 800505c:	080050b7 	.word	0x080050b7
 8005060:	080050a7 	.word	0x080050a7
 8005064:	080050b7 	.word	0x080050b7
 8005068:	080050b7 	.word	0x080050b7
 800506c:	080050b7 	.word	0x080050b7
 8005070:	080050af 	.word	0x080050af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fd fb78 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8005078:	61b8      	str	r0, [r7, #24]
        break;
 800507a:	e021      	b.n	80050c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800507c:	f7fd fb96 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8005080:	61b8      	str	r0, [r7, #24]
        break;
 8005082:	e01d      	b.n	80050c0 <UART_SetConfig+0x354>
 8005084:	40013800 	.word	0x40013800
 8005088:	40021000 	.word	0x40021000
 800508c:	40004400 	.word	0x40004400
 8005090:	40004800 	.word	0x40004800
 8005094:	40004c00 	.word	0x40004c00
 8005098:	40005000 	.word	0x40005000
 800509c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <UART_SetConfig+0x3a4>)
 80050a2:	61bb      	str	r3, [r7, #24]
        break;
 80050a4:	e00c      	b.n	80050c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a6:	f7fd faff 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 80050aa:	61b8      	str	r0, [r7, #24]
        break;
 80050ac:	e008      	b.n	80050c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b2:	61bb      	str	r3, [r7, #24]
        break;
 80050b4:	e004      	b.n	80050c0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	77bb      	strb	r3, [r7, #30]
        break;
 80050be:	bf00      	nop
    }

    if (pclk != 0U)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d018      	beq.n	80050f8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085a      	lsrs	r2, r3, #1
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	441a      	add	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d909      	bls.n	80050f4 <UART_SetConfig+0x388>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e6:	d205      	bcs.n	80050f4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	e001      	b.n	80050f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005104:	7fbb      	ldrb	r3, [r7, #30]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	007a1200 	.word	0x007a1200

08005114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01a      	beq.n	800522a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005212:	d10a      	bne.n	800522a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b098      	sub	sp, #96	@ 0x60
 800525c:	af02      	add	r7, sp, #8
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005268:	f7fb fd5e 	bl	8000d28 <HAL_GetTick>
 800526c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d12e      	bne.n	80052da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800527c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005284:	2200      	movs	r2, #0
 8005286:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f88c 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d021      	beq.n	80052da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e062      	b.n	80053a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d149      	bne.n	800537c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f856 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d03c      	beq.n	800537c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	623b      	str	r3, [r7, #32]
   return(result);
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005320:	633b      	str	r3, [r7, #48]	@ 0x30
 8005322:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	60fb      	str	r3, [r7, #12]
   return(result);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005354:	61fa      	str	r2, [r7, #28]
 8005356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	617b      	str	r3, [r7, #20]
   return(result);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e011      	b.n	80053a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3758      	adds	r7, #88	@ 0x58
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b8:	e04f      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d04b      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fb fcb1 	bl	8000d28 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e04e      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d037      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xb2>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b80      	cmp	r3, #128	@ 0x80
 80053ee:	d034      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xb2>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b40      	cmp	r3, #64	@ 0x40
 80053f4:	d031      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b08      	cmp	r3, #8
 8005402:	d110      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2208      	movs	r2, #8
 800540a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f8ed 	bl	80055ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2208      	movs	r2, #8
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e029      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005434:	d111      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800543e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f8d3 	bl	80055ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e00f      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	429a      	cmp	r2, r3
 8005476:	d0a0      	beq.n	80053ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005484:	b480      	push	{r7}
 8005486:	b097      	sub	sp, #92	@ 0x5c
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	4613      	mov	r3, r2
 8005490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b6:	d10e      	bne.n	80054d6 <UART_Start_Receive_IT+0x52>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <UART_Start_Receive_IT+0x48>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80054c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054ca:	e01a      	b.n	8005502 <UART_Start_Receive_IT+0x7e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	22ff      	movs	r2, #255	@ 0xff
 80054d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054d4:	e015      	b.n	8005502 <UART_Start_Receive_IT+0x7e>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10d      	bne.n	80054fa <UART_Start_Receive_IT+0x76>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <UART_Start_Receive_IT+0x6c>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	22ff      	movs	r2, #255	@ 0xff
 80054ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054ee:	e008      	b.n	8005502 <UART_Start_Receive_IT+0x7e>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	227f      	movs	r2, #127	@ 0x7f
 80054f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054f8:	e003      	b.n	8005502 <UART_Start_Receive_IT+0x7e>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2222      	movs	r2, #34	@ 0x22
 800550e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3308      	adds	r3, #8
 8005518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	657b      	str	r3, [r7, #84]	@ 0x54
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005532:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554e:	d107      	bne.n	8005560 <UART_Start_Receive_IT+0xdc>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a22      	ldr	r2, [pc, #136]	@ (80055e4 <UART_Start_Receive_IT+0x160>)
 800555c:	669a      	str	r2, [r3, #104]	@ 0x68
 800555e:	e002      	b.n	8005566 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a21      	ldr	r2, [pc, #132]	@ (80055e8 <UART_Start_Receive_IT+0x164>)
 8005564:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
 800558e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005592:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800559a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_Start_Receive_IT+0xea>
 80055a0:	e018      	b.n	80055d4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	613b      	str	r3, [r7, #16]
   return(result);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f043 0320 	orr.w	r3, r3, #32
 80055b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	69f9      	ldr	r1, [r7, #28]
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e6      	bne.n	80055a2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	375c      	adds	r7, #92	@ 0x5c
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	080058dd 	.word	0x080058dd
 80055e8:	08005735 	.word	0x08005735

080055ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b095      	sub	sp, #84	@ 0x54
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005612:	643b      	str	r3, [r7, #64]	@ 0x40
 8005614:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e6      	bne.n	80055f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	61fb      	str	r3, [r7, #28]
   return(result);
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800564c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e5      	bne.n	8005626 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565e:	2b01      	cmp	r3, #1
 8005660:	d118      	bne.n	8005694 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f023 0310 	bic.w	r3, r3, #16
 8005676:	647b      	str	r3, [r7, #68]	@ 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6979      	ldr	r1, [r7, #20]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	613b      	str	r3, [r7, #16]
   return(result);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e6      	bne.n	8005662 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056a8:	bf00      	nop
 80056aa:	3754      	adds	r7, #84	@ 0x54
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fb34 	bl	8004d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d8:	bf00      	nop
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6979      	ldr	r1, [r7, #20]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	613b      	str	r3, [r7, #16]
   return(result);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e6      	bne.n	80056e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff fb00 	bl	8004d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572c:	bf00      	nop
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b09c      	sub	sp, #112	@ 0x70
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005742:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800574c:	2b22      	cmp	r3, #34	@ 0x22
 800574e:	f040 80b9 	bne.w	80058c4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005758:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800575c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005766:	b2da      	uxtb	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576c:	400a      	ands	r2, r1
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 809c 	bne.w	80058d4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e6      	bne.n	800579c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80057f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d018      	beq.n	8005856 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	623b      	str	r3, [r7, #32]
   return(result);
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005838:	663b      	str	r3, [r7, #96]	@ 0x60
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005842:	633b      	str	r3, [r7, #48]	@ 0x30
 8005844:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e6      	bne.n	8005824 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800585a:	2b01      	cmp	r3, #1
 800585c:	d12e      	bne.n	80058bc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	60fb      	str	r3, [r7, #12]
   return(result);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0310 	bic.w	r3, r3, #16
 8005878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	617b      	str	r3, [r7, #20]
   return(result);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e6      	bne.n	8005864 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d103      	bne.n	80058ac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2210      	movs	r2, #16
 80058aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fa4d 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ba:	e00b      	b.n	80058d4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fb f827 	bl	8000910 <HAL_UART_RxCpltCallback>
}
 80058c2:	e007      	b.n	80058d4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0208 	orr.w	r2, r2, #8
 80058d2:	619a      	str	r2, [r3, #24]
}
 80058d4:	bf00      	nop
 80058d6:	3770      	adds	r7, #112	@ 0x70
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b09c      	sub	sp, #112	@ 0x70
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f4:	2b22      	cmp	r3, #34	@ 0x22
 80058f6:	f040 80b9 	bne.w	8005a6c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005900:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005908:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800590a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800590e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005912:	4013      	ands	r3, r2
 8005914:	b29a      	uxth	r2, r3
 8005916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005918:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591e:	1c9a      	adds	r2, r3, #2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 809c 	bne.w	8005a7c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005958:	667b      	str	r3, [r7, #100]	@ 0x64
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005962:	657b      	str	r3, [r7, #84]	@ 0x54
 8005964:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e6      	bne.n	8005944 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3308      	adds	r3, #8
 800597c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	663b      	str	r3, [r7, #96]	@ 0x60
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005996:	643a      	str	r2, [r7, #64]	@ 0x40
 8005998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800599c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e5      	bne.n	8005976 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d018      	beq.n	80059fe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e6      	bne.n	80059cc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d12e      	bne.n	8005a64 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6979      	ldr	r1, [r7, #20]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	613b      	str	r3, [r7, #16]
   return(result);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e6      	bne.n	8005a0c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d103      	bne.n	8005a54 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2210      	movs	r2, #16
 8005a52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff f979 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a62:	e00b      	b.n	8005a7c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fa ff53 	bl	8000910 <HAL_UART_RxCpltCallback>
}
 8005a6a:	e007      	b.n	8005a7c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0208 	orr.w	r2, r2, #8
 8005a7a:	619a      	str	r2, [r3, #24]
}
 8005a7c:	bf00      	nop
 8005a7e:	3770      	adds	r7, #112	@ 0x70
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <memset>:
 8005a98:	4402      	add	r2, r0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d100      	bne.n	8005aa2 <memset+0xa>
 8005aa0:	4770      	bx	lr
 8005aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa6:	e7f9      	b.n	8005a9c <memset+0x4>

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8005ae0 <__libc_init_array+0x38>)
 8005aac:	4c0d      	ldr	r4, [pc, #52]	@ (8005ae4 <__libc_init_array+0x3c>)
 8005aae:	1b64      	subs	r4, r4, r5
 8005ab0:	10a4      	asrs	r4, r4, #2
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	42a6      	cmp	r6, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8005ae8 <__libc_init_array+0x40>)
 8005aba:	4c0c      	ldr	r4, [pc, #48]	@ (8005aec <__libc_init_array+0x44>)
 8005abc:	f000 f818 	bl	8005af0 <_init>
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	42a6      	cmp	r6, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad0:	4798      	blx	r3
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ada:	4798      	blx	r3
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	08005b58 	.word	0x08005b58
 8005ae4:	08005b58 	.word	0x08005b58
 8005ae8:	08005b58 	.word	0x08005b58
 8005aec:	08005b5c 	.word	0x08005b5c

08005af0 <_init>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr

08005afc <_fini>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	bf00      	nop
 8005b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b02:	bc08      	pop	{r3}
 8005b04:	469e      	mov	lr, r3
 8005b06:	4770      	bx	lr
